<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log SYSTEM "logger.dtd">
<log>
File Measures: 
	Number of req in file = 500
<ExtractedRequirement>
	<Requirement>
		ID: [TempReqId-196:]
		text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 7 seconds within 18 seconds , if the RCMTECHTERM_idc_inhibitor whose index is 0 is above the RCMTECHTERM_nosailing_requests for 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 7 seconds within 18 seconds , if the RCMTECHTERM_idc_inhibitor whose index is 0 is above the RCMTECHTERM_nosailing_requests for 14 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 7 seconds within 18 seconds
					[2]: if the RCMTECHTERM_idc_inhibitor whose index is 0 is above the RCMTECHTERM_nosailing_requests for 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= every 7 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 0
						SlotType= TimeScope|| Text= for 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-184:]
		text: before the RCMTECHTERM_sailing_request whose index equals 2 is greater than the RCMTECHTERM_standstill_request_flag , when the RCMTECHTERM_sailing_inhibitor whose index is less than 2 equals RCMVAL_true every 18 seconds , the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at least 4 seconds within at most 2 seconds , before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_request whose index equals 2 is greater than the RCMTECHTERM_standstill_request_flag , when the RCMTECHTERM_sailing_inhibitor whose index is less than 2 equals RCMVAL_true every 18 seconds , the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at least 4 seconds within at most 2 seconds , before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_request whose index equals 2 is greater than the RCMTECHTERM_standstill_request_flag the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at least 4 seconds within at most 2 seconds
					[2]: when the RCMTECHTERM_sailing_inhibitor whose index is less than 2 equals RCMVAL_true every 18 seconds
					[3]: before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_standstill_request_flag
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 2
						SlotType= TimeScope|| Text= for at least 4 seconds
						SlotType= TimeScope|| Text= within at most 2 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is less than 2
						SlotType= TimeScope|| Text= every 18 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_inhibitor whose index is less than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at least 
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at most 
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index 2 is greater than the RCMTECHTERM_standstill_request_flag the RCMTECHTERM_engine_error
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index 2
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag the RCMTECHTERM_engine_error
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:shall be set
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 4
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 4
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
									<PreElapsedTime>
										TimeType: PreElapsed
										Value: 2
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<PreElapsedTime>
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-172:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds , the RCMTECHTERM_sailing_termination shall be moved up for 28 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds , the RCMTECHTERM_sailing_termination shall be moved up for 28 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be moved up for 28 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_quality_factor that equals 7 is less than the RCMTECHTERM_brake_fault_state within at least 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that equals 7
						SlotType= TimeScope|| Text= within at least 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= for 28 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that equals 7
						SlotType= TimeScope|| Text= within at least 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-281:]
		text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= for 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-160:]
		text: before the RCMTECHTERM_steering_wheel_angle whose index is above 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_sailing_request for at most 17 seconds within at most 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle whose index is above 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_sailing_request for at most 17 seconds within at most 27 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle whose index is above 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_sailing_request for at most 17 seconds within at most 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= within at most 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_steering_wheel_angle whose index is above 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-293:]
		text: while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 19 seconds , if the RCMTECHTERM_sailing_inhibitor that is greater than 1 is less than the RCMTECHTERM_nosailing_requests within at least 21 seconds , the RCMTECHTERM_brake_pedal shall be moved up within 12 seconds within 12 seconds , while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 19 seconds , if the RCMTECHTERM_sailing_inhibitor that is greater than 1 is less than the RCMTECHTERM_nosailing_requests within at least 21 seconds , the RCMTECHTERM_brake_pedal shall be moved up within 12 seconds within 12 seconds , while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 19 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor that is greater than 1 is less than the RCMTECHTERM_nosailing_requests within at least 21 seconds
					[3]: the RCMTECHTERM_brake_pedal shall be moved up within 12 seconds within 12 seconds
					[4]: while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at least 19 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is greater than 1
						SlotType= TimeScope|| Text= within at least 21 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
						SlotType= TimeScope|| Text= within 12 seconds
						SlotType= TimeScope|| Text= within 12 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-390:]
		text: before the RCMTECHTERM_sailing_inhibitor that exceeds 1 is above the RCMTECHTERM_brake_pedal , when the RCMTECHTERM_idc_inhibitor whose index is 9 exceeds the RCMTECHTERM_defined_position , if the RCMTECHTERM_steering_wheel_angle that is above 2 is above the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_fault_state every at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor that exceeds 1 is above the RCMTECHTERM_brake_pedal , when the RCMTECHTERM_idc_inhibitor whose index is 9 exceeds the RCMTECHTERM_defined_position , if the RCMTECHTERM_steering_wheel_angle that is above 2 is above the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_fault_state every at most 21 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor that exceeds 1 is above the RCMTECHTERM_brake_pedal when the RCMTECHTERM_idc_inhibitor whose index is 9 exceeds the RCMTECHTERM_defined_position
					[2]: if the RCMTECHTERM_steering_wheel_angle that is above 2 is above the RCMTECHTERM_brake_fault_state
					[3]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_fault_state seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that exceeds 1
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 9
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is above 2
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_fault_state seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_steering_wheel_angle
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_fault_state seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-48:]
		text: while the RCMTECHTERM_sailing_request that is 8 is less than the RCMTECHTERM_sailing_inhibitor , before the RCMTECHTERM_quality_signal that is less than 2 is less than the RCMTECHTERM_transmission_error , the RCMTECHTERM_standstill_request_flag shall be moved up every at most 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_sailing_request that is 8 is less than the RCMTECHTERM_sailing_inhibitor , before the RCMTECHTERM_quality_signal that is less than 2 is less than the RCMTECHTERM_transmission_error , the RCMTECHTERM_standstill_request_flag shall be moved up every at most 14 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_sailing_request that is 8 is less than the RCMTECHTERM_sailing_inhibitor
					[2]: before the RCMTECHTERM_quality_signal that is less than 2 is less than the RCMTECHTERM_transmission_error
					[3]: the RCMTECHTERM_standstill_request_flag shall be moved up every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 8
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is less than 2
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_quality_signal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-36:]
		text: while the RCMTECHTERM_brake_pedal that is less than 8 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_pedal that is less than 8 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_pedal that is less than 8 is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is less than 8
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-24:]
		text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds , if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds , if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds , if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds , if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle within at most 10 seconds within at most 10 seconds
					[2]: if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds
					[3]: if the RCMTECHTERM_sailing_request equals RCMVAL_true for 8 seconds within at most 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at  most 10 seconds
						SlotType= TimeScope|| Text= within at  most 10 seconds
						SlotType= TimeScope|| Text= within at  most 10 seconds
						SlotType= TimeScope|| Text= within at  most 10 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= within at  most 8 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= within at  most 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-12:]
		text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_quality_factor for 2 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true , when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error for at most 22 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_quality_factor for 2 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true , when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error for at most 22 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_quality_factor for 2 seconds
					[2]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error for at most 22 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for 2 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at most 22 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-195:]
		text: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds , the RCMTECHTERM_transmission_error shall be moved up within at most 22 seconds every at least 21 seconds , before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is greater than the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds , the RCMTECHTERM_transmission_error shall be moved up within at most 22 seconds every at least 21 seconds , before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is greater than the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds
					[2]: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 8 is above the RCMTECHTERM_sailing_inhibitor within at most 26 seconds
					[3]: the RCMTECHTERM_transmission_error shall be moved up within at most 22 seconds every at least 21 seconds before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is greater than the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is greater than 8
						SlotType= TimeScope|| Text= within at most 26 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is greater than 8
						SlotType= TimeScope|| Text= within at most 26 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be moved up
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 2
						SlotType= TimeScope|| Text= within at most 22 seconds
						SlotType= TimeScope|| Text= every at least 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is greater than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-183:]
		text: if the RCMTECHTERM_lsc that equals 8 exceeds the RCMTECHTERM_sailing_request within 24 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 21 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 21 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request for at most 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_lsc that equals 8 exceeds the RCMTECHTERM_sailing_request within 24 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 21 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 21 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request for at most 24 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_lsc that equals 8 exceeds the RCMTECHTERM_sailing_request within 24 seconds
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true seconds the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 21 seconds when the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request for at most 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that equals 8
						SlotType= TimeScope|| Text= within 24 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= every at  least 21 seconds
						SlotType= TimeScope|| Text= for at  most 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-292:]
		text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor for at least 14 seconds within at least 8 seconds , if the RCMTECHTERM_lsc whose index equals 8 is above the RCMTECHTERM_sailing_request within 18 seconds , before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error for at least 24 seconds , while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position for at most 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor for at least 14 seconds within at least 8 seconds , if the RCMTECHTERM_lsc whose index equals 8 is above the RCMTECHTERM_sailing_request within 18 seconds , before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error for at least 24 seconds , while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position for at most 28 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor for at least 14 seconds within at least 8 seconds
					[2]: if the RCMTECHTERM_lsc whose index equals 8 is above the RCMTECHTERM_sailing_request within 18 seconds
					[3]: before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error for at least 24 seconds
					[4]: while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position for at most 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at least 14 seconds
						SlotType= TimeScope|| Text= within at least 8 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index equals 8
						SlotType= TimeScope|| Text= within 18 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= for at most 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index equals 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-171:]
		text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_standstill_request_flag within at least 8 seconds every 24 seconds , before the RCMTECHTERM_standstill_request_flag that is 5 is less than the RCMTECHTERM_brake_fault_state for at least 9 seconds , while the RCMTECHTERM_sailing_termination whose index is above 5 is RCMVAL_true for at least 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_standstill_request_flag within at least 8 seconds every 24 seconds , before the RCMTECHTERM_standstill_request_flag that is 5 is less than the RCMTECHTERM_brake_fault_state for at least 9 seconds , while the RCMTECHTERM_sailing_termination whose index is above 5 is RCMVAL_true for at least 19 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_standstill_request_flag within at least 8 seconds every 24 seconds
					[2]: before the RCMTECHTERM_standstill_request_flag that is 5 is less than the RCMTECHTERM_brake_fault_state for at least 9 seconds
					[3]: while the RCMTECHTERM_sailing_termination whose index is above 5 is RCMVAL_true for at least 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at least 8 seconds
						SlotType= TimeScope|| Text= every 24 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is above 5
						SlotType= TimeScope|| Text= for at least 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is above 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is above 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-280:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor every 15 seconds within 23 seconds , after the RCMTECHTERM_engine_error whose index equals 1 is greater than the RCMTECHTERM_nosailing_requests .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor every 15 seconds within 23 seconds , after the RCMTECHTERM_engine_error whose index equals 1 is greater than the RCMTECHTERM_nosailing_requests .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor every 15 seconds within 23 seconds after the RCMTECHTERM_engine_error whose index equals 1 is greater than the RCMTECHTERM_nosailing_requests
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_nosailing_requests
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index equals 1
						SlotType= TimeScope|| Text= within 23 seconds
						SlotType= TimeScope|| Text= every 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = index 1 is greater than the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: index 1
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-59:]
		text: while the RCMTECHTERM_brake_pedal whose index exceeds 8 is greater than the RCMTECHTERM_brake_fault_state for 27 seconds , when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds , when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_pedal whose index exceeds 8 is greater than the RCMTECHTERM_brake_fault_state for 27 seconds , when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds , when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_pedal whose index exceeds 8 is greater than the RCMTECHTERM_brake_fault_state for 27 seconds when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state for at least 22 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index exceeds 8
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 7
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 7
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= for 27 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index exceeds 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-47:]
		text: the RCMTECHTERM_idc_inhibitor shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be moved up .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-35:]
		text: if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds , after the RCMTECHTERM_defined_position that equals 4 is less than the RCMTECHTERM_brake_fault_state for at least 8 seconds , the RCMTECHTERM_engine_error shall be moved up every at least 8 seconds for at least 17 seconds , if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds , after the RCMTECHTERM_defined_position that equals 4 is less than the RCMTECHTERM_brake_fault_state for at least 8 seconds , the RCMTECHTERM_engine_error shall be moved up every at least 8 seconds for at least 17 seconds , if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds
					[2]: after the RCMTECHTERM_defined_position that equals 4 is less than the RCMTECHTERM_brake_fault_state for at least 8 seconds
					[3]: the RCMTECHTERM_engine_error shall be moved up every at least 8 seconds for at least 17 seconds
					[4]: if the RCMTECHTERM_idc_inhibitor is RCMVAL_true within at least 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						SlotType= TimeScope|| Text= within at least 28 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that equals 4
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be moved up
						SlotType= TimeScope|| Text= for at least 17 seconds
						SlotType= TimeScope|| Text= every at least 8 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						SlotType= TimeScope|| Text= within at least 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 8
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 8
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-23:]
		text: after the RCMTECHTERM_sailing_termination whose index is above 0 is less than the RCMTECHTERM_vehicle_speed_quality_factor for at least 23 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every 14 seconds within 25 seconds , if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds , if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_termination whose index is above 0 is less than the RCMTECHTERM_vehicle_speed_quality_factor for at least 23 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every 14 seconds within 25 seconds , if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds , if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_termination whose index is above 0 is less than the RCMTECHTERM_vehicle_speed_quality_factor for at least 23 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every 14 seconds within 25 seconds
					[3]: if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds
					[4]: if the RCMTECHTERM_defined_position whose index is greater than 4 is above the RCMTECHTERM_sailing_request within at most 25 seconds for at most 20 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is above 0
						SlotType= TimeScope|| Text= for at least 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= every 14 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 4
						SlotType= TimeScope|| Text= within at most 25 seconds
						SlotType= TimeScope|| Text= for at most 20 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 4
						SlotType= TimeScope|| Text= within at most 25 seconds
						SlotType= TimeScope|| Text= for at most 20 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is greater than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_termination whose index is above 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 23
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 23
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-11:]
		text: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , when the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_sailing_request every 25 seconds for at most 18 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_sailing_inhibitor for at most 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , when the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_sailing_request every 25 seconds for at most 18 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_sailing_inhibitor for at most 15 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true when the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_sailing_request every 25 seconds for at most 18 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_pedal
					[3]: before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_sailing_inhibitor for at most 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is 4
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= every 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_pedal
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at most 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 15
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 15
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-194:]
		text: if the RCMTECHTERM_lsc whose index is less than 0 is less than the RCMTECHTERM_sailing_request for at most 13 seconds , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every 27 seconds , after the RCMTECHTERM_defined_position that is above 6 is above the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_lsc whose index is less than 0 is less than the RCMTECHTERM_sailing_request for at most 13 seconds , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every 27 seconds , after the RCMTECHTERM_defined_position that is above 6 is above the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_lsc whose index is less than 0 is less than the RCMTECHTERM_sailing_request for at most 13 seconds
					[2]: the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every 27 seconds
					[3]: after the RCMTECHTERM_defined_position that is above 6 is above the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 0
						SlotType= TimeScope|| Text= for at most 13 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every 27 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is above 6
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is less than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index is less than 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-182:]
		text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag within at least 19 seconds within at least 19 seconds , before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_fault_state for 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag within at least 19 seconds within at least 19 seconds , before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_fault_state for 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag within at least 19 seconds within at least 19 seconds
					[2]: before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_fault_state for 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at least 19 seconds
						SlotType= TimeScope|| Text= within at least 19 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-170:]
		text: the RCMTECHTERM_lsc shall be set to RCMVAL_true within at least 2 seconds for at least 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be set to RCMVAL_true within at least 2 seconds for at least 23 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be set to RCMVAL_true within at least 2 seconds for at least 23 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for at least 23 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-291:]
		text: before the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests for at least 29 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal for 29 seconds , if the RCMTECHTERM_sailing_request whose index is less than 3 is greater than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 exceeds the RCMTECHTERM_sailing_request for 4 seconds , while the RCMTECHTERM_sailing_request that is above 5 is greater than the RCMTECHTERM_engine_error for at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests for at least 29 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal for 29 seconds , if the RCMTECHTERM_sailing_request whose index is less than 3 is greater than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 exceeds the RCMTECHTERM_sailing_request for 4 seconds , while the RCMTECHTERM_sailing_request that is above 5 is greater than the RCMTECHTERM_engine_error for at least 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests for at least 29 seconds
					[2]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal for 29 seconds
					[3]: if the RCMTECHTERM_sailing_request whose index is less than 3 is greater than the RCMTECHTERM_steering_wheel_angle
					[4]: when the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 exceeds the RCMTECHTERM_sailing_request for 4 seconds
					[5]: while the RCMTECHTERM_sailing_request that is above 5 is greater than the RCMTECHTERM_engine_error for at least 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at least 29 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for 29 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is less than 3
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0
						SlotType= TimeScope|| Text= for 4 seconds
					C[5]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is above 5
						SlotType= TimeScope|| Text= for at least 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is less than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 29
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 29
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_engine_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 13
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 13
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_engine_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 13
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 13
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-38:]
		text: if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds , if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every at most 29 seconds , when the RCMTECHTERM_lsc that is 6 exceeds the RCMTECHTERM_sailing_inhibitor every at most 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds , if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every at most 29 seconds , when the RCMTECHTERM_lsc that is 6 exceeds the RCMTECHTERM_sailing_inhibitor every at most 8 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds
					[2]: if the RCMTECHTERM_engine_error equals RCMVAL_true for 17 seconds
					[3]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every at most 29 seconds when the RCMTECHTERM_lsc that is 6 exceeds the RCMTECHTERM_sailing_inhibitor every at most 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= TimeScope|| Text= for 17 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= TimeScope|| Text= for 17 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is 6
						SlotType= TimeScope|| Text= every at most 29 seconds
						SlotType= TimeScope|| Text= every at most 8 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-26:]
		text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_standstill_request_flag every at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_standstill_request_flag every at most 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_standstill_request_flag seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_standstill_request_flag seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_standstill_request_flag seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-14:]
		text: if the RCMTECHTERM_defined_position that is above 0 is less than the RCMTECHTERM_sailing_inhibitor within at most 21 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position that is above 0 is less than the RCMTECHTERM_sailing_inhibitor within at most 21 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position that is above 0 is less than the RCMTECHTERM_sailing_inhibitor within at most 21 seconds
					[2]: the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds
					[3]: the RCMTECHTERM_standstill_request_flag shall be moved up within 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is above 0
						SlotType= TimeScope|| Text= within at most 21 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
						SlotType= TimeScope|| Text= within 3 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
						SlotType= TimeScope|| Text= within 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-409:]
		text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_nosailing_requests within at most 15 seconds every at least 6 seconds , when the RCMTECHTERM_transmission_error that exceeds 4 is greater than the RCMTECHTERM_steering_wheel_angle every 6 seconds , while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor for 22 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_nosailing_requests within at most 15 seconds every at least 6 seconds , when the RCMTECHTERM_transmission_error that exceeds 4 is greater than the RCMTECHTERM_steering_wheel_angle every 6 seconds , while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor for 22 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_nosailing_requests within at most 15 seconds every at least 6 seconds when the RCMTECHTERM_transmission_error that exceeds 4 is greater than the RCMTECHTERM_steering_wheel_angle every 6 seconds
					[2]: while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor for 22 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that exceeds 4
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= every at least 6 seconds
						SlotType= TimeScope|| Text= every 6 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for 22 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 22
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 22
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 22
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 22
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-193:]
		text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 21 seconds , before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc , if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 21 seconds , before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc , if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 21 seconds
					[2]: before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_vehicle_speed_quality_factor
					[3]: if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc
					[4]: if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within at most 21 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_vehicle_speed_quality_factor
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-181:]
		text: while the RCMTECHTERM_nosailing_requests that is 5 is above the RCMTECHTERM_sailing_inhibitor , when the RCMTECHTERM_idc_inhibitor whose index is above 1 is less than the RCMTECHTERM_lsc every at least 10 seconds for at most 10 seconds , if the RCMTECHTERM_steering_wheel_angle is RCMVAL_true within at least 16 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_nosailing_requests every at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_nosailing_requests that is 5 is above the RCMTECHTERM_sailing_inhibitor , when the RCMTECHTERM_idc_inhibitor whose index is above 1 is less than the RCMTECHTERM_lsc every at least 10 seconds for at most 10 seconds , if the RCMTECHTERM_steering_wheel_angle is RCMVAL_true within at least 16 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_nosailing_requests every at least 12 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_nosailing_requests that is 5 is above the RCMTECHTERM_sailing_inhibitor
					[2]: when the RCMTECHTERM_idc_inhibitor whose index is above 1 is less than the RCMTECHTERM_lsc every at least 10 seconds for at most 10 seconds
					[3]: if the RCMTECHTERM_steering_wheel_angle is RCMVAL_true within at least 16 seconds
					[4]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_nosailing_requests seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is 5
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is above 1
						SlotType= TimeScope|| Text= for at most 10 seconds
						SlotType= TimeScope|| Text= every at least 10 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= TimeScope|| Text= within at least 16 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_nosailing_requests seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is above 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_nosailing_requests seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_nosailing_requests
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_nosailing_requests
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-290:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle for 3 seconds within at least 2 seconds , when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_lsc for 25 seconds every at least 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle for 3 seconds within at least 2 seconds , when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_lsc for 25 seconds every at least 11 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle for 3 seconds within at least 2 seconds when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_lsc for 25 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 3 seconds
						SlotType= TimeScope|| Text= within at  least 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-49:]
		text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_nosailing_requests for at least 22 seconds within at most 21 seconds every at least 9 seconds , if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds , if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds , before the RCMTECHTERM_sailing_termination is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_nosailing_requests for at least 22 seconds within at most 21 seconds every at least 9 seconds , if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds , if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds , before the RCMTECHTERM_sailing_termination is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_nosailing_requests for at least 22 seconds within at most 21 seconds every at least 9 seconds
					[2]: if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds
					[3]: if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle for 2 seconds within at most 14 seconds
					[4]: before the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= within at most 21 seconds
						SlotType= TimeScope|| Text= every at least 9 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at most 14 seconds
						SlotType= TimeScope|| Text= for 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at most 14 seconds
						SlotType= TimeScope|| Text= for 2 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-37:]
		text: before the RCMTECHTERM_standstill_request_flag whose index equals 1 exceeds the RCMTECHTERM_sailing_request , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at least 10 seconds every at most 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index equals 1 exceeds the RCMTECHTERM_sailing_request , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at least 10 seconds every at most 4 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index equals 1 exceeds the RCMTECHTERM_sailing_request the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at least 10 seconds every at most 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_sailing_request
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index equals 1
						SlotType= TimeScope|| Text= within at least 10 seconds
						SlotType= TimeScope|| Text= every at most 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-25:]
		text: while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true for at least 18 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_quality_signal for 10 seconds every at least 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true for at least 18 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_quality_signal for 10 seconds every at least 27 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true for at least 18 seconds
					[2]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_quality_signal for 10 seconds every at least 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
						SlotType= TimeScope|| Text= for at least 18 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for 10 seconds
						SlotType= TimeScope|| Text= every at least 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-13:]
		text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 18 seconds every at least 23 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 9 is greater than the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 18 seconds every at least 23 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 9 is greater than the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 18 seconds every at least 23 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 9 is greater than the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every at least 23 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 9
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-408:]
		text: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds , before the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at most 16 seconds , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_quality_signal within at most 18 seconds every at least 23 seconds for 25 seconds , if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds , before the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at most 16 seconds , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_quality_signal within at most 18 seconds every at least 23 seconds for 25 seconds , if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds
					[2]: before the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at most 16 seconds
					[3]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_quality_signal within at most 18 seconds every at least 23 seconds for 25 seconds
					[4]: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error within 15 seconds for at most 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 28 seconds
						SlotType= TimeScope|| Text= within 15 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that exceeds 2
						SlotType= TimeScope|| Text= for at most 16 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within at most 18 seconds
						SlotType= TimeScope|| Text= for 25 seconds
						SlotType= TimeScope|| Text= every at least 23 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 28 seconds
						SlotType= TimeScope|| Text= within 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 16
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 16
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-192:]
		text: when the RCMTECHTERM_standstill_request_flag that is 0 is above the RCMTECHTERM_defined_position every at least 10 seconds for at most 19 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_standstill_request_flag every at most 29 seconds within 20 seconds , while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination for at least 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_standstill_request_flag that is 0 is above the RCMTECHTERM_defined_position every at least 10 seconds for at most 19 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_standstill_request_flag every at most 29 seconds within 20 seconds , while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination for at least 19 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_standstill_request_flag that is 0 is above the RCMTECHTERM_defined_position every at least 10 seconds for at most 19 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_standstill_request_flag every at most 29 seconds within 20 seconds
					[3]: while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination for at least 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is 0
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= every at least 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within 20 seconds
						SlotType= TimeScope|| Text= every at most 29 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for at least 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-180:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up for 17 seconds within at most 12 seconds , when the RCMTECHTERM_quality_signal whose index is less than 9 equals RCMVAL_true every 14 seconds , after the RCMTECHTERM_brake_fault_state whose index is less than 2 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up for 17 seconds within at most 12 seconds , when the RCMTECHTERM_quality_signal whose index is less than 9 equals RCMVAL_true every 14 seconds , after the RCMTECHTERM_brake_fault_state whose index is less than 2 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up for 17 seconds within at most 12 seconds when the RCMTECHTERM_quality_signal whose index is less than 9 equals RCMVAL_true every 14 seconds
					[2]: after the RCMTECHTERM_brake_fault_state whose index is less than 2 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 9
						SlotType= TimeScope|| Text= every 14 seconds
						SlotType= TimeScope|| Text= for 17 seconds
						SlotType= TimeScope|| Text= within at  most 12 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is less than 2
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_fault_state is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_fault_state whose index is less than 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-28:]
		text: when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor , when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_defined_position within at most 24 seconds for at most 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor , when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_defined_position within at most 24 seconds for at most 27 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: when the RCMTECHTERM_sailing_request whose index equals 3 is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[3]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_defined_position within at most 24 seconds for at most 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 3
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 3
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within at most 24 seconds
						SlotType= TimeScope|| Text= for at most 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index equals 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-16:]
		text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_termination every at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_termination every at most 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_termination seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_termination seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_termination seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-419:]
		text: before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 4 equals RCMVAL_true for at least 10 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds , while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests , if the RCMTECHTERM_quality_signal whose index exceeds 6 exceeds the RCMTECHTERM_nosailing_requests within at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 4 equals RCMVAL_true for at least 10 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds , while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests , if the RCMTECHTERM_quality_signal whose index exceeds 6 exceeds the RCMTECHTERM_nosailing_requests within at least 4 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 4 equals RCMVAL_true for at least 10 seconds
					[2]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds
					[3]: while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests
					[4]: if the RCMTECHTERM_quality_signal whose index exceeds 6 exceeds the RCMTECHTERM_nosailing_requests within at least 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 4
						SlotType= TimeScope|| Text= for at least 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for 18 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index exceeds 6
						SlotType= TimeScope|| Text= within at least 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index exceeds 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-407:]
		text: before the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal within at most 21 seconds within at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal within at most 21 seconds within at most 21 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal within at most 21 seconds within at most 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at most 21 seconds
						SlotType= TimeScope|| Text= within at most 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-9:]
		text: before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request , if the RCMTECHTERM_engine_error that equals 8 is RCMVAL_false for at least 12 seconds within at most 8 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds , before the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_brake_pedal for at most 20 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request , if the RCMTECHTERM_engine_error that equals 8 is RCMVAL_false for at least 12 seconds within at most 8 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds , before the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_brake_pedal for at most 20 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request
					[2]: if the RCMTECHTERM_engine_error that equals 8 is RCMVAL_false for at least 12 seconds within at most 8 seconds
					[3]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor within at least 9 seconds every 26 seconds
					[4]: before the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_brake_pedal for at most 20 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that equals 8
						SlotType= TimeScope|| Text= within at  most 8 seconds
						SlotType= TimeScope|| Text= for at  least 12 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= every 26 seconds
						SlotType= TimeScope|| Text= within at  least 9 seconds
						SlotType= TimeScope|| Text= within at  least 9 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is above 7
						SlotType= TimeScope|| Text= for at  most 20 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_engine_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 20
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 20
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-191:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_inhibitor every at least 14 seconds for at most 7 seconds , before the RCMTECHTERM_steering_wheel_angle whose index is 7 is less than the RCMTECHTERM_nosailing_requests for at least 20 seconds , after the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 0 is greater than the RCMTECHTERM_nosailing_requests .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_inhibitor every at least 14 seconds for at most 7 seconds , before the RCMTECHTERM_steering_wheel_angle whose index is 7 is less than the RCMTECHTERM_nosailing_requests for at least 20 seconds , after the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 0 is greater than the RCMTECHTERM_nosailing_requests .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_inhibitor every at least 14 seconds for at most 7 seconds
					[2]: before the RCMTECHTERM_steering_wheel_angle whose index is 7 is less than the RCMTECHTERM_nosailing_requests for at least 20 seconds
					[3]: after the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 0 is greater than the RCMTECHTERM_nosailing_requests
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= every at least 14 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 0
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-39:]
		text: before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_nosailing_requests , while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination for at least 29 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds , if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor within 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_nosailing_requests , while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination for at least 29 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds , if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor within 19 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_nosailing_requests
					[2]: while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination for at least 29 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds the RCMTECHTERM_idc_inhibitor shall be moved up within at least 23 seconds for at least 26 seconds
					[4]: if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor within 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for at  least 29 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= for at  least 26 seconds
						SlotType= TimeScope|| Text= within at  least 23 seconds
						SlotType= TimeScope|| Text= for at  least 26 seconds
						SlotType= TimeScope|| Text= within at  least 23 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= within 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 29
												Unit: seconds
												QPRelation: at  least
											<FormalSemantic>
												TechnicalOperator: null
												Value: 29
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_termination
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 29
												Unit: seconds
												QPRelation: at  least
											<FormalSemantic>
												TechnicalOperator: null
												Value: 29
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-27:]
		text: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every at least 24 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= every at least 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-15:]
		text: before the RCMTECHTERM_lsc is RCMVAL_true for 9 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_lsc within 20 seconds for 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc is RCMVAL_true for 9 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_lsc within 20 seconds for 19 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc is RCMVAL_true for 9 seconds
					[2]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_lsc within 20 seconds for 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= TimeScope|| Text= for 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within 20 seconds
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 9
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 9
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-418:]
		text: before the RCMTECHTERM_quality_signal that is 8 is above the RCMTECHTERM_brake_fault_state for at most 14 seconds , before the RCMTECHTERM_transmission_error that is less than 5 is RCMVAL_true for at least 16 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true within at most 6 seconds every at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal that is 8 is above the RCMTECHTERM_brake_fault_state for at most 14 seconds , before the RCMTECHTERM_transmission_error that is less than 5 is RCMVAL_true for at least 16 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true within at most 6 seconds every at most 19 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal that is 8 is above the RCMTECHTERM_brake_fault_state for at most 14 seconds
					[2]: before the RCMTECHTERM_transmission_error that is less than 5 is RCMVAL_true for at least 16 seconds
					[3]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true within at most 6 seconds every at most 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is 8
						SlotType= TimeScope|| Text= for at most 14 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 5
						SlotType= TimeScope|| Text= for at least 16 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 6 seconds
						SlotType= TimeScope|| Text= every at most 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_quality_signal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_transmission_error is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_transmission_error
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-309:]
		text: while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true , the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true , the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
					[2]: the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_sailing_request
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-406:]
		text: while the RCMTECHTERM_sailing_request that exceeds 4 is above the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 19 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_sailing_request that exceeds 4 is above the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 19 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 19 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_sailing_request that exceeds 4 is above the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_request is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that exceeds 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_request is above the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_request is above the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-8:]
		text: before the RCMTECHTERM_steering_wheel_angle that exceeds 9 exceeds the RCMTECHTERM_brake_pedal , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error every at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle that exceeds 9 exceeds the RCMTECHTERM_brake_pedal , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error every at least 9 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle that exceeds 9 exceeds the RCMTECHTERM_brake_pedal
					[2]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that exceeds 9
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-190:]
		text: if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_fault_state within 27 seconds within 27 seconds , before the RCMTECHTERM_idc_inhibitor whose index equals 4 is RCMVAL_true , if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_fault_state within 27 seconds within 27 seconds , before the RCMTECHTERM_idc_inhibitor whose index equals 4 is RCMVAL_true , if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds
					[2]: the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_fault_state within 27 seconds within 27 seconds
					[3]: before the RCMTECHTERM_idc_inhibitor whose index equals 4 is RCMVAL_true
					[4]: if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests for at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at least 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within 27 seconds
						SlotType= TimeScope|| Text= within 27 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index equals 4
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at least 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index equals 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-18:]
		text: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds , if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds , if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds , if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds , if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every 19 seconds
					[2]: if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds
					[3]: if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests within at least 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every 19 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at  least 16 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at  least 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-429:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_pedal , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every 20 seconds , before the RCMTECHTERM_transmission_error that is 7 exceeds the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_pedal , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every 20 seconds , before the RCMTECHTERM_transmission_error that is 7 exceeds the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_pedal
					[2]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every 20 seconds
					[3]: before the RCMTECHTERM_transmission_error that is 7 exceeds the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_pedal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every 20 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is 7
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-308:]
		text: when the RCMTECHTERM_brake_fault_state that is above 5 equals RCMVAL_true for at most 13 seconds every 3 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_brake_pedal for 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_fault_state that is above 5 equals RCMVAL_true for at most 13 seconds every 3 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_brake_pedal for 14 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_fault_state that is above 5 equals RCMVAL_true for at most 13 seconds every 3 seconds
					[2]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_brake_pedal for 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is above 5
						SlotType= TimeScope|| Text= for at most 13 seconds
						SlotType= TimeScope|| Text= every 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-417:]
		text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds within at most 12 seconds , while the RCMTECHTERM_engine_error that is greater than 0 is RCMVAL_true for 18 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds within at most 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds within at most 12 seconds , while the RCMTECHTERM_engine_error that is greater than 0 is RCMVAL_true for 18 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds within at most 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds within at most 12 seconds the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at least 9 seconds
					[2]: while the RCMTECHTERM_engine_error that is greater than 0 is RCMVAL_true for 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at  least 9 seconds
						SlotType= TimeScope|| Text= within at  most 12 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is greater than 0
						SlotType= TimeScope|| Text= for 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_engine_error is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_engine_error
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_engine_error is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_engine_error
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-405:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_sailing_inhibitor whose index is less than 6 is above the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_sailing_inhibitor whose index is less than 6 is above the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: before the RCMTECHTERM_sailing_inhibitor whose index is less than 6 is above the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is less than 6
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is less than 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-29:]
		text: before the RCMTECHTERM_vehicle_speed_setpoint that is less than 8 exceeds the RCMTECHTERM_quality_signal , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal every 11 seconds within at most 15 seconds for at most 24 seconds , before the RCMTECHTERM_brake_pedal whose index equals 4 is above the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_setpoint that is less than 8 exceeds the RCMTECHTERM_quality_signal , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal every 11 seconds within at most 15 seconds for at most 24 seconds , before the RCMTECHTERM_brake_pedal whose index equals 4 is above the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_setpoint that is less than 8 exceeds the RCMTECHTERM_quality_signal
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal every 11 seconds within at most 15 seconds for at most 24 seconds before the RCMTECHTERM_brake_pedal whose index equals 4 is above the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is less than 8
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_defined_position
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index equals 4
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= for at most 24 seconds
						SlotType= TimeScope|| Text= every 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_setpoint
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_True
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-17:]
		text: if the RCMTECHTERM_brake_fault_state equals RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every at most 2 seconds , if the RCMTECHTERM_brake_fault_state equals RCMVAL_true , before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_sailing_inhibitor for at most 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state equals RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every at most 2 seconds , if the RCMTECHTERM_brake_fault_state equals RCMVAL_true , before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_sailing_inhibitor for at most 18 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up every at most 2 seconds
					[3]: if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
					[4]: before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_sailing_inhibitor for at most 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						SlotType= TimeScope|| Text= every at most 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at most 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 18
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 18
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-319:]
		text: before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_lsc for 15 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_lsc for 15 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_lsc for 15 seconds
					[2]: the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag within at least 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at  least 4 seconds
						SlotType= TimeScope|| Text= within at  least 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 15
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 15
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-404:]
		text: if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true , before the RCMTECHTERM_standstill_request_flag that is 6 is less than the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true , before the RCMTECHTERM_standstill_request_flag that is 6 is less than the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true
					[2]: before the RCMTECHTERM_standstill_request_flag that is 6 is less than the RCMTECHTERM_sailing_termination
					[3]: if the RCMTECHTERM_lsc that exceeds 7 is RCMVAL_true
					[4]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that exceeds 7
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is 6
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that exceeds 7
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-307:]
		text: if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position for 15 seconds within at least 20 seconds every at most 18 seconds , if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position for 15 seconds within at least 20 seconds every at most 18 seconds , if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds
					[2]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position for 15 seconds within at least 20 seconds every at most 18 seconds
					[3]: if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination within 29 seconds
					[4]: before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within 29 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for 15 seconds
						SlotType= TimeScope|| Text= every at most 18 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within 29 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-428:]
		text: if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal for 10 seconds within at most 13 seconds , before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is above the RCMTECHTERM_lsc for at most 25 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal for 10 seconds within at most 13 seconds , before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is above the RCMTECHTERM_lsc for at most 25 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal for 10 seconds within at most 13 seconds
					[2]: before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
					[3]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
					[4]: before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is above the RCMTECHTERM_lsc for at most 25 seconds
					[5]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within at most 13 seconds
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 2
						SlotType= TimeScope|| Text= for at most 25 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_steering_wheel_angle whose index is above 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 25
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 25
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-416:]
		text: before the RCMTECHTERM_standstill_request_flag whose index is greater than 9 exceeds the RCMTECHTERM_steering_wheel_angle for at least 22 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_sailing_request every at least 20 seconds for at least 17 seconds , when the RCMTECHTERM_transmission_error equals RCMVAL_true for 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index is greater than 9 exceeds the RCMTECHTERM_steering_wheel_angle for at least 22 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_sailing_request every at least 20 seconds for at least 17 seconds , when the RCMTECHTERM_transmission_error equals RCMVAL_true for 26 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index is greater than 9 exceeds the RCMTECHTERM_steering_wheel_angle for at least 22 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_sailing_request every at least 20 seconds for at least 17 seconds when the RCMTECHTERM_transmission_error equals RCMVAL_true for 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 9
						SlotType= TimeScope|| Text= for at least 22 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error equals RCMVAL_true
						SlotType= TimeScope|| Text= for at least 17 seconds
						SlotType= TimeScope|| Text= for 26 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_sailing_request
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index is greater than 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 22
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 22
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-156:]
		text: if the RCMTECHTERM_quality_signal whose index is less than 0 is less than the RCMTECHTERM_defined_position within at least 8 seconds for 3 seconds , the RCMTECHTERM_sailing_termination shall be moved up every at most 29 seconds , after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 13 seconds , the RCMTECHTERM_sailing_termination shall be moved up every at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_quality_signal whose index is less than 0 is less than the RCMTECHTERM_defined_position within at least 8 seconds for 3 seconds , the RCMTECHTERM_sailing_termination shall be moved up every at most 29 seconds , after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 13 seconds , the RCMTECHTERM_sailing_termination shall be moved up every at most 29 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_quality_signal whose index is less than 0 is less than the RCMTECHTERM_defined_position within at least 8 seconds for 3 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be moved up every at most 29 seconds
					[3]: after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 13 seconds
					[4]: the RCMTECHTERM_sailing_termination shall be moved up every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 0
						SlotType= TimeScope|| Text= for 3 seconds
						SlotType= TimeScope|| Text= within at  least 8 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= every at  most 29 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for at  most 13 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 13
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 13
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-265:]
		text: before the RCMTECHTERM_brake_pedal whose index is above 3 is RCMVAL_true , the RCMTECHTERM_brake_pedal shall be moved up within 3 seconds every 18 seconds , if the RCMTECHTERM_idc_inhibitor whose index is above 4 is above the RCMTECHTERM_sailing_request within 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_brake_pedal whose index is above 3 is RCMVAL_true , the RCMTECHTERM_brake_pedal shall be moved up within 3 seconds every 18 seconds , if the RCMTECHTERM_idc_inhibitor whose index is above 4 is above the RCMTECHTERM_sailing_request within 21 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_brake_pedal whose index is above 3 is RCMVAL_true
					[2]: the RCMTECHTERM_brake_pedal shall be moved up within 3 seconds every 18 seconds
					[3]: if the RCMTECHTERM_idc_inhibitor whose index is above 4 is above the RCMTECHTERM_sailing_request within 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is above 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
						SlotType= TimeScope|| Text= within 3 seconds
						SlotType= TimeScope|| Text= every 18 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is above 4
						SlotType= TimeScope|| Text= within 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is above 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_pedal whose index is above 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-386:]
		text: if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_termination within at least 22 seconds for 24 seconds every at most 14 seconds , before the RCMTECHTERM_nosailing_requests that is less than 3 equals RCMVAL_true , if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds , when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_steering_wheel_angle .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_termination within at least 22 seconds for 24 seconds every at most 14 seconds , before the RCMTECHTERM_nosailing_requests that is less than 3 equals RCMVAL_true , if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds , when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_steering_wheel_angle .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds
					[2]: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_termination within at least 22 seconds for 24 seconds every at most 14 seconds
					[3]: before the RCMTECHTERM_nosailing_requests that is less than 3 equals RCMVAL_true
					[4]: if the RCMTECHTERM_quality_signal whose index is less than 5 exceeds the RCMTECHTERM_brake_pedal for 21 seconds when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_steering_wheel_angle
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 5
						SlotType= TimeScope|| Text= for 21 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within at least 22 seconds
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= every at most 14 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is less than 3
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 5
						SlotType= TimeScope|| Text= for 21 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_steering_wheel_angle
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-495:]
		text: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal , if the RCMTECHTERM_steering_wheel_angle whose index exceeds 8 exceeds the RCMTECHTERM_brake_pedal for at most 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal , if the RCMTECHTERM_steering_wheel_angle whose index exceeds 8 exceeds the RCMTECHTERM_brake_pedal for at most 7 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal
					[2]: if the RCMTECHTERM_steering_wheel_angle whose index exceeds 8 exceeds the RCMTECHTERM_brake_pedal for at most 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 8
						SlotType= TimeScope|| Text= for at  most 7 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index exceeds 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-144:]
		text: while the RCMTECHTERM_brake_fault_state whose index is above 1 exceeds the RCMTECHTERM_quality_signal , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_sailing_termination within 22 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true , if the RCMTECHTERM_lsc equals RCMVAL_true , if the RCMTECHTERM_lsc equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_fault_state whose index is above 1 exceeds the RCMTECHTERM_quality_signal , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_sailing_termination within 22 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true , if the RCMTECHTERM_lsc equals RCMVAL_true , if the RCMTECHTERM_lsc equals RCMVAL_true .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_fault_state whose index is above 1 exceeds the RCMTECHTERM_quality_signal
					[2]: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_sailing_termination within 22 seconds
					[3]: before the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
					[4]: if the RCMTECHTERM_lsc equals RCMVAL_true
					[5]: if the RCMTECHTERM_lsc equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is above 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within 22 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc equals RCMVAL_true
					C[5]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is above 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is above 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-277:]
		text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every at most 9 seconds , after the RCMTECHTERM_defined_position equals RCMVAL_true for at most 14 seconds , while the RCMTECHTERM_defined_position equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every at most 9 seconds , after the RCMTECHTERM_defined_position equals RCMVAL_true for at most 14 seconds , while the RCMTECHTERM_defined_position equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every at most 9 seconds
					[2]: after the RCMTECHTERM_defined_position equals RCMVAL_true for at most 14 seconds
					[3]: while the RCMTECHTERM_defined_position equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-398:]
		text: after the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true , after the RCMTECHTERM_sailing_request that equals 6 is RCMVAL_true for at most 10 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor for 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true , after the RCMTECHTERM_sailing_request that equals 6 is RCMVAL_true for at most 10 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor for 17 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor for 17 seconds
					[2]: after the RCMTECHTERM_sailing_request that equals 6 is RCMVAL_true for at most 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for 17 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that equals 6
						SlotType= TimeScope|| Text= for at most 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_sailing_request is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 10
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 10
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-483:]
		text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_quality_signal within 25 seconds every 29 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 8 exceeds the RCMTECHTERM_engine_error for at least 7 seconds every 2 seconds , after the RCMTECHTERM_idc_inhibitor whose index is 1 is less than the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_quality_signal within 25 seconds every 29 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 8 exceeds the RCMTECHTERM_engine_error for at least 7 seconds every 2 seconds , after the RCMTECHTERM_idc_inhibitor whose index is 1 is less than the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_quality_signal within 25 seconds every 29 seconds when the RCMTECHTERM_standstill_request_flag whose index is less than 8 exceeds the RCMTECHTERM_engine_error for at least 7 seconds every 2 seconds
					[2]: after the RCMTECHTERM_idc_inhibitor whose index is 1 is less than the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 8
						SlotType= TimeScope|| Text= for at least 7 seconds
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= every 29 seconds
						SlotType= TimeScope|| Text= every 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_quality_signal
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 1
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index is 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-132:]
		text: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every at most 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-241:]
		text: if the RCMTECHTERM_sailing_termination that is 1 exceeds the RCMTECHTERM_steering_wheel_angle for at least 3 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position , when the RCMTECHTERM_standstill_request_flag whose index is greater than 3 is RCMVAL_true every at least 15 seconds for at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that is 1 exceeds the RCMTECHTERM_steering_wheel_angle for at least 3 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position , when the RCMTECHTERM_standstill_request_flag whose index is greater than 3 is RCMVAL_true every at least 15 seconds for at least 4 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that is 1 exceeds the RCMTECHTERM_steering_wheel_angle for at least 3 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position when the RCMTECHTERM_standstill_request_flag whose index is greater than 3 is RCMVAL_true every at least 15 seconds for at least 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is 1
						SlotType= TimeScope|| Text= for at least 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 3
						SlotType= TimeScope|| Text= for at least 4 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is greater than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-362:]
		text: when the RCMTECHTERM_transmission_error whose index is greater than 8 equals RCMVAL_true for at most 29 seconds every at least 4 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_engine_error within at most 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_transmission_error whose index is greater than 8 equals RCMVAL_true for at most 29 seconds every at least 4 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_engine_error within at most 3 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_transmission_error whose index is greater than 8 equals RCMVAL_true for at most 29 seconds every at least 4 seconds
					[2]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_engine_error within at most 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is greater than 8
						SlotType= TimeScope|| Text= for at most 29 seconds
						SlotType= TimeScope|| Text= every at least 4 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within at most 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_transmission_error whose index is greater than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-120:]
		text: when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true , before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_setpoint every at most 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true , before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_setpoint every at most 4 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
					[2]: before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error
					[3]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_setpoint seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_setpoint seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_setpoint seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-253:]
		text: after the RCMTECHTERM_engine_error whose index equals 8 is greater than the RCMTECHTERM_steering_wheel_angle , before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is RCMVAL_true for at least 26 seconds , if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds , if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 10 seconds every at most 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_engine_error whose index equals 8 is greater than the RCMTECHTERM_steering_wheel_angle , before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is RCMVAL_true for at least 26 seconds , if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds , if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 10 seconds every at most 23 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_engine_error whose index equals 8 is greater than the RCMTECHTERM_steering_wheel_angle before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is RCMVAL_true for at least 26 seconds the RCMTECHTERM_quality_signal shall be set to RCMVAL_true for 10 seconds every at most 23 seconds
					[2]: if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds
					[3]: if the RCMTECHTERM_defined_position whose index is above 0 is RCMVAL_true for 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_steering_wheel_angle
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index equals 8
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 4
						SlotType= TimeScope|| Text= for at least 26 seconds
						SlotType= TimeScope|| Text= for 10 seconds
						SlotType= TimeScope|| Text= every at most 23 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is above 0
						SlotType= TimeScope|| Text= for 9 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is above 0
						SlotType= TimeScope|| Text= for 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is above 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_engine_error is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-374:]
		text: if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds , the RCMTECHTERM_nosailing_requests shall be moved up for at least 28 seconds within at most 5 seconds every at most 11 seconds , after the RCMTECHTERM_idc_inhibitor that exceeds 4 is greater than the RCMTECHTERM_standstill_request_flag for 18 seconds , if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds , the RCMTECHTERM_nosailing_requests shall be moved up for at least 28 seconds within at most 5 seconds every at most 11 seconds , after the RCMTECHTERM_idc_inhibitor that exceeds 4 is greater than the RCMTECHTERM_standstill_request_flag for 18 seconds , if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be moved up for at least 28 seconds within at most 5 seconds every at most 11 seconds than the RCMTECHTERM_standstill_request_flag for 18 seconds
					[3]: after the RCMTECHTERM_idc_inhibitor that exceeds 4 is greater
					[4]: if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle for at most 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at  most 13 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up than the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every at  most 11 seconds
						SlotType= TimeScope|| Text= within at  most 5 seconds
						SlotType= TimeScope|| Text= for at  least 28 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is greater
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that exceeds 4
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at  most 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor is greater
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: greater
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-350:]
		text: if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds , before the RCMTECHTERM_lsc equals RCMVAL_true for 24 seconds , if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_request for 20 seconds , when the RCMTECHTERM_brake_fault_state equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds , before the RCMTECHTERM_lsc equals RCMVAL_true for 24 seconds , if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_request for 20 seconds , when the RCMTECHTERM_brake_fault_state equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds
					[2]: before the RCMTECHTERM_lsc equals RCMVAL_true for 24 seconds
					[3]: if the RCMTECHTERM_engine_error whose index is 1 is above the RCMTECHTERM_defined_position for 10 seconds
					[4]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_request for 20 seconds when the RCMTECHTERM_brake_fault_state equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is 1
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc equals RCMVAL_true
						SlotType= TimeScope|| Text= for 24 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is 1
						SlotType= TimeScope|| Text= for 10 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= TimeScope|| Text= for 20 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_request
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is above the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 24
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 24
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-471:]
		text: before the RCMTECHTERM_quality_signal equals RCMVAL_true , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds , when the RCMTECHTERM_brake_pedal that is 8 exceeds the RCMTECHTERM_vehicle_speed_setpoint every at least 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal equals RCMVAL_true , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds , when the RCMTECHTERM_brake_pedal that is 8 exceeds the RCMTECHTERM_vehicle_speed_setpoint every at least 5 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal equals RCMVAL_true
					[2]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests for 9 seconds when the RCMTECHTERM_brake_pedal that is 8 exceeds the RCMTECHTERM_vehicle_speed_setpoint every at least 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is 8
						SlotType= TimeScope|| Text= for 9 seconds
						SlotType= TimeScope|| Text= for 9 seconds
						SlotType= TimeScope|| Text= every at  least 5 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-88:]
		text: before the RCMTECHTERM_standstill_request_flag whose index exceeds 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index exceeds 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at most 29 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index exceeds 3 equals RCMVAL_true
					[2]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index exceeds 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index exceeds 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-76:]
		text: before the RCMTECHTERM_sailing_inhibitor whose index is above 7 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal within at least 22 seconds for at most 29 seconds , if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds , if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds , before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor whose index is above 7 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal within at least 22 seconds for at most 29 seconds , if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds , if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds , before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor whose index is above 7 is less than the RCMTECHTERM_sailing_termination
					[2]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal within at least 22 seconds for at most 29 seconds
					[3]: if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds
					[4]: if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor for at most 5 seconds within at least 11 seconds
					[5]: before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is above 7
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at least 22 seconds
						SlotType= TimeScope|| Text= for at most 29 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at most 5 seconds
						SlotType= TimeScope|| Text= within at least 11 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at most 5 seconds
						SlotType= TimeScope|| Text= within at least 11 seconds
					C[5]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is above 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-64:]
		text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag every 2 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is greater than the RCMTECHTERM_defined_position every at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag every 2 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is greater than the RCMTECHTERM_defined_position every at least 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag every 2 seconds when the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1 is greater than the RCMTECHTERM_defined_position every at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1
						SlotType= TimeScope|| Text= every at least 2 seconds
						SlotType= TimeScope|| Text= every 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-52:]
		text: after the RCMTECHTERM_standstill_request_flag whose index is above 3 equals RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up for at most 20 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_standstill_request_flag whose index is above 3 equals RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up for at most 20 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_standstill_request_flag whose index is above 3 equals RCMVAL_true
					[2]: the RCMTECHTERM_nosailing_requests shall be moved up for at most 20 seconds
					[3]: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is above 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= for at most 20 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index is above 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-40:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_nosailing_requests every at most 9 seconds , after the RCMTECHTERM_transmission_error is RCMVAL_true , after the RCMTECHTERM_transmission_error is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_nosailing_requests every at most 9 seconds , after the RCMTECHTERM_transmission_error is RCMVAL_true , after the RCMTECHTERM_transmission_error is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_nosailing_requests every at most 9 seconds
					[2]: after the RCMTECHTERM_transmission_error is RCMVAL_true
					[3]: after the RCMTECHTERM_transmission_error is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-5:]
		text: if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false , if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true , when the RCMTECHTERM_lsc whose index is less than 4 is above the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false , if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true , when the RCMTECHTERM_lsc whose index is less than 4 is above the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false
					[2]: if the RCMTECHTERM_brake_fault_state whose index is 8 equals RCMVAL_false
					[3]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true when the RCMTECHTERM_lsc whose index is less than 4 is above the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is 8
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is 8
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 4
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index is less than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-289:]
		text: the RCMTECHTERM_sailing_request shall be moved up within at most 16 seconds for at least 19 seconds , if the RCMTECHTERM_transmission_error that exceeds 0 exceeds the RCMTECHTERM_nosailing_requests within 20 seconds for at most 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be moved up within at most 16 seconds for at least 19 seconds , if the RCMTECHTERM_transmission_error that exceeds 0 exceeds the RCMTECHTERM_nosailing_requests within 20 seconds for at most 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be moved up within at most 16 seconds for at least 19 seconds
					[2]: if the RCMTECHTERM_transmission_error that exceeds 0 exceeds the RCMTECHTERM_nosailing_requests within 20 seconds for at most 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for at least 19 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that exceeds 0
						SlotType= TimeScope|| Text= for at most 12 seconds
						SlotType= TimeScope|| Text= within 20 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-168:]
		text: before the RCMTECHTERM_lsc whose index is less than 5 exceeds the RCMTECHTERM_sailing_termination for 5 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at most 28 seconds , when the RCMTECHTERM_sailing_request whose index is less than 4 is RCMVAL_true every at least 27 seconds for at most 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc whose index is less than 5 exceeds the RCMTECHTERM_sailing_termination for 5 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at most 28 seconds , when the RCMTECHTERM_sailing_request whose index is less than 4 is RCMVAL_true every at least 27 seconds for at most 5 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc whose index is less than 5 exceeds the RCMTECHTERM_sailing_termination for 5 seconds
					[2]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at most 28 seconds when the RCMTECHTERM_sailing_request whose index is less than 4 is RCMVAL_true every at least 27 seconds for at most 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 5
						SlotType= TimeScope|| Text= for 5 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is less than 4
						SlotType= TimeScope|| Text= within at most 28 seconds
						SlotType= TimeScope|| Text= for at most 5 seconds
						SlotType= TimeScope|| Text= every at least 27 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is less than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_lsc whose index is less than 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 5
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 5
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-167:]
		text: when the RCMTECHTERM_defined_position whose index is above 0 is greater than the RCMTECHTERM_nosailing_requests for 10 seconds , if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true , while the RCMTECHTERM_sailing_request that exceeds 6 is greater than the RCMTECHTERM_lsc , if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at least 17 seconds within at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_defined_position whose index is above 0 is greater than the RCMTECHTERM_nosailing_requests for 10 seconds , if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true , while the RCMTECHTERM_sailing_request that exceeds 6 is greater than the RCMTECHTERM_lsc , if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at least 17 seconds within at least 17 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_defined_position whose index is above 0 is greater than the RCMTECHTERM_nosailing_requests for 10 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true
					[3]: while the RCMTECHTERM_sailing_request that exceeds 6 is greater than the RCMTECHTERM_lsc
					[4]: if the RCMTECHTERM_sailing_inhibitor that is above 8 is RCMVAL_true
					[5]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at least 17 seconds within at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is above 0
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 8
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that exceeds 6
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 8
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 17 seconds
						SlotType= TimeScope|| Text= within at least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is above 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-276:]
		text: after the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_standstill_request_flag within at least 17 seconds every at least 25 seconds within at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_standstill_request_flag within at least 17 seconds every at least 25 seconds within at least 17 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_fault_state
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_standstill_request_flag within at least 17 seconds every at least 25 seconds within at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_fault_state
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at least 17 seconds
						SlotType= TimeScope|| Text= within at least 17 seconds
						SlotType= TimeScope|| Text= every at least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-397:]
		text: while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request , while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request , when the RCMTECHTERM_defined_position is above the RCMTECHTERM_vehicle_speed_quality_factor every at least 16 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor every at least 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request , while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request , when the RCMTECHTERM_defined_position is above the RCMTECHTERM_vehicle_speed_quality_factor every at least 16 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor every at least 29 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request
					[2]: while the RCMTECHTERM_lsc that exceeds 6 is above the RCMTECHTERM_sailing_request
					[3]: when the RCMTECHTERM_defined_position is above the RCMTECHTERM_vehicle_speed_quality_factor every at least 16 seconds
					[4]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that exceeds 6
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that exceeds 6
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every at least 16 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is above the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_lsc
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_lsc
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_lsc
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 6
														</ArgDetails>
													</Operands>
													<Operator>
														relation:exceeds
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_request
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_request
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_lsc
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 6
														</ArgDetails>
													</Operands>
													<Operator>
														relation:exceeds
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_request
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-155:]
		text: after the RCMTECHTERM_vehicle_speed_setpoint that is greater than 5 is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true for at most 23 seconds every at least 20 seconds , when the RCMTECHTERM_lsc whose index is greater than 7 is greater than the RCMTECHTERM_sailing_termination every at least 29 seconds for at most 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_setpoint that is greater than 5 is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true for at most 23 seconds every at least 20 seconds , when the RCMTECHTERM_lsc whose index is greater than 7 is greater than the RCMTECHTERM_sailing_termination every at least 29 seconds for at most 23 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_setpoint that is greater than 5 is above the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true for at most 23 seconds every at least 20 seconds when the RCMTECHTERM_lsc whose index is greater than 7 is greater than the RCMTECHTERM_sailing_termination every at least 29 seconds for at most 23 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is greater than 5
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is greater than 7
						SlotType= TimeScope|| Text= for at most 23 seconds
						SlotType= TimeScope|| Text= for at most 23 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
						SlotType= TimeScope|| Text= every at least 29 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index is greater than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_setpoint
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-288:]
		text: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor within 28 seconds every at most 3 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 1 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor within 28 seconds every at most 3 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 1 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor within 28 seconds every at most 3 seconds
					[3]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at least 2 seconds when the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 1 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= within at least 2 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within 28 seconds
						SlotType= TimeScope|| Text= every at most 3 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 1
						SlotType= TimeScope|| Text= within at least 2 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-494:]
		text: after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc , after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests within at least 8 seconds for at most 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc , after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests within at least 8 seconds for at most 10 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
					[2]: after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
					[3]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests within at least 8 seconds for at most 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at least 8 seconds
						SlotType= TimeScope|| Text= for at most 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-143:]
		text: when the RCMTECHTERM_lsc that is 0 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every at least 21 seconds , if the RCMTECHTERM_nosailing_requests that is above 4 is less than the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc that is 0 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every at least 21 seconds , if the RCMTECHTERM_nosailing_requests that is above 4 is less than the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc that is 0 is less than the RCMTECHTERM_sailing_inhibitor
					[2]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every at least 21 seconds
					[3]: if the RCMTECHTERM_nosailing_requests that is above 4 is less than the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is 0
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at least 21 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 4
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is less than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-252:]
		text: before the RCMTECHTERM_steering_wheel_angle whose index is 8 is less than the RCMTECHTERM_sailing_inhibitor for at most 28 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 13 seconds within at most 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle whose index is 8 is less than the RCMTECHTERM_sailing_inhibitor for at most 28 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 13 seconds within at most 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle whose index is 8 is less than the RCMTECHTERM_sailing_inhibitor for at most 28 seconds
					[2]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 13 seconds within at most 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is 8
						SlotType= TimeScope|| Text= for at most 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= within at most 13 seconds
						SlotType= TimeScope|| Text= within at most 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_steering_wheel_angle whose index is 8
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 28
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 28
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-373:]
		text: if the RCMTECHTERM_sailing_termination whose index is less than 5 is RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_standstill_request_flag every at most 3 seconds , when the RCMTECHTERM_sailing_request whose index is above 1 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination whose index is less than 5 is RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_standstill_request_flag every at most 3 seconds , when the RCMTECHTERM_sailing_request whose index is above 1 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination whose index is less than 5 is RCMVAL_true
					[2]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_standstill_request_flag every at most 3 seconds when the RCMTECHTERM_sailing_request whose index is above 1 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is less than 5
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is above 1
						SlotType= TimeScope|| Text= every at most 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_standstill_request_flag
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is less than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is above 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-131:]
		text: if the RCMTECHTERM_transmission_error that is less than 8 is less than the RCMTECHTERM_sailing_request for at most 17 seconds within at least 20 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 7 is above the RCMTECHTERM_transmission_error every at most 19 seconds , while the RCMTECHTERM_brake_pedal whose index is above 4 is less than the RCMTECHTERM_quality_signal for at most 25 seconds , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_transmission_error that is less than 8 is less than the RCMTECHTERM_sailing_request for at most 17 seconds within at least 20 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 7 is above the RCMTECHTERM_transmission_error every at most 19 seconds , while the RCMTECHTERM_brake_pedal whose index is above 4 is less than the RCMTECHTERM_quality_signal for at most 25 seconds , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at least 17 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_transmission_error that is less than 8 is less than the RCMTECHTERM_sailing_request for at most 17 seconds within at least 20 seconds when the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 7 is above the RCMTECHTERM_transmission_error every at most 19 seconds
					[2]: while the RCMTECHTERM_brake_pedal whose index is above 4 is less than the RCMTECHTERM_quality_signal for at most 25 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 8
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 7
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= every at most 19 seconds
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_transmission_error
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is above 4
						SlotType= TimeScope|| Text= for at most 25 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is above 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 25
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 25
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is above 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 25
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 25
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-264:]
		text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request every at most 3 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request every at most 3 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag , while the RCMTECHTERM_steering_wheel_angle whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request every at most 3 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request every at most 3 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag , while the RCMTECHTERM_steering_wheel_angle whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request seconds the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request every at most 3 seconds
					[2]: if the RCMTECHTERM_sailing_termination whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag
					[3]: while the RCMTECHTERM_steering_wheel_angle whose index exceeds 7 is above the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request seconds
						SlotType= TimeScope|| Text= every at  most 3 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 5
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 7
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_steering_wheel_angle whose index exceeds 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_steering_wheel_angle whose index exceeds 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-385:]
		text: while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor for 28 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests every at most 22 seconds within at least 18 seconds for at most 27 seconds , if the RCMTECHTERM_sailing_request whose index equals 5 is above the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor for 28 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests every at most 22 seconds within at least 18 seconds for at most 27 seconds , if the RCMTECHTERM_sailing_request whose index equals 5 is above the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor for 28 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests every at most 22 seconds within at least 18 seconds for
					[3]: if the RCMTECHTERM_sailing_request whose index equals 5 is above the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= every at  most 22 seconds
						SlotType= TimeScope|| Text= within at  least 18 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 5
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index equals 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-240:]
		text: when the RCMTECHTERM_sailing_inhibitor whose index is less than 8 is less than the RCMTECHTERM_idc_inhibitor for 24 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_inhibitor whose index is less than 8 is less than the RCMTECHTERM_idc_inhibitor for 24 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within at least 9 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_inhibitor whose index is less than 8 is less than the RCMTECHTERM_idc_inhibitor for 24 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within at least 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is less than 8
						SlotType= TimeScope|| Text= for 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within at least 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_inhibitor whose index is less than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-361:]
		text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at most 24 seconds , before the RCMTECHTERM_engine_error that is 3 equals RCMVAL_true for 20 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds , when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_transmission_error for 27 seconds every at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at most 24 seconds , before the RCMTECHTERM_engine_error that is 3 equals RCMVAL_true for 20 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds , when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_transmission_error for 27 seconds every at least 9 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at most 24 seconds
					[2]: before the RCMTECHTERM_engine_error that is 3 equals RCMVAL_true for 20 seconds
					[3]: if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds
					[4]: if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_engine_error within at most 15 seconds when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_transmission_error for 27 seconds every at least 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for at most 24 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is 3
						SlotType= TimeScope|| Text= for 20 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 0
						SlotType= TimeScope|| Text= within at most 15 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 0
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= for 27 seconds
						SlotType= TimeScope|| Text= every at least 9 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 20
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 20
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-482:]
		text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_request for at least 7 seconds every 8 seconds , before the RCMTECHTERM_nosailing_requests whose index is less than 8 exceeds the RCMTECHTERM_brake_pedal for at least 10 seconds , after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds , after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds , if the RCMTECHTERM_sailing_inhibitor that is less than 5 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_request for at least 7 seconds every 8 seconds , before the RCMTECHTERM_nosailing_requests whose index is less than 8 exceeds the RCMTECHTERM_brake_pedal for at least 10 seconds , after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds , after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds , if the RCMTECHTERM_sailing_inhibitor that is less than 5 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_request for at least 7 seconds
					[2]: before the RCMTECHTERM_nosailing_requests whose index is less than 8 exceeds the RCMTECHTERM_brake_pedal for at least 10 seconds
					[3]: after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds
					[4]: after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error for at most 16 seconds
					[5]: if the RCMTECHTERM_sailing_inhibitor that is less than 5 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at least 7 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is less than 8
						SlotType= TimeScope|| Text= for at least 10 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 16 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 16 seconds
					C[5]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is less than 5
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_nosailing_requests whose index is less than 8
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-470:]
		text: when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds , if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for 13 seconds within at least 27 seconds , before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error for at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds , if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for 13 seconds within at least 27 seconds , before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error for at least 17 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds
					[2]: when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at least 23 seconds every at least 28 seconds
					[3]: if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_setpoint
					[4]: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for 13 seconds within at least 27 seconds
					[5]: before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error for at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= for at least 23 seconds
						SlotType= TimeScope|| Text= every at least 28 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= for at least 23 seconds
						SlotType= TimeScope|| Text= every at least 28 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_setpoint
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= for 13 seconds
					C[5]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 17
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 17
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-99:]
		text: after the RCMTECHTERM_steering_wheel_angle whose index is 7 is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 25 seconds , when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for 4 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_steering_wheel_angle whose index is 7 is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 25 seconds , when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for 4 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_steering_wheel_angle whose index is 7 is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 25 seconds when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for 4 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_vehicle_speed_quality_factor
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is 7
						SlotType= TimeScope|| Text= for at most 25 seconds
						SlotType= TimeScope|| Text= for 4 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-87:]
		text: the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_brake_pedal within at most 25 seconds for at most 21 seconds every 20 seconds , if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds , if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds , when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc every at most 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_brake_pedal within at most 25 seconds for at most 21 seconds every 20 seconds , if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds , if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds , when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc every at most 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_brake_pedal within at most 25 seconds for at most 21 seconds every 20 seconds
					[2]: if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds
					[3]: if the RCMTECHTERM_sailing_termination that equals 0 is greater than the RCMTECHTERM_vehicle_speed_setpoint within at most 6 seconds when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc every at most 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at most 25 seconds
						SlotType= TimeScope|| Text= for at most 21 seconds
						SlotType= TimeScope|| Text= every 20 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that equals 0
						SlotType= TimeScope|| Text= within at most 6 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that equals 0
						SlotType= TimeScope|| Text= within at most 6 seconds
						SlotType= TimeScope|| Text= every at most 12 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-75:]
		text: when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for 15 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for 15 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_idc_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for 15 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 18 seconds within at least 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 7
						SlotType= TimeScope|| Text= for 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at  least 18 seconds
						SlotType= TimeScope|| Text= within at  least 18 seconds
						SlotType= TimeScope|| Text= within at  least 18 seconds
						SlotType= TimeScope|| Text= within at  least 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index exceeds 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-63:]
		text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at least 15 seconds within at least 15 seconds , before the RCMTECHTERM_transmission_error whose index exceeds 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 is RCMVAL_false , after the RCMTECHTERM_idc_inhibitor whose index is less than 4 is less than the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at least 15 seconds within at least 15 seconds , before the RCMTECHTERM_transmission_error whose index exceeds 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 is RCMVAL_false , after the RCMTECHTERM_idc_inhibitor whose index is less than 4 is less than the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at least 15 seconds within at least 15 seconds before the RCMTECHTERM_transmission_error whose index exceeds 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 is RCMVAL_false
					[3]: after the RCMTECHTERM_idc_inhibitor whose index is less than 4 is less than the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_vehicle_speed_quality_factor
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index exceeds 6
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= within at least 15 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is 0
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is less than 4
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index is less than 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-51:]
		text: when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_fault_state
					[2]: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_fault_state
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be set RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be set RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-4:]
		text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_engine_error every at least 15 seconds , when the RCMTECHTERM_sailing_termination whose index equals 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds every at most 24 seconds , before the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true for at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_engine_error every at least 15 seconds , when the RCMTECHTERM_sailing_termination whose index equals 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds every at most 24 seconds , before the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true for at most 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_engine_error every at least 15 seconds when the RCMTECHTERM_sailing_termination whose index equals 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds every at most 24 seconds before the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true for at most 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is RCMVAL_true
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index equals 4
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is greater than 9
						SlotType= TimeScope|| Text= for at most 26 seconds
						SlotType= TimeScope|| Text= for at most 16 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
						SlotType= TimeScope|| Text= every at most 24 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index 4 exceeds the RCMTECHTERM_vehicle_speed_setpoint before the RCMTECHTERM_nosailing_requests
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index 4
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[2]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-179:]
		text: when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_engine_error within 28 seconds , when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_engine_error within 28 seconds , when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds
					[2]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_engine_error within 28 seconds when the RCMTECHTERM_brake_pedal that is above 2 equals RCMVAL_true for 19 seconds
					[3]: before the RCMTECHTERM_sailing_inhibitor whose index exceeds 7 exceeds the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is above 2
						SlotType= TimeScope|| Text= for 19 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is above 2
						SlotType= TimeScope|| Text= within 28 seconds
						SlotType= TimeScope|| Text= for 19 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_engine_error
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 7
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index exceeds 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-178:]
		text: if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-287:]
		text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor every at least 7 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor every at least 7 seconds , if the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_quality_signal within at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor every at least 7 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor every at least 7 seconds , if the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_quality_signal within at least 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor seconds the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor every at least 7 seconds
					[2]: if the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_quality_signal within at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor seconds
						SlotType= TimeScope|| Text= every at  least 7 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within at  least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_idc_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-166:]
		text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within at least 20 seconds for 7 seconds , if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal , when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_quality_signal every 27 seconds , if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within at least 20 seconds for 7 seconds , if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal , when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_quality_signal every 27 seconds , if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within at least 20 seconds for 7 seconds
					[2]: if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal
					[3]: when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_quality_signal every 27 seconds
					[4]: if the RCMTECHTERM_brake_fault_state that is less than 0 is less than the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for 7 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is less than 0
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= every 27 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is less than 0
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-299:]
		text: if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds , before the RCMTECHTERM_nosailing_requests is RCMVAL_true for 25 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 17 seconds every 16 seconds , if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds , before the RCMTECHTERM_nosailing_requests is RCMVAL_true for 25 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 17 seconds every 16 seconds , if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds
					[2]: before the RCMTECHTERM_nosailing_requests is RCMVAL_true for 25 seconds
					[3]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_quality_factor within at most 17 seconds every 16 seconds
					[4]: if the RCMTECHTERM_brake_fault_state is RCMVAL_true for 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= TimeScope|| Text= for 3 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= TimeScope|| Text= for 25 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= within at most 17 seconds
						SlotType= TimeScope|| Text= every 16 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= TimeScope|| Text= for 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 25
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 25
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-154:]
		text: before the RCMTECHTERM_engine_error whose index equals 1 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_idc_inhibitor every at least 20 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error whose index equals 1 is less than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_idc_inhibitor every at least 20 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error whose index equals 1 is less than the RCMTECHTERM_vehicle_speed_quality_factor the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_idc_inhibitor seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_idc_inhibitor seconds
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index equals 1
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_idc_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-263:]
		text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_steering_wheel_angle every at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_steering_wheel_angle every at most 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-384:]
		text: when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds , when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds , if the RCMTECHTERM_quality_signal whose index is above 0 is RCMVAL_true within at most 7 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_idc_inhibitor within 5 seconds , before the RCMTECHTERM_sailing_termination that is 5 is above the RCMTECHTERM_brake_fault_state for 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds , when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds , if the RCMTECHTERM_quality_signal whose index is above 0 is RCMVAL_true within at most 7 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_idc_inhibitor within 5 seconds , before the RCMTECHTERM_sailing_termination that is 5 is above the RCMTECHTERM_brake_fault_state for 19 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds
					[2]: when the RCMTECHTERM_lsc that is above 4 exceeds the RCMTECHTERM_brake_fault_state every at most 17 seconds
					[3]: if the RCMTECHTERM_quality_signal whose index is above 0 is RCMVAL_true within at most 7 seconds
					[4]: the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_idc_inhibitor within 5 seconds
					[5]: before the RCMTECHTERM_sailing_termination that is 5 is above the RCMTECHTERM_brake_fault_state for 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 4
						SlotType= TimeScope|| Text= every at most 17 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 4
						SlotType= TimeScope|| Text= every at most 17 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is above 0
						SlotType= TimeScope|| Text= within at most 7 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within 5 seconds
					C[5]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is 5
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is above 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-142:]
		text: before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , while the RCMTECHTERM_engine_error is RCMVAL_true for 24 seconds , if the RCMTECHTERM_sailing_termination whose index is above 6 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_request within at most 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , while the RCMTECHTERM_engine_error is RCMVAL_true for 24 seconds , if the RCMTECHTERM_sailing_termination whose index is above 6 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_request within at most 6 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds
					[2]: before the RCMTECHTERM_idc_inhibitor whose index is 1 exceeds the RCMTECHTERM_sailing_inhibitor for at least 8 seconds
					[3]: while the RCMTECHTERM_engine_error is RCMVAL_true for 24 seconds
					[4]: if the RCMTECHTERM_sailing_termination whose index is above 6 is less than the RCMTECHTERM_sailing_inhibitor
					[5]: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_request within at most 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 1
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 1
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= TimeScope|| Text= for 24 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is above 6
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within at most 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is above 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index is 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 8
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 8
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 8
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 8
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_engine_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_engine_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-275:]
		text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-396:]
		text: after the RCMTECHTERM_brake_fault_state whose index is above 4 is RCMVAL_true for at least 19 seconds , while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position , the RCMTECHTERM_engine_error shall be moved up within at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_brake_fault_state whose index is above 4 is RCMVAL_true for at least 19 seconds , while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position , the RCMTECHTERM_engine_error shall be moved up within at least 17 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_brake_fault_state whose index is above 4 is RCMVAL_true for at least 19 seconds
					[2]: while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position
					[3]: the RCMTECHTERM_engine_error shall be moved up within at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is above 4
						SlotType= TimeScope|| Text= for at least 19 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be moved up
						SlotType= TimeScope|| Text= within at least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_fault_state is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_fault_state whose index is above 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_defined_position
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-130:]
		text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true every 20 seconds , if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position within at most 25 seconds , when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_steering_wheel_angle for at least 14 seconds , after the RCMTECHTERM_vehicle_speed_setpoint that is less than 6 equals RCMVAL_true for 16 seconds , after the RCMTECHTERM_transmission_error whose index is above 0 is less than the RCMTECHTERM_sailing_inhibitor for at most 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true every 20 seconds , if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position within at most 25 seconds , when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_steering_wheel_angle for at least 14 seconds , after the RCMTECHTERM_vehicle_speed_setpoint that is less than 6 equals RCMVAL_true for 16 seconds , after the RCMTECHTERM_transmission_error whose index is above 0 is less than the RCMTECHTERM_sailing_inhibitor for at most 9 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true every 20 seconds
					[2]: the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position within at most 25 seconds when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_steering_wheel_angle for at least 14 seconds after the RCMTECHTERM_vehicle_speed_setpoint that is less than 6
					[3]: equals RCMVAL_true for 16 seconds
					[4]: after the RCMTECHTERM_transmission_error whose index is above 0 is less than the RCMTECHTERM_sailing_inhibitor for at most 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every 20 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_steering_wheel_angle after the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is less than 6
						SlotType= TimeScope|| Text= within at most 25 seconds
						SlotType= TimeScope|| Text= for at least 14 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= equals RCMVAL_true
						SlotType= TimeScope|| Text= for 16 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is above 0
						SlotType= TimeScope|| Text= for at most 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = RCMVAL_true equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_transmission_error whose index is above 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 9
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 9
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-360:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request within 8 seconds every at most 5 seconds , when the RCMTECHTERM_brake_fault_state whose index exceeds 0 is less than the RCMTECHTERM_steering_wheel_angle for 4 seconds , after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_brake_pedal , while the RCMTECHTERM_defined_position whose index is greater than 2 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request within 8 seconds every at most 5 seconds , when the RCMTECHTERM_brake_fault_state whose index exceeds 0 is less than the RCMTECHTERM_steering_wheel_angle for 4 seconds , after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_brake_pedal , while the RCMTECHTERM_defined_position whose index is greater than 2 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request within 8 seconds every at most 5 seconds when the RCMTECHTERM_brake_fault_state whose index exceeds 0 is less than the RCMTECHTERM_steering_wheel_angle for 4 seconds
					[2]: after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_brake_pedal
					[3]: while the RCMTECHTERM_defined_position whose index is greater than 2 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index exceeds 0
						SlotType= TimeScope|| Text= within 8 seconds
						SlotType= TimeScope|| Text= for 4 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 2
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index exceeds 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_defined_position whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_defined_position whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-251:]
		text: when the RCMTECHTERM_defined_position that is greater than 9 equals RCMVAL_true , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds , before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for 7 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds , the RCMTECHTERM_brake_fault_state shall be moved up every 13 seconds for at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_defined_position that is greater than 9 equals RCMVAL_true , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds , before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for 7 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds , the RCMTECHTERM_brake_fault_state shall be moved up every 13 seconds for at least 2 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_defined_position that is greater than 9 equals RCMVAL_true
					[2]: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds
					[3]: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for 7 seconds
					[4]: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is RCMVAL_false for at least 21 seconds
					[5]: the RCMTECHTERM_brake_fault_state shall be moved up every 13 seconds for at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is greater than 9
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is 6
						SlotType= TimeScope|| Text= for at least 21 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= TimeScope|| Text= for 7 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is 6
						SlotType= TimeScope|| Text= for at least 21 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be moved up
						SlotType= TimeScope|| Text= for at least 2 seconds
						SlotType= TimeScope|| Text= every 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 7
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 7
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-372:]
		text: if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_termination within 15 seconds , when the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag every at most 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_termination within 15 seconds , when the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag every at most 2 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
					[2]: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_termination within 15 seconds when the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-493:]
		text: while the RCMTECHTERM_brake_pedal that equals 7 is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at least 23 seconds , when the RCMTECHTERM_nosailing_requests whose index is less than 1 exceeds the RCMTECHTERM_engine_error every 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_pedal that equals 7 is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at least 23 seconds , when the RCMTECHTERM_nosailing_requests whose index is less than 1 exceeds the RCMTECHTERM_engine_error every 24 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_pedal that equals 7 is greater than the RCMTECHTERM_lsc
					[2]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at least 23 seconds when the RCMTECHTERM_nosailing_requests whose index is less than 1 exceeds the RCMTECHTERM_engine_error every 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that equals 7
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is less than 1
						SlotType= TimeScope|| Text= every at least 23 seconds
						SlotType= TimeScope|| Text= every 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is less than 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-481:]
		text: before the RCMTECHTERM_engine_error that is greater than 0 is above the RCMTECHTERM_quality_signal , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_brake_fault_state within at most 14 seconds , while the RCMTECHTERM_brake_pedal whose index is less than 1 is greater than the RCMTECHTERM_nosailing_requests .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error that is greater than 0 is above the RCMTECHTERM_quality_signal , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_brake_fault_state within at most 14 seconds , while the RCMTECHTERM_brake_pedal whose index is less than 1 is greater than the RCMTECHTERM_nosailing_requests .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error that is greater than 0 is above the RCMTECHTERM_quality_signal
					[2]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_brake_fault_state within at most 14 seconds
					[3]: while the RCMTECHTERM_brake_pedal whose index is less than 1 is greater than the RCMTECHTERM_nosailing_requests
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is greater than 0
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within at most 14 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is less than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is above the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_nosailing_requests
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_brake_pedal whose index is less than 1
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_nosailing_requests
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_brake_pedal whose index is less than 1
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-78:]
		text: if the RCMTECHTERM_standstill_request_flag is RCMVAL_true , if the RCMTECHTERM_standstill_request_flag is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_sailing_inhibitor every at most 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_standstill_request_flag is RCMVAL_true , if the RCMTECHTERM_standstill_request_flag is RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_sailing_inhibitor every at most 15 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
					[2]: if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
					[3]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_sailing_inhibitor seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_sailing_inhibitor seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_sailing_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-66:]
		text: if the RCMTECHTERM_brake_fault_state that is greater than 3 equals RCMVAL_true for 23 seconds within at most 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state that is greater than 3 equals RCMVAL_true for 23 seconds within at most 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state that is greater than 3 equals RCMVAL_true for 23 seconds within at most 28 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every at most 17 seconds for 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is greater than 3
						SlotType= TimeScope|| Text= within at most 28 seconds
						SlotType= TimeScope|| Text= for 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 29 seconds
						SlotType= TimeScope|| Text= every at most 17 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 29 seconds
						SlotType= TimeScope|| Text= every at most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-54:]
		text: while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal for at least 16 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_sailing_termination for 23 seconds every at least 3 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index equals 3 is RCMVAL_true for at least 23 seconds , when the RCMTECHTERM_sailing_termination that is 5 is greater than the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal for at least 16 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_sailing_termination for 23 seconds every at least 3 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index equals 3 is RCMVAL_true for at least 23 seconds , when the RCMTECHTERM_sailing_termination that is 5 is greater than the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal for at least 16 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_sailing_termination for 23 seconds every at least 3 seconds
					[3]: before the RCMTECHTERM_vehicle_speed_setpoint whose index equals 3 is RCMVAL_true for at least 23 seconds when the RCMTECHTERM_sailing_termination that is 5 is greater than the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for 23 seconds
						SlotType= TimeScope|| Text= every at least 3 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index equals 3
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is 5
						SlotType= TimeScope|| Text= for at least 23 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-42:]
		text: the RCMTECHTERM_lsc shall be moved up , before the RCMTECHTERM_quality_signal that equals 6 is greater than the RCMTECHTERM_engine_error for at most 19 seconds , if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be moved up , before the RCMTECHTERM_quality_signal that equals 6 is greater than the RCMTECHTERM_engine_error for at most 19 seconds , if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be moved up
					[2]: before the RCMTECHTERM_quality_signal that equals 6 is greater than the RCMTECHTERM_engine_error for at most 19 seconds
					[3]: if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[4]: if the RCMTECHTERM_brake_pedal whose index is less than 5 is less than the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that equals 6
						SlotType= TimeScope|| Text= for at most 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is less than 5
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is less than 5
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index is less than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_quality_signal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-30:]
		text: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc for at least 16 seconds every at most 29 seconds , before the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_standstill_request_flag .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc for at least 16 seconds every at most 29 seconds , before the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_standstill_request_flag .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within 21 seconds
					[3]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc for at least 16 seconds every at most 29 seconds
					[4]: before the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_standstill_request_flag
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= TimeScope|| Text= within 21 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= TimeScope|| Text= within 21 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at least 16 seconds
						SlotType= TimeScope|| Text= every at most 29 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 7
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_fault_state
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-7:]
		text: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index equals 4 exceeds the RCMTECHTERM_lsc for at least 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index equals 4 exceeds the RCMTECHTERM_lsc for at least 21 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal within at most 15 seconds every 25 seconds for at least 26 seconds after the RCMTECHTERM_vehicle_speed_quality_factor whose index equals 4
					[3]: exceeds the RCMTECHTERM_lsc for at least 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= for at least 26 seconds
						SlotType= TimeScope|| Text= every 25 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index equals 4
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= for at least 26 seconds
						SlotType= TimeScope|| Text= every 25 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at least 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-189:]
		text: if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds , if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds , when the RCMTECHTERM_brake_pedal that exceeds 0 is RCMVAL_true , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at least 27 seconds for at most 20 seconds every 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds , if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds , when the RCMTECHTERM_brake_pedal that exceeds 0 is RCMVAL_true , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at least 27 seconds for at most 20 seconds every 29 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds
					[2]: if the RCMTECHTERM_nosailing_requests that is less than 9 is RCMVAL_true for at most 7 seconds when the RCMTECHTERM_brake_pedal that exceeds 0 is RCMVAL_true
					[3]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true within at least 27 seconds for at most 20 seconds every 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is less than 9
						SlotType= TimeScope|| Text= for at most 7 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is less than 9
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that exceeds 0
						SlotType= TimeScope|| Text= for at most 7 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= for at most 20 seconds
						SlotType= TimeScope|| Text= every 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-298:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within 23 seconds every at least 10 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within 23 seconds every at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within 23 seconds every at least 10 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within 23 seconds every at least 10 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within 23 seconds every at least 10 seconds the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						SlotType= TimeScope|| Text= within 23 seconds
						SlotType= TimeScope|| Text= every at  least 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-177:]
		text: the RCMTECHTERM_brake_fault_state shall be moved up every at most 8 seconds , if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true , after the RCMTECHTERM_quality_signal that equals 7 is above the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be moved up every at most 8 seconds , if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true , after the RCMTECHTERM_quality_signal that equals 7 is above the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be moved up every at most 8 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
					[3]: after the RCMTECHTERM_quality_signal that equals 7 is above the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be moved up
						SlotType= TimeScope|| Text= every at most 8 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_quality_signal is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that equals 7
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_quality_signal is above the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_quality_signal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-165:]
		text: before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds , before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_standstill_request_flag every at most 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds , before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_standstill_request_flag every at most 6 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds before the RCMTECHTERM_sailing_termination whose index exceeds 8 is RCMVAL_true for 17 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_standstill_request_flag seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index exceeds 8
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index exceeds 8
						SlotType= TimeScope|| Text= for 17 seconds
						SlotType= TimeScope|| Text= for 17 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_standstill_request_flag seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_standstill_request_flag seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_termination whose index exceeds 8
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 17
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 17
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-274:]
		text: if the RCMTECHTERM_nosailing_requests that is greater than 5 is greater than the RCMTECHTERM_engine_error within at most 3 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal within at least 15 seconds for 4 seconds every at most 9 seconds , before the RCMTECHTERM_lsc whose index is above 4 is above the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests that is greater than 5 is greater than the RCMTECHTERM_engine_error within at most 3 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal within at least 15 seconds for 4 seconds every at most 9 seconds , before the RCMTECHTERM_lsc whose index is above 4 is above the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests that is greater than 5 is greater than the RCMTECHTERM_engine_error within at most 3 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal within at least 15 seconds for 4 seconds every at most 9 seconds
					[3]: before the RCMTECHTERM_lsc whose index is above 4 is above the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is greater than 5
						SlotType= TimeScope|| Text= within at most 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= for 4 seconds
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is above 4
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_lsc whose index is above 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-395:]
		text: if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds , before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_defined_position for at most 13 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 10 seconds , if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds , before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_defined_position for at most 13 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 10 seconds , if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds
					[2]: before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_defined_position for at most 13 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be moved up every 10 seconds
					[4]: if the RCMTECHTERM_defined_position whose index is greater than 7 is less than the RCMTECHTERM_steering_wheel_angle within 22 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 7
						SlotType= TimeScope|| Text= within 22 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= for at most 13 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= every 10 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 7
						SlotType= TimeScope|| Text= within 22 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is greater than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 13
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 13
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-153:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 4 seconds every 2 seconds for at least 10 seconds , while the RCMTECHTERM_engine_error whose index is greater than 4 exceeds the RCMTECHTERM_transmission_error for at least 4 seconds , when the RCMTECHTERM_steering_wheel_angle whose index is above 9 exceeds the RCMTECHTERM_sailing_request every 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 4 seconds every 2 seconds for at least 10 seconds , while the RCMTECHTERM_engine_error whose index is greater than 4 exceeds the RCMTECHTERM_transmission_error for at least 4 seconds , when the RCMTECHTERM_steering_wheel_angle whose index is above 9 exceeds the RCMTECHTERM_sailing_request every 11 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 4 seconds every 2 seconds for at least 10 seconds
					[2]: while the RCMTECHTERM_engine_error whose index is greater than 4 exceeds the RCMTECHTERM_transmission_error for at least 4 seconds
					[3]: when the RCMTECHTERM_steering_wheel_angle whose index is above 9 exceeds the RCMTECHTERM_sailing_request every 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 4 seconds
						SlotType= TimeScope|| Text= for at least 10 seconds
						SlotType= TimeScope|| Text= every 2 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is greater than 4
						SlotType= TimeScope|| Text= for at least 4 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 9
						SlotType= TimeScope|| Text= every 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is above 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_engine_error whose index is greater than 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 4
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 4
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_engine_error whose index is greater than 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 4
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 4
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-286:]
		text: before the RCMTECHTERM_engine_error is above the RCMTECHTERM_steering_wheel_angle for 14 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds , if the RCMTECHTERM_idc_inhibitor that is 9 is greater than the RCMTECHTERM_quality_signal within 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error is above the RCMTECHTERM_steering_wheel_angle for 14 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds , if the RCMTECHTERM_idc_inhibitor that is 9 is greater than the RCMTECHTERM_quality_signal within 26 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error is above the RCMTECHTERM_steering_wheel_angle for 14 seconds
					[2]: the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests for at most 23 seconds
					[3]: if the RCMTECHTERM_idc_inhibitor that is 9 is greater than the RCMTECHTERM_quality_signal within 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is above the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at  most 23 seconds
						SlotType= TimeScope|| Text= for at  most 23 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that is 9
						SlotType= TimeScope|| Text= within 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_idc_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is above the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-141:]
		text: before the RCMTECHTERM_defined_position that equals 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor , while the RCMTECHTERM_lsc whose index exceeds 4 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 17 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds , if the RCMTECHTERM_sailing_termination whose index equals 2 is RCMVAL_false .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_defined_position that equals 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor , while the RCMTECHTERM_lsc whose index exceeds 4 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 17 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds , if the RCMTECHTERM_sailing_termination whose index equals 2 is RCMVAL_false .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_defined_position that equals 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: while the RCMTECHTERM_lsc whose index exceeds 4 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 17 seconds
					[3]: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle within at most 12 seconds every at most 19 seconds
					[4]: if the RCMTECHTERM_sailing_termination whose index equals 2 is RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that equals 9
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index exceeds 4
						SlotType= TimeScope|| Text= for at  least 17 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= every at  most 19 seconds
						SlotType= TimeScope|| Text= within at  most 12 seconds
						SlotType= TimeScope|| Text= within at  most 12 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index equals 2
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index equals 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_vehicle_speed_quality_factor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_lsc whose index exceeds 4
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 4
														</ArgDetails>
													</Operands>
													<Operator>
														relation:exceeds
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 17
												Unit: seconds
												QPRelation: at  least
											<FormalSemantic>
												TechnicalOperator: null
												Value: 17
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_vehicle_speed_quality_factor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_lsc whose index exceeds 4
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 4
														</ArgDetails>
													</Operands>
													<Operator>
														relation:exceeds
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 17
												Unit: seconds
												QPRelation: at  least
											<FormalSemantic>
												TechnicalOperator: null
												Value: 17
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-250:]
		text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds , the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds , before the RCMTECHTERM_steering_wheel_angle whose index exceeds 9 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds , the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds , before the RCMTECHTERM_steering_wheel_angle whose index exceeds 9 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds the RCMTECHTERM_engine_error shall be set to RCMVAL_true for at most 27 seconds
					[2]: before the RCMTECHTERM_steering_wheel_angle whose index exceeds 9 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at  most 27 seconds
						SlotType= TimeScope|| Text= for at  most 27 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 9
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_steering_wheel_angle whose index exceeds 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-371:]
		text: when the RCMTECHTERM_brake_pedal that is greater than 0 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_pedal that is greater than 0 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_pedal that is greater than 0 is less than the RCMTECHTERM_sailing_termination
					[2]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds
					[3]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true every at most 16 seconds for 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is greater than 0
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-480:]
		text: before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_engine_error for 14 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_steering_wheel_angle for 26 seconds , when the RCMTECHTERM_engine_error that equals 9 is above the RCMTECHTERM_transmission_error for 18 seconds every 11 seconds , after the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is less than the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_engine_error for 14 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_steering_wheel_angle for 26 seconds , when the RCMTECHTERM_engine_error that equals 9 is above the RCMTECHTERM_transmission_error for 18 seconds every 11 seconds , after the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is less than the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_engine_error for 14 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_steering_wheel_angle for 26 seconds when the RCMTECHTERM_engine_error that equals 9 is above the RCMTECHTERM_transmission_error for 18 seconds every 11 seconds
					[3]: after the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is less than the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is above 7
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that equals 9
						SlotType= TimeScope|| Text= for 26 seconds
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every 11 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_steering_wheel_angle
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_engine_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-262:]
		text: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_lsc every 28 seconds , while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint , when the RCMTECHTERM_engine_error equals RCMVAL_true for 19 seconds every at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_lsc every 28 seconds , while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint , when the RCMTECHTERM_engine_error equals RCMVAL_true for 19 seconds every at most 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_lsc every 28 seconds
					[2]: while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint
					[3]: when the RCMTECHTERM_engine_error equals RCMVAL_true for 19 seconds every at most 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= every 28 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= TimeScope|| Text= for 19 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_setpoint
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-383:]
		text: when the RCMTECHTERM_nosailing_requests whose index is less than 0 is above the RCMTECHTERM_sailing_termination for at most 24 seconds , after the RCMTECHTERM_nosailing_requests whose index exceeds 7 is less than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests whose index is less than 0 is above the RCMTECHTERM_sailing_termination for at most 24 seconds , after the RCMTECHTERM_nosailing_requests whose index exceeds 7 is less than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests whose index is less than 0 is above the RCMTECHTERM_sailing_termination for at most 24 seconds after the RCMTECHTERM_nosailing_requests whose index exceeds 7 is less than the RCMTECHTERM_sailing_request
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination after the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is less than 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 7
						SlotType= TimeScope|| Text= for at most 24 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= is less than the RCMTECHTERM_sailing_request
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index exceeds 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-492:]
		text: if the RCMTECHTERM_standstill_request_flag whose index is greater than 9 is above the RCMTECHTERM_sailing_inhibitor within at most 27 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up every at least 14 seconds for at most 8 seconds within 16 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_standstill_request_flag whose index is greater than 9 is above the RCMTECHTERM_sailing_inhibitor within at most 27 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up every at least 14 seconds for at most 8 seconds within 16 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_standstill_request_flag whose index is greater than 9 is above the RCMTECHTERM_sailing_inhibitor within at most 27 seconds when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be moved up every at least 14 seconds for at most 8 seconds within 16 seconds when the RCMTECHTERM_standstill_request_flag whose index is less than 2 equals RCMVAL_true for 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 2
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 9
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= within at  most 27 seconds
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 2
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= within 16 seconds
						SlotType= TimeScope|| Text= every at  least 14 seconds
						SlotType= TimeScope|| Text= for at  most 8 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is greater than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-89:]
		text: before the RCMTECHTERM_sailing_request whose index is 0 equals RCMVAL_true , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_steering_wheel_angle within at least 4 seconds within at least 4 seconds , when the RCMTECHTERM_defined_position that is 9 is greater than the RCMTECHTERM_vehicle_speed_quality_factor for 16 seconds every at least 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_request whose index is 0 equals RCMVAL_true , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_steering_wheel_angle within at least 4 seconds within at least 4 seconds , when the RCMTECHTERM_defined_position that is 9 is greater than the RCMTECHTERM_vehicle_speed_quality_factor for 16 seconds every at least 27 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_request whose index is 0 equals RCMVAL_true
					[2]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_steering_wheel_angle within at least 4 seconds within at least 4 seconds when the RCMTECHTERM_defined_position that is 9 is greater than the RCMTECHTERM_vehicle_speed_quality_factor for 16 seconds every at least 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 0
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is 9
						SlotType= TimeScope|| Text= within at least 4 seconds
						SlotType= TimeScope|| Text= within at least 4 seconds
						SlotType= TimeScope|| Text= for 16 seconds
						SlotType= TimeScope|| Text= every at least 27 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_steering_wheel_angle
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index is 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-77:]
		text: after the RCMTECHTERM_engine_error that is above 3 is above the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds every 17 seconds for 8 seconds , when the RCMTECHTERM_brake_fault_state whose index is greater than 2 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_engine_error that is above 3 is above the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds every 17 seconds for 8 seconds , when the RCMTECHTERM_brake_fault_state whose index is greater than 2 is RCMVAL_true .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_engine_error that is above 3 is above the RCMTECHTERM_standstill_request_flag
					[2]: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds every 17 seconds for 8 seconds when the RCMTECHTERM_brake_fault_state whose index is greater than 2 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error is above the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is above 3
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is greater than 2
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= every 17 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_brake_pedal
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is greater than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_engine_error is above the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-65:]
		text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_steering_wheel_angle every at most 3 seconds for at most 27 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 exceeds the RCMTECHTERM_lsc for 12 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 exceeds the RCMTECHTERM_lsc for 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_steering_wheel_angle every at most 3 seconds for at most 27 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 exceeds the RCMTECHTERM_lsc for 12 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 exceeds the RCMTECHTERM_lsc for 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_steering_wheel_angle every at most 3 seconds for at most 27 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 exceeds the RCMTECHTERM_lsc for 12 seconds before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9
					[3]: exceeds the RCMTECHTERM_lsc for 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at most 27 seconds
						SlotType= TimeScope|| Text= every at most 3 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 9
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 9
						SlotType= TimeScope|| Text= for 12 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-53:]
		text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_quality_signal , when the RCMTECHTERM_quality_signal that is greater than 3 exceeds the RCMTECHTERM_idc_inhibitor , after the RCMTECHTERM_defined_position is RCMVAL_true for at most 19 seconds , if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position , if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_quality_signal , when the RCMTECHTERM_quality_signal that is greater than 3 exceeds the RCMTECHTERM_idc_inhibitor , after the RCMTECHTERM_defined_position is RCMVAL_true for at most 19 seconds , if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position , if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_quality_signal when the RCMTECHTERM_quality_signal that is greater than 3 exceeds the RCMTECHTERM_idc_inhibitor
					[2]: after the RCMTECHTERM_defined_position is RCMVAL_true for at most 19 seconds
					[3]: if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position
					[4]: if the RCMTECHTERM_brake_fault_state that is 2 is above the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is greater than 3
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_quality_signal
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 2
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 2
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_quality_signal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-41:]
		text: before the RCMTECHTERM_quality_signal whose index is less than 5 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal whose index is less than 5 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at most 16 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal whose index is less than 5 is less than the RCMTECHTERM_sailing_inhibitor
					[2]: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 5
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index is less than 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-6:]
		text: before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error , before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal every at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error , before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal every at least 18 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error
					[2]: before the RCMTECHTERM_sailing_inhibitor that is 5 is greater than the RCMTECHTERM_transmission_error
					[3]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is 5
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is 5
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_brake_pedal seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_inhibitor
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-188:]
		text: if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 29 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds , while the RCMTECHTERM_brake_pedal whose index is less than 1 exceeds the RCMTECHTERM_engine_error for at most 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 29 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds , while the RCMTECHTERM_brake_pedal whose index is less than 1 exceeds the RCMTECHTERM_engine_error for at most 5 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 29 seconds
					[3]: if the RCMTECHTERM_sailing_termination whose index is greater than 7 equals RCMVAL_true within 14 seconds for at most 18 seconds
					[4]: while the RCMTECHTERM_brake_pedal whose index is less than 1 exceeds the RCMTECHTERM_engine_error for at most 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 7
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= within 14 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every 29 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 7
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= within 14 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is less than 1
						SlotType= TimeScope|| Text= for at most 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is greater than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_engine_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 5
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 5
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_engine_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 5
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 5
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-176:]
		text: the RCMTECHTERM_quality_signal shall be moved up for at least 6 seconds within at least 22 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is RCMVAL_true , after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_termination for 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be moved up for at least 6 seconds within at least 22 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is RCMVAL_true , after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_termination for 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be moved up for at least 6 seconds within at least 22 seconds when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is RCMVAL_true
					[2]: after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_termination for 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index equals 1
						SlotType= TimeScope|| Text= within at  least 22 seconds
						SlotType= TimeScope|| Text= for at  least 6 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index equals 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 12
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 12
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-285:]
		text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_steering_wheel_angle every at most 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_steering_wheel_angle every at most 12 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_setpoint
					[2]: the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_setpoint
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_steering_wheel_angle seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-164:]
		text: before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_nosailing_requests for at least 24 seconds , the RCMTECHTERM_sailing_request shall be moved up within at most 28 seconds for 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_nosailing_requests for at least 24 seconds , the RCMTECHTERM_sailing_request shall be moved up within at most 28 seconds for 21 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_nosailing_requests for at least 24 seconds
					[2]: the RCMTECHTERM_sailing_request shall be moved up within at most 28 seconds for 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for at least 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= within at most 28 seconds
						SlotType= TimeScope|| Text= for 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 24
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 24
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-297:]
		text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_engine_error for at least 20 seconds every at least 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_engine_error for at least 20 seconds every at least 15 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_engine_error for at least 20 seconds every at least 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at least 20 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-152:]
		text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_termination for at least 6 seconds every at most 6 seconds , before the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_termination for at least 6 seconds every at most 6 seconds , before the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_termination for at least 6 seconds every at most 6 seconds before the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index equals 1
						SlotType= TimeScope|| Text= for at least 6 seconds
						SlotType= TimeScope|| Text= every at most 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-261:]
		text: before the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within 6 seconds , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within 6 seconds , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds
					[3]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within 6 seconds
					[4]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every 25 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= within 6 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-382:]
		text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 6 exceeds the RCMTECHTERM_quality_signal for 14 seconds , if the RCMTECHTERM_brake_fault_state whose index is above 3 is RCMVAL_true for at least 25 seconds within at least 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 6 exceeds the RCMTECHTERM_quality_signal for 14 seconds , if the RCMTECHTERM_brake_fault_state whose index is above 3 is RCMVAL_true for at least 25 seconds within at least 15 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at most 16 seconds within at least 21 seconds before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 6 exceeds the RCMTECHTERM_quality_signal for 14 seconds
					[2]: if the RCMTECHTERM_brake_fault_state whose index is above 3 is RCMVAL_true for at least 25 seconds within at least 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= index 6 exceeds the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= every at  most 16 seconds
						SlotType= TimeScope|| Text= within at  least 21 seconds
						SlotType= TimeScope|| Text= within at  least 21 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is above 3
						SlotType= TimeScope|| Text= within at  least 15 seconds
						SlotType= TimeScope|| Text= for at  least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is above 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = index 6 exceeds the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: index 6
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-491:]
		text: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at most 27 seconds within at most 3 seconds every at least 9 seconds , if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds , if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at most 27 seconds within at most 3 seconds every at least 9 seconds , if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds , if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true for at most 27 seconds within at most 3 seconds every at least 9 seconds
					[2]: if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds
					[3]: if the RCMTECHTERM_idc_inhibitor that equals 4 is RCMVAL_false for at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at most 27 seconds
						SlotType= TimeScope|| Text= within at most 3 seconds
						SlotType= TimeScope|| Text= every at least 9 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that equals 4
						SlotType= TimeScope|| Text= for at least 24 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that equals 4
						SlotType= TimeScope|| Text= for at least 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_idc_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-140:]
		text: after the RCMTECHTERM_steering_wheel_angle that is 6 is RCMVAL_true for 28 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds for 25 seconds , before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_lsc for at most 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_steering_wheel_angle that is 6 is RCMVAL_true for 28 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds for 25 seconds , before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_lsc for at most 11 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_steering_wheel_angle that is 6 is RCMVAL_true for 28 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_brake_pedal within at most 16 seconds for 25 seconds
					[3]: before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_lsc for at most 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is 6
						SlotType= TimeScope|| Text= for 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for 25 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at most 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 28
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 28
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 11
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 11
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-273:]
		text: before the RCMTECHTERM_transmission_error is RCMVAL_true for at least 11 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_brake_fault_state within 29 seconds every at least 24 seconds within 29 seconds , when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for at least 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error is RCMVAL_true for at least 11 seconds , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_brake_fault_state within 29 seconds every at least 24 seconds within 29 seconds , when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for at least 5 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error is RCMVAL_true for at least 11 seconds
					[2]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_brake_fault_state within 29 seconds every at least 24 seconds within 29 seconds when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for at least 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= TimeScope|| Text= for at least 11 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= within 29 seconds
						SlotType= TimeScope|| Text= within 29 seconds
						SlotType= TimeScope|| Text= every at least 24 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 11
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 11
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-394:]
		text: after the RCMTECHTERM_sailing_inhibitor whose index is less than 3 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 14 seconds , if the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal for at most 11 seconds , when the RCMTECHTERM_standstill_request_flag that exceeds 2 is less than the RCMTECHTERM_engine_error for at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_inhibitor whose index is less than 3 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 14 seconds , if the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal for at most 11 seconds , when the RCMTECHTERM_standstill_request_flag that exceeds 2 is less than the RCMTECHTERM_engine_error for at most 19 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_inhibitor whose index is less than 3 is greater than the RCMTECHTERM_sailing_request
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 14 seconds
					[3]: if the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal for at most 11 seconds when the RCMTECHTERM_standstill_request_flag that exceeds 2 is less than the RCMTECHTERM_engine_error for at most 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is less than 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at most 14 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that exceeds 2
						SlotType= TimeScope|| Text= for at most 11 seconds
						SlotType= TimeScope|| Text= for at most 19 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is less than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-1:]
		text: while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds , while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds , while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_sailing_inhibitor whose index exceeds 1 is less than the RCMTECHTERM_engine_error for at least 12 seconds every at most 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error for at most 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds , while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds , while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_sailing_inhibitor whose index exceeds 1 is less than the RCMTECHTERM_engine_error for at least 12 seconds every at most 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error for at most 9 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds
					[2]: while the RCMTECHTERM_lsc whose index is less than 0 exceeds the RCMTECHTERM_standstill_request_flag for 16 seconds
					[3]: while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination
					[4]: when the RCMTECHTERM_sailing_inhibitor whose index exceeds 1 is less than the RCMTECHTERM_engine_error for at least 12 seconds every at most 28 seconds
					[5]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error for at most 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 0
						SlotType= TimeScope|| Text= for 16 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 0
						SlotType= TimeScope|| Text= for 16 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 1
						SlotType= TimeScope|| Text= for at least 12 seconds
						SlotType= TimeScope|| Text= every at most 28 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_inhibitor whose index exceeds 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_lsc whose index is less than 0
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 0
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 16
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 16
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_lsc whose index is less than 0
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 0
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 16
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 16
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_sailing_termination
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-370:]
		text: if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds , before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 24 seconds , if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds , before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 24 seconds , if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_vehicle_speed_quality_factor for at least 24 seconds
					[3]: if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag within 5 seconds
					[4]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within 5 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at least 24 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within 5 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is above the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 24
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 24
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-68:]
		text: before the RCMTECHTERM_sailing_inhibitor whose index is greater than 8 is above the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_quality_signal whose index is greater than 7 equals RCMVAL_true for at least 16 seconds every 4 seconds , if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle within at least 20 seconds for at least 27 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_steering_wheel_angle within at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor whose index is greater than 8 is above the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_quality_signal whose index is greater than 7 equals RCMVAL_true for at least 16 seconds every 4 seconds , if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle within at least 20 seconds for at least 27 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_steering_wheel_angle within at least 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor whose index is greater than 8 is above the RCMTECHTERM_steering_wheel_angle
					[2]: when the RCMTECHTERM_quality_signal whose index is greater than 7 equals RCMVAL_true for at least 16 seconds every 4 seconds
					[3]: if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle within at least 20 seconds for at least 27 seconds
					[4]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_steering_wheel_angle within at least 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is greater than 8
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 7
						SlotType= TimeScope|| Text= for at least 16 seconds
						SlotType= TimeScope|| Text= every 4 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for at least 27 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at least 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is greater than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is greater than 8
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-56:]
		text: before the RCMTECHTERM_quality_signal that exceeds 7 is less than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal that exceeds 7 is less than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal that exceeds 7 is less than the RCMTECHTERM_standstill_request_flag
					[2]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position for at most 13 seconds within at most 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that exceeds 7
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within at  most 16 seconds
						SlotType= TimeScope|| Text= for at  most 13 seconds
						SlotType= TimeScope|| Text= within at  most 16 seconds
						SlotType= TimeScope|| Text= for at  most 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_quality_signal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-44:]
		text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true for at least 22 seconds , if the RCMTECHTERM_transmission_error whose index is above 3 is greater than the RCMTECHTERM_defined_position within at most 21 seconds for 14 seconds , while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true for at least 22 seconds , if the RCMTECHTERM_transmission_error whose index is above 3 is greater than the RCMTECHTERM_defined_position within at most 21 seconds for 14 seconds , while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true for at least 22 seconds
					[2]: if the RCMTECHTERM_transmission_error whose index is above 3 is greater than the RCMTECHTERM_defined_position within at most 21 seconds for 14 seconds
					[3]: while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 22 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is above 3
						SlotType= TimeScope|| Text= within at most 21 seconds
						SlotType= TimeScope|| Text= for 14 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_transmission_error whose index is above 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-32:]
		text: before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal within at most 2 seconds every at most 15 seconds , before the RCMTECHTERM_nosailing_requests that exceeds 9 is greater than the RCMTECHTERM_defined_position for at most 18 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 8 is less than the RCMTECHTERM_engine_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal within at most 2 seconds every at most 15 seconds , before the RCMTECHTERM_nosailing_requests that exceeds 9 is greater than the RCMTECHTERM_defined_position for at most 18 seconds , when the RCMTECHTERM_standstill_request_flag whose index is less than 8 is less than the RCMTECHTERM_engine_error .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal within at most 2 seconds every at most 15 seconds before the RCMTECHTERM_nosailing_requests that exceeds 9 is greater than the RCMTECHTERM_defined_position for at most 18 seconds when the RCMTECHTERM_standstill_request_flag whose index is less than 8 is less than the RCMTECHTERM_engine_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_defined_position
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 9
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 8
						SlotType= TimeScope|| Text= within at most 2 seconds
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= every at most 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-20:]
		text: if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds , the RCMTECHTERM_quality_signal shall be moved up every at least 15 seconds for at most 15 seconds , if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds , when the RCMTECHTERM_brake_pedal whose index is greater than 0 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds , the RCMTECHTERM_quality_signal shall be moved up every at least 15 seconds for at most 15 seconds , if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds , when the RCMTECHTERM_brake_pedal whose index is greater than 0 is RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds
					[2]: the RCMTECHTERM_quality_signal shall be moved up every at least 15 seconds for at most 15 seconds
					[3]: if the RCMTECHTERM_brake_fault_state whose index exceeds 7 is greater than the RCMTECHTERM_standstill_request_flag for at most 29 seconds when the RCMTECHTERM_brake_pedal whose index is greater than 0 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index exceeds 7
						SlotType= TimeScope|| Text= for at most 29 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
						SlotType= TimeScope|| Text= for at most 15 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index exceeds 7
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is greater than 0
						SlotType= TimeScope|| Text= for at most 29 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index exceeds 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-199:]
		text: when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_steering_wheel_angle for at most 6 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds , before the RCMTECHTERM_nosailing_requests that exceeds 3 is above the RCMTECHTERM_idc_inhibitor for 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_steering_wheel_angle for at most 6 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds , before the RCMTECHTERM_nosailing_requests that exceeds 3 is above the RCMTECHTERM_idc_inhibitor for 28 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_steering_wheel_angle for at most 6 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds
					[3]: before the RCMTECHTERM_nosailing_requests that exceeds 3 is above the RCMTECHTERM_idc_inhibitor for 28 seconds
					[4]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc for at most 15 seconds within at most 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at most 6 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at most 15 seconds
						SlotType= TimeScope|| Text= within at most 10 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 3
						SlotType= TimeScope|| Text= for 28 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at most 15 seconds
						SlotType= TimeScope|| Text= within at most 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 28
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 28
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-187:]
		text: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds , the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds , the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination every 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= every 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-296:]
		text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_idc_inhibitor within at most 12 seconds every 7 seconds , after the RCMTECHTERM_sailing_request whose index exceeds 6 is RCMVAL_true for at least 26 seconds , if the RCMTECHTERM_nosailing_requests that is less than 7 is less than the RCMTECHTERM_engine_error for at most 12 seconds within at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_idc_inhibitor within at most 12 seconds every 7 seconds , after the RCMTECHTERM_sailing_request whose index exceeds 6 is RCMVAL_true for at least 26 seconds , if the RCMTECHTERM_nosailing_requests that is less than 7 is less than the RCMTECHTERM_engine_error for at most 12 seconds within at most 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_idc_inhibitor within at most 12 seconds every 7 seconds
					[2]: after the RCMTECHTERM_sailing_request whose index exceeds 6 is RCMVAL_true for at least 26 seconds
					[3]: if the RCMTECHTERM_nosailing_requests that is less than 7 is less than the RCMTECHTERM_engine_error for at most 12 seconds within at most 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at most 12 seconds
						SlotType= TimeScope|| Text= every 7 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index exceeds 6
						SlotType= TimeScope|| Text= for at least 26 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is less than 7
						SlotType= TimeScope|| Text= for at most 12 seconds
						SlotType= TimeScope|| Text= within at most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_request is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index exceeds 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 26
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 26
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-175:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 5 seconds every 17 seconds , if the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests within at least 13 seconds for at least 2 seconds , when the RCMTECHTERM_sailing_termination whose index is less than 1 is greater than the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 5 seconds every 17 seconds , if the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests within at least 13 seconds for at least 2 seconds , when the RCMTECHTERM_sailing_termination whose index is less than 1 is greater than the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 5 seconds every 17 seconds
					[2]: if the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests within at least 13 seconds for at least 2 seconds when the RCMTECHTERM_sailing_termination whose index is less than 1 is greater than the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= every 17 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is less than 1
						SlotType= TimeScope|| Text= within at least 13 seconds
						SlotType= TimeScope|| Text= for at least 2 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is above the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-163:]
		text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 14 seconds , when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_fault_state every at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 14 seconds , when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_fault_state every at most 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 14 seconds when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_fault_state every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at  least 14 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_inhibitor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-272:]
		text: before the RCMTECHTERM_engine_error that equals 6 equals RCMVAL_true for at most 25 seconds , if the RCMTECHTERM_brake_pedal is RCMVAL_true within at most 12 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error that equals 6 equals RCMVAL_true for at most 25 seconds , if the RCMTECHTERM_brake_pedal is RCMVAL_true within at most 12 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error that equals 6 equals RCMVAL_true for at most 25 seconds
					[2]: if the RCMTECHTERM_brake_pedal is RCMVAL_true within at most 12 seconds
					[3]: the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination every 20 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that equals 6
						SlotType= TimeScope|| Text= for at  most 25 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= TimeScope|| Text= within at  most 12 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= every 20 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 25
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 25
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-393:]
		text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state for at most 16 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 4 is above the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within 24 seconds every at least 19 seconds , if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag within 13 seconds for 14 seconds , when the RCMTECHTERM_transmission_error whose index is above 0 equals RCMVAL_true every at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state for at most 16 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 4 is above the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within 24 seconds every at least 19 seconds , if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag within 13 seconds for 14 seconds , when the RCMTECHTERM_transmission_error whose index is above 0 equals RCMVAL_true every at least 12 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state for at most 16 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 4 is above the RCMTECHTERM_steering_wheel_angle
					[3]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within 24 seconds every at least 19 seconds
					[4]: if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag within 13 seconds for 14 seconds when the RCMTECHTERM_transmission_error whose index is above 0 equals RCMVAL_true every at least 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at most 16 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 4
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within 24 seconds
						SlotType= TimeScope|| Text= every at least 19 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is above 0
						SlotType= TimeScope|| Text= within 13 seconds
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= every at least 12 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 16
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 16
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-151:]
		text: when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds , when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 21 seconds for at least 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds , when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 21 seconds for at least 29 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds when the RCMTECHTERM_defined_position is RCMVAL_true every at least 21 seconds for at most 20 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 21 seconds for at least 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 20 seconds
						SlotType= TimeScope|| Text= for at most 20 seconds
						SlotType= TimeScope|| Text= every at least 21 seconds
						SlotType= TimeScope|| Text= every at least 21 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 29 seconds
						SlotType= TimeScope|| Text= within 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-284:]
		text: when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds , when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds , when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 7 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle every at most 11 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= every at most 11 seconds
						SlotType= TimeScope|| Text= every at most 11 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 7 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-490:]
		text: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_request within at least 5 seconds every at most 5 seconds within at least 5 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds , before the RCMTECHTERM_sailing_termination that equals 5 exceeds the RCMTECHTERM_idc_inhibitor for at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_request within at least 5 seconds every at most 5 seconds within at least 5 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds , before the RCMTECHTERM_sailing_termination that equals 5 exceeds the RCMTECHTERM_idc_inhibitor for at least 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_request within at least 5 seconds every at most 5 seconds within at least 5 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true within at most 2 seconds before the RCMTECHTERM_sailing_termination that equals 5
					[4]: exceeds the RCMTECHTERM_idc_inhibitor for at least 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within at least 5 seconds
						SlotType= TimeScope|| Text= within at least 5 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= TimeScope|| Text= within at most 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that equals 5
						SlotType= TimeScope|| Text= within at most 2 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at least 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-260:]
		text: after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_transmission_error , before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position , before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position , the RCMTECHTERM_lsc shall be moved up for 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_transmission_error , before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position , before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position , the RCMTECHTERM_lsc shall be moved up for 12 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_transmission_error
					[2]: before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
					[3]: before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
					[4]: the RCMTECHTERM_lsc shall be moved up for 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_transmission_error
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
						SlotType= TimeScope|| Text= for 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-381:]
		text: when the RCMTECHTERM_sailing_inhibitor that exceeds 3 equals RCMVAL_true for at least 23 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true , before the RCMTECHTERM_brake_pedal whose index equals 5 equals RCMVAL_true for at least 29 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_inhibitor that exceeds 3 equals RCMVAL_true for at least 23 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true , before the RCMTECHTERM_brake_pedal whose index equals 5 equals RCMVAL_true for at least 29 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_inhibitor that exceeds 3 equals RCMVAL_true for at least 23 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true before the RCMTECHTERM_brake_pedal whose index equals 5 equals RCMVAL_true for at least 29 seconds the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that exceeds 3
						SlotType= TimeScope|| Text= for at  least 23 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= shall be set before the RCMTECHTERM_brake_pedal whose index 5 equals RCMVAL_true
						SlotType= TimeScope|| Text= for at  least 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-79:]
		text: before the RCMTECHTERM_nosailing_requests that is 7 is above the RCMTECHTERM_quality_signal for at most 9 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is 6 is greater than the RCMTECHTERM_brake_fault_state within at least 3 seconds , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true , before the RCMTECHTERM_lsc that equals 5 is RCMVAL_true for 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_nosailing_requests that is 7 is above the RCMTECHTERM_quality_signal for at most 9 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is 6 is greater than the RCMTECHTERM_brake_fault_state within at least 3 seconds , the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true , before the RCMTECHTERM_lsc that equals 5 is RCMVAL_true for 4 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_nosailing_requests that is 7 is above the RCMTECHTERM_quality_signal for at most 9 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint that is 6 is greater than the RCMTECHTERM_brake_fault_state within at least 3 seconds
					[3]: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
					[4]: before the RCMTECHTERM_lsc that equals 5 is RCMVAL_true for 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is 7
						SlotType= TimeScope|| Text= for at most 9 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is 6
						SlotType= TimeScope|| Text= within at least 3 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that equals 5
						SlotType= TimeScope|| Text= for 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 4
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 4
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 9
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 9
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-67:]
		text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_brake_pedal every at most 7 seconds for 13 seconds , after the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc for 15 seconds , when the RCMTECHTERM_steering_wheel_angle whose index exceeds 3 is greater than the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_brake_pedal every at most 7 seconds for 13 seconds , after the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc for 15 seconds , when the RCMTECHTERM_steering_wheel_angle whose index exceeds 3 is greater than the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_brake_pedal every at most 7 seconds for 13 seconds
					[2]: after the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc for 15 seconds when the RCMTECHTERM_steering_wheel_angle whose index exceeds 3 is greater than the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for 13 seconds
						SlotType= TimeScope|| Text= every at most 7 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 3
						SlotType= TimeScope|| Text= for 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index exceeds 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-55:]
		text: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 16 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true for at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 16 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true for at least 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 16 seconds
					[2]: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true for at least 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 16
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 16
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-43:]
		text: before the RCMTECHTERM_standstill_request_flag whose index is 8 exceeds the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index is 8 exceeds the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index is 8 exceeds the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is 8
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index is 8
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-31:]
		text: before the RCMTECHTERM_sailing_inhibitor that equals 2 exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_lsc , if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position for 29 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor that equals 2 exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_lsc , if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position for 29 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor that equals 2 exceeds the RCMTECHTERM_transmission_error
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_lsc
					[3]: if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position for 29 seconds when the RCMTECHTERM_steering_wheel_angle whose index equals 1 is greater than the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that equals 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_lsc
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index equals 1
						SlotType= TimeScope|| Text= for 29 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-198:]
		text: before the RCMTECHTERM_transmission_error that equals 2 is less than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every at most 10 seconds within at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error that equals 2 is less than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every at most 10 seconds within at least 24 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error that equals 2 is less than the RCMTECHTERM_brake_fault_state
					[2]: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every at most 10 seconds within at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= every at most 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-186:]
		text: if the RCMTECHTERM_sailing_termination that is less than 4 equals RCMVAL_true for at most 28 seconds , the RCMTECHTERM_defined_position shall be moved up , before the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 equals RCMVAL_true for at least 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that is less than 4 equals RCMVAL_true for at most 28 seconds , the RCMTECHTERM_defined_position shall be moved up , before the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 equals RCMVAL_true for at least 26 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that is less than 4 equals RCMVAL_true for at most 28 seconds
					[2]: the RCMTECHTERM_defined_position shall be moved up
					[3]: before the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 equals RCMVAL_true for at least 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 4
						SlotType= TimeScope|| Text= for at most 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5
						SlotType= TimeScope|| Text= for at least 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 26
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 26
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-174:]
		text: if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds , if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds , before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is RCMVAL_true for 7 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_idc_inhibitor within at least 6 seconds for at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds , if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds , before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is RCMVAL_true for 7 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_idc_inhibitor within at least 6 seconds for at most 17 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds
					[2]: if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle within 19 seconds
					[3]: before the RCMTECHTERM_steering_wheel_angle whose index is above 2 is RCMVAL_true for 7 seconds
					[4]: the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_idc_inhibitor within at least 6 seconds for at most 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within 19 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within 19 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 2
						SlotType= TimeScope|| Text= for 7 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at least 6 seconds
						SlotType= TimeScope|| Text= for at most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_steering_wheel_angle whose index is above 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 7
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 7
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-283:]
		text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_defined_position within at least 29 seconds , when the RCMTECHTERM_steering_wheel_angle that equals 4 exceeds the RCMTECHTERM_sailing_inhibitor every at most 28 seconds , while the RCMTECHTERM_transmission_error whose index is less than 8 is above the RCMTECHTERM_defined_position for at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_defined_position within at least 29 seconds , when the RCMTECHTERM_steering_wheel_angle that equals 4 exceeds the RCMTECHTERM_sailing_inhibitor every at most 28 seconds , while the RCMTECHTERM_transmission_error whose index is less than 8 is above the RCMTECHTERM_defined_position for at least 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_defined_position within at least 29 seconds when the RCMTECHTERM_steering_wheel_angle that equals 4 exceeds the RCMTECHTERM_sailing_inhibitor every at most 28 seconds
					[2]: while the RCMTECHTERM_transmission_error whose index is less than 8 is above the RCMTECHTERM_defined_position for at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that equals 4
						SlotType= TimeScope|| Text= within at least 29 seconds
						SlotType= TimeScope|| Text= every at most 28 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_defined_position
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is less than 8
						SlotType= TimeScope|| Text= for at least 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_steering_wheel_angle
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_transmission_error is above the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_transmission_error whose index is less than 8
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 2
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 2
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_transmission_error is above the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_transmission_error whose index is less than 8
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 2
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 2
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-162:]
		text: the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds , after the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position , if the RCMTECHTERM_sailing_inhibitor that is less than 3 is greater than the RCMTECHTERM_lsc .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds , after the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position , if the RCMTECHTERM_sailing_inhibitor that is less than 3 is greater than the RCMTECHTERM_lsc .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds the RCMTECHTERM_lsc shall be set to RCMVAL_true every at least 22 seconds for 7 seconds
					[2]: after the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
					[3]: if the RCMTECHTERM_sailing_inhibitor that is less than 3 is greater than the RCMTECHTERM_lsc
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 7 seconds
						SlotType= TimeScope|| Text= for 7 seconds
						SlotType= TimeScope|| Text= every at  least 22 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is less than 3
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-295:]
		text: when the RCMTECHTERM_sailing_inhibitor that exceeds 7 is less than the RCMTECHTERM_brake_pedal for at most 15 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests every 24 seconds within at most 16 seconds for at least 3 seconds , if the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_sailing_request for at most 22 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 3 is greater than the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_inhibitor that exceeds 7 is less than the RCMTECHTERM_brake_pedal for at most 15 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests every 24 seconds within at most 16 seconds for at least 3 seconds , if the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_sailing_request for at most 22 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 3 is greater than the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_inhibitor that exceeds 7 is less than the RCMTECHTERM_brake_pedal for at most 15 seconds
					[2]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests every 24 seconds within at most 16 seconds for at least 3 seconds
					[3]: if the RCMTECHTERM_defined_position that is above 7 is greater than the RCMTECHTERM_sailing_request for at most 22 seconds
					[4]: before the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 3 is greater than the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that exceeds 7
						SlotType= TimeScope|| Text= for at most 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for at least 3 seconds
						SlotType= TimeScope|| Text= every 24 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is above 7
						SlotType= TimeScope|| Text= for at most 22 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 3
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-150:]
		text: when the RCMTECHTERM_engine_error is RCMVAL_true every at least 15 seconds for at most 7 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up within 4 seconds every 26 seconds within 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_engine_error is RCMVAL_true every at least 15 seconds for at most 7 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up within 4 seconds every 26 seconds within 4 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_engine_error is RCMVAL_true every at least 15 seconds for at most 7 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be moved up within 4 seconds every 26 seconds within 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
						SlotType= TimeScope|| Text= within 4 seconds
						SlotType= TimeScope|| Text= within 4 seconds
						SlotType= TimeScope|| Text= every 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-380:]
		text: after the RCMTECHTERM_defined_position equals RCMVAL_true , after the RCMTECHTERM_transmission_error whose index equals 4 is RCMVAL_true , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 7 seconds within at most 10 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 7 seconds within at most 10 seconds , if the RCMTECHTERM_nosailing_requests that exceeds 3 exceeds the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_defined_position equals RCMVAL_true , after the RCMTECHTERM_transmission_error whose index equals 4 is RCMVAL_true , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 7 seconds within at most 10 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 7 seconds within at most 10 seconds , if the RCMTECHTERM_nosailing_requests that exceeds 3 exceeds the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_defined_position equals RCMVAL_true after the RCMTECHTERM_transmission_error whose index equals 4 is RCMVAL_true the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle
					[2]: every at most 7 seconds within at most 10 seconds shall be received from the RCMTECHTERM_steering_wheel_angle every at most 7 seconds within at most 10 seconds
					[3]: if the RCMTECHTERM_nosailing_requests that exceeds 3 exceeds the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index equals 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= shall be received from the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at most 10 seconds
						SlotType= TimeScope|| Text= within at most 10 seconds
						SlotType= TimeScope|| Text= every at most 7 seconds
						SlotType= TimeScope|| Text= every at most 7 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 3
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position equals RCMVAL_true after the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
										Arg[2]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-271:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request , after the RCMTECHTERM_lsc whose index is less than 2 is RCMVAL_true , if the RCMTECHTERM_engine_error whose index is less than 9 is greater than the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request , after the RCMTECHTERM_lsc whose index is less than 2 is RCMVAL_true , if the RCMTECHTERM_engine_error whose index is less than 9 is greater than the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request
					[2]: after the RCMTECHTERM_lsc whose index is less than 2 is RCMVAL_true
					[3]: if the RCMTECHTERM_engine_error whose index is less than 9 is greater than the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 2
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is less than 9
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is less than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_lsc is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_lsc whose index is less than 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-392:]
		text: when the RCMTECHTERM_nosailing_requests whose index is greater than 1 is less than the RCMTECHTERM_vehicle_speed_setpoint every 5 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is above 1 equals RCMVAL_true within at least 8 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_quality_signal every at least 13 seconds , before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests whose index is greater than 1 is less than the RCMTECHTERM_vehicle_speed_setpoint every 5 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is above 1 equals RCMVAL_true within at least 8 seconds , the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_quality_signal every at least 13 seconds , before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 4 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests whose index is greater than 1 is less than the RCMTECHTERM_vehicle_speed_setpoint every 5 seconds
					[2]: if the RCMTECHTERM_steering_wheel_angle whose index is above 1 equals RCMVAL_true within at least 8 seconds
					[3]: the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_quality_signal every at least 13 seconds
					[4]: before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is greater than 1
						SlotType= TimeScope|| Text= every 5 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 1
						SlotType= TimeScope|| Text= within at least 8 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= every at least 13 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is above 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is greater than 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 4
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 4
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-58:]
		text: if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_nosailing_requests every at most 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_nosailing_requests every at most 5 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_nosailing_requests seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_nosailing_requests seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_nosailing_requests seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-46:]
		text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_sailing_termination within 26 seconds , when the RCMTECHTERM_idc_inhibitor that is above 5 exceeds the RCMTECHTERM_brake_fault_state , while the RCMTECHTERM_quality_signal whose index is less than 2 exceeds the RCMTECHTERM_idc_inhibitor , if the RCMTECHTERM_sailing_termination whose index is above 4 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_sailing_termination within 26 seconds , when the RCMTECHTERM_idc_inhibitor that is above 5 exceeds the RCMTECHTERM_brake_fault_state , while the RCMTECHTERM_quality_signal whose index is less than 2 exceeds the RCMTECHTERM_idc_inhibitor , if the RCMTECHTERM_sailing_termination whose index is above 4 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_sailing_termination within 26 seconds when the RCMTECHTERM_idc_inhibitor that is above 5 exceeds the RCMTECHTERM_brake_fault_state
					[2]: while the RCMTECHTERM_quality_signal whose index is less than 2 exceeds the RCMTECHTERM_idc_inhibitor
					[3]: if the RCMTECHTERM_sailing_termination whose index is above 4 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that is above 5
						SlotType= TimeScope|| Text= within 26 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_sailing_termination
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 2
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is above 4
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is above 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_idc_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is less than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is less than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-34:]
		text: before the RCMTECHTERM_sailing_termination that is less than 1 is above the RCMTECHTERM_sailing_inhibitor for 10 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_defined_position within 25 seconds for 12 seconds every 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination that is less than 1 is above the RCMTECHTERM_sailing_inhibitor for 10 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_defined_position within 25 seconds for 12 seconds every 5 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination that is less than 1 is above the RCMTECHTERM_sailing_inhibitor for 10 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_defined_position within 25 seconds for 12 seconds every 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 1
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= for 12 seconds
						SlotType= TimeScope|| Text= every 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-22:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_sailing_termination within at least 20 seconds every at most 22 seconds within at least 20 seconds , before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_defined_position for at least 14 seconds , if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds , if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_sailing_termination within at least 20 seconds every at most 22 seconds within at least 20 seconds , before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_defined_position for at least 14 seconds , if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds , if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_sailing_termination within at least 20 seconds every at most 22 seconds within at least 20 seconds
					[2]: before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_defined_position for at least 14 seconds
					[3]: if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds
					[4]: if the RCMTECHTERM_sailing_request whose index exceeds 8 equals RCMVAL_true for at most 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= every at most 22 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= for at least 14 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index exceeds 8
						SlotType= TimeScope|| Text= for at most 11 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index exceeds 8
						SlotType= TimeScope|| Text= for at most 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index exceeds 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-10:]
		text: when the RCMTECHTERM_quality_signal whose index is greater than 9 is RCMVAL_true , before the RCMTECHTERM_quality_signal whose index equals 0 is less than the RCMTECHTERM_nosailing_requests for at most 29 seconds , the RCMTECHTERM_quality_signal shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_quality_signal whose index is greater than 9 is RCMVAL_true , before the RCMTECHTERM_quality_signal whose index equals 0 is less than the RCMTECHTERM_nosailing_requests for at most 29 seconds , the RCMTECHTERM_quality_signal shall be moved up .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_quality_signal whose index is greater than 9 is RCMVAL_true
					[2]: before the RCMTECHTERM_quality_signal whose index equals 0 is less than the RCMTECHTERM_nosailing_requests for at most 29 seconds
					[3]: the RCMTECHTERM_quality_signal shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 9
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index equals 0
						SlotType= TimeScope|| Text= for at most 29 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is greater than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index equals 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 29
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 29
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-3:]
		text: while the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 21 seconds for at most 29 seconds , if the RCMTECHTERM_idc_inhibitor that is less than 7 is RCMVAL_true for at most 24 seconds , when the RCMTECHTERM_sailing_request whose index is 9 is less than the RCMTECHTERM_quality_signal for at most 25 seconds every at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 21 seconds for at most 29 seconds , if the RCMTECHTERM_idc_inhibitor that is less than 7 is RCMVAL_true for at most 24 seconds , when the RCMTECHTERM_sailing_request whose index is 9 is less than the RCMTECHTERM_quality_signal for at most 25 seconds every at least 13 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_brake_pedal
					[2]: before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					[3]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 21 seconds for at most 29 seconds
					[4]: if the RCMTECHTERM_idc_inhibitor that is less than 7 is RCMVAL_true for at most 24 seconds when the RCMTECHTERM_sailing_request whose index is 9 is less than the RCMTECHTERM_quality_signal for at most 25 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 0
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at  least 21 seconds
						SlotType= TimeScope|| Text= for at  most 29 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 9
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that is less than 7
						SlotType= TimeScope|| Text= for at  most 24 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is the RCMTECHTERM_quality_signal every
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_idc_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is the RCMTECHTERM_quality_signal every
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal every
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is less than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is less than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-197:]
		text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_vehicle_speed_setpoint , while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds , while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds , if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_lsc within 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_vehicle_speed_setpoint , while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds , while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds , if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_lsc within 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
					[2]: while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds
					[3]: while the RCMTECHTERM_sailing_termination whose index is greater than 0 equals RCMVAL_true for 18 seconds
					[4]: if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_lsc within 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 0
						SlotType= TimeScope|| Text= for 18 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 0
						SlotType= TimeScope|| Text= for 18 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is greater than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is greater than 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_sailing_termination whose index is greater than 0
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 0
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 18
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 18
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_sailing_termination whose index is greater than 0
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 0
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 18
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 18
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-185:]
		text: when the RCMTECHTERM_sailing_termination equals RCMVAL_true every 22 seconds for at most 6 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is above 5 exceeds the RCMTECHTERM_sailing_termination for 24 seconds , the RCMTECHTERM_brake_fault_state shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_termination equals RCMVAL_true every 22 seconds for at most 6 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is above 5 exceeds the RCMTECHTERM_sailing_termination for 24 seconds , the RCMTECHTERM_brake_fault_state shall be moved up .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_termination equals RCMVAL_true every 22 seconds for at most 6 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint that is above 5 exceeds the RCMTECHTERM_sailing_termination for 24 seconds
					[3]: the RCMTECHTERM_brake_fault_state shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 6 seconds
						SlotType= TimeScope|| Text= every 22 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is above 5
						SlotType= TimeScope|| Text= for 24 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-294:]
		text: when the RCMTECHTERM_brake_pedal is RCMVAL_true every 8 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at least 25 seconds for at least 16 seconds within at least 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_pedal is RCMVAL_true every 8 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at least 25 seconds for at least 16 seconds within at least 26 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_pedal is RCMVAL_true every 8 seconds
					[2]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at least 25 seconds for at least 16 seconds within
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= TimeScope|| Text= every 8 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at  least 25 seconds
						SlotType= TimeScope|| Text= for at  least 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-173:]
		text: when the RCMTECHTERM_transmission_error that is greater than 1 equals RCMVAL_true every at most 4 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_brake_pedal for at least 11 seconds within 5 seconds , if the RCMTECHTERM_nosailing_requests whose index is 5 exceeds the RCMTECHTERM_quality_signal , before the RCMTECHTERM_quality_signal whose index exceeds 7 exceeds the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_transmission_error that is greater than 1 equals RCMVAL_true every at most 4 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_brake_pedal for at least 11 seconds within 5 seconds , if the RCMTECHTERM_nosailing_requests whose index is 5 exceeds the RCMTECHTERM_quality_signal , before the RCMTECHTERM_quality_signal whose index exceeds 7 exceeds the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_transmission_error that is greater than 1 equals RCMVAL_true at most 4 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_brake_pedal for at least 11 seconds within 5 seconds
					[3]: the RCMTECHTERM_nosailing_requests whose index is 5 exceeds the RCMTECHTERM_quality_signal before the RCMTECHTERM_quality_signal whose index exceeds 7
					[4]: exceeds the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error equals RCMVAL_true at most 4 seconds
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is greater than 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 11 seconds
						SlotType= TimeScope|| Text= within 5 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is 5
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index exceeds 7
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_idc_inhibitor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-2:]
		text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 19 seconds , when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds , if the RCMTECHTERM_standstill_request_flag that is less than 3 is RCMVAL_true for 28 seconds , when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds , before the RCMTECHTERM_brake_pedal that is 6 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 19 seconds , when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds , if the RCMTECHTERM_standstill_request_flag that is less than 3 is RCMVAL_true for 28 seconds , when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds , before the RCMTECHTERM_brake_pedal that is 6 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at most 19 seconds when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds is RCMVAL_true
					[2]: if the RCMTECHTERM_standstill_request_flag that is less than 3 is RCMVAL_true for 28 seconds when the RCMTECHTERM_defined_position whose index is less than 7 equals RCMVAL_true every at least 17 seconds before the RCMTECHTERM_brake_pedal that is 6
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position equals
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is less than 7
						SlotType= TimeScope|| Text= every at  most 19 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= RCMVAL_true is RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is less than 7
						SlotType= HiddenConstraint|| Text= equals before the RCMTECHTERM_brake_pedal that is 6
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is less than 3
						SlotType= TimeScope|| Text= for 28 seconds
						SlotType= TimeScope|| Text= every at  least 17 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = RCMVAL_true is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-161:]
		text: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 6 exceeds the RCMTECHTERM_brake_fault_state for at most 8 seconds , while the RCMTECHTERM_brake_fault_state whose index is less than 7 equals RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up within 2 seconds every at most 13 seconds within 2 seconds , while the RCMTECHTERM_idc_inhibitor whose index equals 0 equals RCMVAL_true for at least 16 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is less than 2 is above the RCMTECHTERM_vehicle_speed_setpoint within at most 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 6 exceeds the RCMTECHTERM_brake_fault_state for at most 8 seconds , while the RCMTECHTERM_brake_fault_state whose index is less than 7 equals RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up within 2 seconds every at most 13 seconds within 2 seconds , while the RCMTECHTERM_idc_inhibitor whose index equals 0 equals RCMVAL_true for at least 16 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is less than 2 is above the RCMTECHTERM_vehicle_speed_setpoint within at most 3 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 6 exceeds the RCMTECHTERM_brake_fault_state for at most 8 seconds
					[2]: while the RCMTECHTERM_brake_fault_state whose index is less than 7 equals RCMVAL_true
					[3]: the RCMTECHTERM_nosailing_requests shall be moved up within 2 seconds every at most 13 seconds within 2 seconds
					[4]: while the RCMTECHTERM_idc_inhibitor whose index equals 0 equals RCMVAL_true for at least 16 seconds
					[5]: if the RCMTECHTERM_vehicle_speed_quality_factor that is less than 2 is above the RCMTECHTERM_vehicle_speed_setpoint within at most 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is 6
						SlotType= TimeScope|| Text= for at most 8 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is less than 7
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= every at most 13 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index equals 0
						SlotType= TimeScope|| Text= for at least 16 seconds
					C[5]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is less than 2
						SlotType= TimeScope|| Text= within at most 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is less than 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is less than 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-270:]
		text: the RCMTECHTERM_brake_pedal shall be moved up every 21 seconds for at least 25 seconds , when the RCMTECHTERM_nosailing_requests that equals 8 exceeds the RCMTECHTERM_defined_position , if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be moved up every 21 seconds for at least 25 seconds , when the RCMTECHTERM_nosailing_requests that equals 8 exceeds the RCMTECHTERM_defined_position , if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be moved up every 21 seconds for at least 25 seconds
					[2]: when the RCMTECHTERM_nosailing_requests that equals 8 exceeds the RCMTECHTERM_defined_position
					[3]: if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
						SlotType= TimeScope|| Text= for at least 25 seconds
						SlotType= TimeScope|| Text= every 21 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that equals 8
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-391:]
		text: after the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_lsc for 6 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests within at most 3 seconds every at least 21 seconds within at most 3 seconds , before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_lsc for 6 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests within at most 3 seconds every at least 21 seconds within at most 3 seconds , before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_lsc for 6 seconds
					[2]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests within at most 3 seconds every at least 21 seconds within at most 3 seconds before the RCMTECHTERM_idc_inhibitor whose index exceeds 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 6 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 2
						SlotType= TimeScope|| Text= within at most 3 seconds
						SlotType= TimeScope|| Text= within at most 3 seconds
						SlotType= TimeScope|| Text= every at least 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 6
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 6
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-282:]
		text: if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 0 is RCMVAL_true within at least 12 seconds , after the RCMTECHTERM_idc_inhibitor whose index exceeds 8 is greater than the RCMTECHTERM_transmission_error for at most 24 seconds , the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 9 seconds for at most 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 0 is RCMVAL_true within at least 12 seconds , after the RCMTECHTERM_idc_inhibitor whose index exceeds 8 is greater than the RCMTECHTERM_transmission_error for at most 24 seconds , the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 9 seconds for at most 3 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 0 is RCMVAL_true within at least 12 seconds after the RCMTECHTERM_idc_inhibitor whose index exceeds 8 is greater than the RCMTECHTERM_transmission_error for at most 24 seconds
					[2]: the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_inhibitor within at most 9 seconds for at most 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that exceeds 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 8
						SlotType= TimeScope|| Text= within at least 12 seconds
						SlotType= TimeScope|| Text= for at most 24 seconds
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_transmission_error
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within at most 9 seconds
						SlotType= TimeScope|| Text= for at most 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-69:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds , the RCMTECHTERM_nosailing_requests shall be moved up every at least 19 seconds within at least 24 seconds , after the RCMTECHTERM_lsc equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds , the RCMTECHTERM_nosailing_requests shall be moved up every at least 19 seconds within at least 24 seconds , after the RCMTECHTERM_lsc equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true within 5 seconds
					[3]: the RCMTECHTERM_nosailing_requests shall be moved up every at least 19 seconds within at least 24 seconds
					[4]: after the RCMTECHTERM_lsc equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= within 5 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= within 5 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= every at least 19 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_lsc equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_lsc equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-57:]
		text: the RCMTECHTERM_sailing_request shall be moved up within at least 8 seconds within at least 8 seconds , when the RCMTECHTERM_idc_inhibitor that is less than 5 is less than the RCMTECHTERM_sailing_request every at most 16 seconds for at least 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be moved up within at least 8 seconds within at least 8 seconds , when the RCMTECHTERM_idc_inhibitor that is less than 5 is less than the RCMTECHTERM_sailing_request every at most 16 seconds for at least 23 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be moved up within at least 8 seconds within at least 8 seconds when the RCMTECHTERM_idc_inhibitor that is less than 5 is less than the RCMTECHTERM_sailing_request seconds for at least 23 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor is the RCMTECHTERM_sailing_request seconds
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that is less than 5
						SlotType= TimeScope|| Text= for at  least 23 seconds
						SlotType= TimeScope|| Text= within at  least 8 seconds
						SlotType= TimeScope|| Text= within at  least 8 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor is the RCMTECHTERM_sailing_request seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_idc_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-45:]
		text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_idc_inhibitor for 7 seconds , before the RCMTECHTERM_transmission_error whose index is greater than 3 is greater than the RCMTECHTERM_brake_pedal for at least 25 seconds , while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds , while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds , if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_idc_inhibitor for 7 seconds , before the RCMTECHTERM_transmission_error whose index is greater than 3 is greater than the RCMTECHTERM_brake_pedal for at least 25 seconds , while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds , while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds , if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at most 21 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_idc_inhibitor for 7 seconds
					[2]: before the RCMTECHTERM_transmission_error whose index is greater than 3 is greater than the RCMTECHTERM_brake_pedal for at least 25 seconds
					[3]: while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds
					[4]: while the RCMTECHTERM_transmission_error that is less than 1 is RCMVAL_true for 24 seconds
					[5]: if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at most 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 7 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is greater than 3
						SlotType= TimeScope|| Text= for at least 25 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 1
						SlotType= TimeScope|| Text= for 24 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 1
						SlotType= TimeScope|| Text= for 24 seconds
					C[5]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at most 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_transmission_error whose index is greater than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 25
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 25
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_transmission_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_transmission_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_transmission_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_transmission_error is RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 1
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  true
											<ValidTime>
												TimeType: Scope
												Value: 24
												Unit: seconds
												QPRelation: null
											<FormalSemantic>
												TechnicalOperator: null
												Value: 24
												</FormalSemantic>
											<ValidTime>
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-33:]
		text: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal for 28 seconds , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_quality_signal within 7 seconds , when the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 is greater than the RCMTECHTERM_engine_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal for 28 seconds , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_quality_signal within 7 seconds , when the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 is greater than the RCMTECHTERM_engine_error .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal for 28 seconds
					[2]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_quality_signal within 7 seconds when the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5 is greater than the RCMTECHTERM_engine_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for 28 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5
						SlotType= TimeScope|| Text= within 7 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-21:]
		text: the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds , when the RCMTECHTERM_transmission_error whose index is 7 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds , when the RCMTECHTERM_transmission_error whose index is 7 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds the RCMTECHTERM_sailing_inhibitor shall be moved up for at most 2 seconds within at least 19 seconds when the RCMTECHTERM_transmission_error whose index is 7 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is 7
						SlotType= TimeScope|| Text= within at  least 19 seconds
						SlotType= TimeScope|| Text= for at  most 2 seconds
						SlotType= TimeScope|| Text= within at  least 19 seconds
						SlotType= TimeScope|| Text= for at  most 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_transmission_error whose index is 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-310:]
		text: before the RCMTECHTERM_sailing_request whose index is above 5 is RCMVAL_true , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_request whose index is above 5 is RCMVAL_true , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_request whose index is above 5 is RCMVAL_true
					[2]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is above 5
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index is above 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-431:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true for 26 seconds , if the RCMTECHTERM_brake_fault_state that is above 9 equals RCMVAL_true within at least 20 seconds for 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true for 26 seconds , if the RCMTECHTERM_brake_fault_state that is above 9 equals RCMVAL_true within at least 20 seconds for 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true for 26 seconds
					[2]: if the RCMTECHTERM_brake_fault_state that is above 9 equals RCMVAL_true within at least 20 seconds for 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 26 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is above 9
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-92:]
		text: after the RCMTECHTERM_sailing_termination is RCMVAL_true for 23 seconds , before the RCMTECHTERM_vehicle_speed_setpoint that is 4 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds , if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds , if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_termination is RCMVAL_true for 23 seconds , before the RCMTECHTERM_vehicle_speed_setpoint that is 4 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds , if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds , if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds , the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_termination is RCMVAL_true for 23 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint that is 4 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds
					[3]: if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds
					[4]: if the RCMTECHTERM_brake_pedal whose index equals 2 is RCMVAL_false for at least 4 seconds
					[5]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= TimeScope|| Text= for 23 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is 4
						SlotType= TimeScope|| Text= for 14 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index equals 2
						SlotType= TimeScope|| Text= for at least 4 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index equals 2
						SlotType= TimeScope|| Text= for at least 4 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index equals 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 23
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 23
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_vehicle_speed_setpoint
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 14
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 14
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-80:]
		text: after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 28 seconds , the RCMTECHTERM_nosailing_requests shall be moved up within at least 24 seconds for 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 28 seconds , the RCMTECHTERM_nosailing_requests shall be moved up within at least 24 seconds for 8 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 28 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be moved up within at least 24 seconds for 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= for 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 28
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 28
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-249:]
		text: when the RCMTECHTERM_engine_error whose index is greater than 3 is RCMVAL_true every 11 seconds for 25 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds , before the RCMTECHTERM_nosailing_requests that is 0 is greater than the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position every at least 7 seconds for at least 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_engine_error whose index is greater than 3 is RCMVAL_true every 11 seconds for 25 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds , before the RCMTECHTERM_nosailing_requests that is 0 is greater than the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position every at least 7 seconds for at least 23 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_engine_error whose index is greater than 3 is RCMVAL_true every 11 seconds for 25 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds
					[3]: before the RCMTECHTERM_nosailing_requests that is 0 is greater than the RCMTECHTERM_standstill_request_flag
					[4]: if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request for at most 9 seconds
					[5]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position every at least 7 seconds for
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is greater than 3
						SlotType= TimeScope|| Text= every 11 seconds
						SlotType= TimeScope|| Text= for 25 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at  most 9 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is 0
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at  most 9 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every at  least 7 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is greater than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-128:]
		text: while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_steering_wheel_angle that is greater than 6 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error every at least 23 seconds within at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_steering_wheel_angle that is greater than 6 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error every at least 23 seconds within at least 4 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle when the RCMTECHTERM_steering_wheel_angle that is greater than 6 equals RCMVAL_true
					[2]: if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests
					[3]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error every at least 23 seconds within
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is greater than 6
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= every at  least 23 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_steering_wheel_angle
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-116:]
		text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds , after the RCMTECHTERM_standstill_request_flag whose index is 6 equals RCMVAL_true for 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds , after the RCMTECHTERM_standstill_request_flag whose index is 6 equals RCMVAL_true for 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds
					[2]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true every at least 5 seconds for 14 seconds within at least 2 seconds after the RCMTECHTERM_standstill_request_flag whose index is 6
					[3]: equals RCMVAL_true for 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= every at least 5 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is 6
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= every at least 5 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= equals RCMVAL_true
						SlotType= TimeScope|| Text= for 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = RCMVAL_true equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-225:]
		text: before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_sailing_inhibitor for at least 6 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up every at most 19 seconds , before the RCMTECHTERM_sailing_request that exceeds 0 is above the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_sailing_inhibitor for at least 6 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up every at most 19 seconds , before the RCMTECHTERM_sailing_request that exceeds 0 is above the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_sailing_inhibitor for at least 6 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be moved up every at most 19 seconds
					[3]: before the RCMTECHTERM_sailing_request that exceeds 0 is above the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at least 6 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
						SlotType= TimeScope|| Text= every at most 19 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that exceeds 0
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 6
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 6
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-346:]
		text: before the RCMTECHTERM_steering_wheel_angle whose index is less than 3 is above the RCMTECHTERM_idc_inhibitor for at most 5 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every 6 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is less than 5 equals RCMVAL_true within 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle whose index is less than 3 is above the RCMTECHTERM_idc_inhibitor for at most 5 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every 6 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that is less than 5 equals RCMVAL_true within 6 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle whose index is less than 3 is above the RCMTECHTERM_idc_inhibitor for at most 5 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests within at least 15 seconds every 6 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint that is less than 5 equals RCMVAL_true within 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is less than 3
						SlotType= TimeScope|| Text= for at most 5 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= every 6 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is less than 5
						SlotType= TimeScope|| Text= within 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_steering_wheel_angle whose index is less than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 5
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 5
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-455:]
		text: while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests , when the RCMTECHTERM_sailing_termination whose index is less than 9 is above the RCMTECHTERM_sailing_request for at least 29 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal every at most 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests , when the RCMTECHTERM_sailing_termination whose index is less than 9 is above the RCMTECHTERM_sailing_request for at least 29 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal every at most 7 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests
					[2]: when the RCMTECHTERM_sailing_termination whose index is less than 9 is above the RCMTECHTERM_sailing_request for at least 29 seconds
					[3]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is less than 9
						SlotType= TimeScope|| Text= for at least 29 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is less than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_brake_pedal seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_quality_signal is above the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-104:]
		text: before the RCMTECHTERM_brake_pedal that equals 4 is RCMVAL_true for at least 14 seconds , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal every at most 9 seconds , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal every at most 9 seconds , if the RCMTECHTERM_sailing_termination is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_brake_pedal that equals 4 is RCMVAL_true for at least 14 seconds , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal every at most 9 seconds , the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal every at most 9 seconds , if the RCMTECHTERM_sailing_termination is RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_brake_pedal that equals 4 is RCMVAL_true for at least 14 seconds every at most 9 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal
					[3]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal every at most 9 seconds
					[4]: if the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that equals 4
						SlotType= TimeScope|| Text= for at least 14 seconds
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-237:]
		text: before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for at least 2 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_pedal every at most 6 seconds for at least 12 seconds , if the RCMTECHTERM_defined_position whose index is less than 2 exceeds the RCMTECHTERM_steering_wheel_angle for 19 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for at least 2 seconds , the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_pedal every at most 6 seconds for at least 12 seconds , if the RCMTECHTERM_defined_position whose index is less than 2 exceeds the RCMTECHTERM_steering_wheel_angle for 19 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for at least 2 seconds
					[2]: the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_pedal every at most 6 seconds for at least 12 seconds
					[3]: if the RCMTECHTERM_defined_position whose index is less than 2 exceeds the RCMTECHTERM_steering_wheel_angle for 19 seconds
					[4]: after the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= TimeScope|| Text= for at least 2 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 12 seconds
						SlotType= TimeScope|| Text= every at most 6 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is less than 2
						SlotType= TimeScope|| Text= for 19 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is less than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be sent to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-358:]
		text: if the RCMTECHTERM_transmission_error that equals 1 is RCMVAL_false within at least 17 seconds , while the RCMTECHTERM_brake_fault_state that equals 6 is less than the RCMTECHTERM_lsc , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_transmission_error every 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_transmission_error that equals 1 is RCMVAL_false within at least 17 seconds , while the RCMTECHTERM_brake_fault_state that equals 6 is less than the RCMTECHTERM_lsc , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_transmission_error every 12 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_transmission_error that equals 1 is RCMVAL_false within at least 17 seconds
					[2]: while the RCMTECHTERM_brake_fault_state that equals 6 is less than the RCMTECHTERM_lsc
					[3]: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_transmission_error every 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 1
						SlotType= TimeScope|| Text= within at least 17 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that equals 6
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= every 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_fault_state
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_fault_state
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-443:]
		text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 27 seconds every at most 13 seconds , before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true , when the RCMTECHTERM_defined_position that exceeds 8 equals RCMVAL_true for 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 27 seconds every at most 13 seconds , before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true , when the RCMTECHTERM_defined_position that exceeds 8 equals RCMVAL_true for 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 27 seconds every at most 13 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true when the RCMTECHTERM_defined_position that exceeds 8 equals RCMVAL_true for 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at least 27 seconds
						SlotType= TimeScope|| Text= every at most 13 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that exceeds 8
						SlotType= TimeScope|| Text= for 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-201:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag , before the RCMTECHTERM_nosailing_requests that is less than 8 is greater than the RCMTECHTERM_standstill_request_flag .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag , before the RCMTECHTERM_nosailing_requests that is less than 8 is greater than the RCMTECHTERM_standstill_request_flag .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag
					[2]: before the RCMTECHTERM_nosailing_requests that is less than 8 is greater than the RCMTECHTERM_standstill_request_flag
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is less than 8
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-322:]
		text: when the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests , if the RCMTECHTERM_transmission_error that exceeds 8 is greater than the RCMTECHTERM_sailing_inhibitor within 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests , if the RCMTECHTERM_transmission_error that exceeds 8 is greater than the RCMTECHTERM_sailing_inhibitor within 18 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_quality_signal
					[2]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests
					[3]: if the RCMTECHTERM_transmission_error that exceeds 8 is greater than the RCMTECHTERM_sailing_inhibitor within 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_quality_signal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that exceeds 8
						SlotType= TimeScope|| Text= within 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-479:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request every at most 13 seconds , if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true within at most 20 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_vehicle_speed_setpoint for at most 19 seconds , before the RCMTECHTERM_brake_pedal that exceeds 9 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request every at most 13 seconds , if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true within at most 20 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_vehicle_speed_setpoint for at most 19 seconds , before the RCMTECHTERM_brake_pedal that exceeds 9 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request every at most 13 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true within at most 20 seconds when the RCMTECHTERM_lsc is above the RCMTECHTERM_vehicle_speed_setpoint for at most 19 seconds
					[3]: before the RCMTECHTERM_brake_pedal that exceeds 9 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= every at most 13 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= TimeScope|| Text= within at most 20 seconds
						SlotType= TimeScope|| Text= for at most 19 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is above the RCMTECHTERM_vehicle_speed_setpoint
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that exceeds 9
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is above the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-213:]
		text: when the RCMTECHTERM_brake_pedal that exceeds 1 is RCMVAL_true , after the RCMTECHTERM_steering_wheel_angle that is less than 9 is RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up every at most 5 seconds for at most 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_pedal that exceeds 1 is RCMVAL_true , after the RCMTECHTERM_steering_wheel_angle that is less than 9 is RCMVAL_true , the RCMTECHTERM_nosailing_requests shall be moved up every at most 5 seconds for at most 3 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_pedal that exceeds 1 is RCMVAL_true
					[2]: after the RCMTECHTERM_steering_wheel_angle that is less than 9 is RCMVAL_true
					[3]: the RCMTECHTERM_nosailing_requests shall be moved up every at most 5 seconds for at most 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that exceeds 1
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is less than 9
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= for at most 3 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-334:]
		text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_defined_position every at least 20 seconds within at most 25 seconds for at most 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_defined_position every at least 20 seconds within at most 25 seconds for at most 5 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_defined_position every at least 20 seconds within at most 25 seconds for
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every at  least 20 seconds
						SlotType= TimeScope|| Text= within at  most 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-467:]
		text: while the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at most 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at most 7 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_pedal that is 4 exceeds the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal within at least 24 seconds for at least 29 seconds
					[3]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true within at most 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at  least 29 seconds
						SlotType= TimeScope|| Text= within at  least 24 seconds
						SlotType= TimeScope|| Text= for at  least 29 seconds
						SlotType= TimeScope|| Text= within at  least 24 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= within at  most 7 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_pedal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-200:]
		text: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_idc_inhibitor for 18 seconds , before the RCMTECHTERM_defined_position is RCMVAL_true for at most 23 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 9 is above the RCMTECHTERM_idc_inhibitor for at least 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_idc_inhibitor for 18 seconds , before the RCMTECHTERM_defined_position is RCMVAL_true for at most 23 seconds , if the RCMTECHTERM_sailing_termination whose index is greater than 9 is above the RCMTECHTERM_idc_inhibitor for at least 25 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 exceeds the RCMTECHTERM_transmission_error
					[2]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_idc_inhibitor for 18 seconds
					[3]: before the RCMTECHTERM_defined_position is RCMVAL_true for at most 23 seconds
					[4]: if the RCMTECHTERM_sailing_termination whose index is greater than 9 is above the RCMTECHTERM_idc_inhibitor for at least 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 18 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 23 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 9
						SlotType= TimeScope|| Text= for at least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is greater than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor exceeds the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 23
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 23
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-321:]
		text: the RCMTECHTERM_brake_pedal shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be moved up .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-442:]
		text: before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_nosailing_requests for 4 seconds , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_nosailing_requests for 4 seconds , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_nosailing_requests for 4 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for 4 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 4
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 4
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-430:]
		text: before the RCMTECHTERM_engine_error that is above 0 is less than the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_termination within at least 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error that is above 0 is less than the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_termination within at least 16 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error that is above 0 is less than the RCMTECHTERM_vehicle_speed_setpoint for at most 26 seconds
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_termination within at least 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is above 0
						SlotType= TimeScope|| Text= for at most 26 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within at least 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 26
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 26
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-91:]
		text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_transmission_error every 23 seconds within at least 28 seconds , when the RCMTECHTERM_steering_wheel_angle that is less than 0 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_transmission_error every 23 seconds within at least 28 seconds , when the RCMTECHTERM_steering_wheel_angle that is less than 0 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_transmission_error every 23 seconds within at least 28 seconds when the RCMTECHTERM_steering_wheel_angle that is less than 0 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is less than 0
						SlotType= TimeScope|| Text= within at least 28 seconds
						SlotType= TimeScope|| Text= every 23 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_steering_wheel_angle
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-139:]
		text: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 7 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true , if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds , if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 7 is RCMVAL_true , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true , if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds , if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 7 is RCMVAL_true
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
					[3]: if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds
					[4]: if the RCMTECHTERM_nosailing_requests that is above 8 is greater than the RCMTECHTERM_defined_position within at least 20 seconds for 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 7
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 8
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for 17 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 8
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= for 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-127:]
		text: the RCMTECHTERM_sailing_termination shall be moved up every at most 2 seconds within at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be moved up every at most 2 seconds within at least 9 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be moved up every at most 2 seconds within at least 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= within at least 9 seconds
						SlotType= TimeScope|| Text= every at most 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-236:]
		text: when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_sailing_request shall be moved up , when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests , while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state for 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests , the RCMTECHTERM_sailing_request shall be moved up , when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests , while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state for 8 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests
					[2]: the RCMTECHTERM_sailing_request shall be moved up
					[3]: when the RCMTECHTERM_steering_wheel_angle that exceeds 1 exceeds the RCMTECHTERM_nosailing_requests
					[4]: while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state for 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that exceeds 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that exceeds 1
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_steering_wheel_angle
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 8
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 8
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 8
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 8
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-357:]
		text: after the RCMTECHTERM_brake_pedal that equals 3 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor every 10 seconds , if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds , if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_brake_pedal that equals 3 is less than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor every 10 seconds , if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds , if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_brake_pedal that equals 3 is less than the RCMTECHTERM_sailing_termination the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor every 10 seconds
					[2]: if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds
					[3]: if the RCMTECHTERM_nosailing_requests that is 0 exceeds the RCMTECHTERM_sailing_inhibitor within 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_sailing_termination
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that equals 3
						SlotType= TimeScope|| Text= every 10 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is 0
						SlotType= TimeScope|| Text= within 26 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is 0
						SlotType= TimeScope|| Text= within 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-466:]
		text: if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 5 seconds , if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 5 seconds , if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state
					[2]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 5 seconds
					[3]: if the RCMTECHTERM_brake_pedal whose index is above 6 is greater than the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is above 6
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at least 5 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is above 6
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index is above 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-115:]
		text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_nosailing_requests within 19 seconds every at most 15 seconds within 19 seconds , while the RCMTECHTERM_standstill_request_flag that is greater than 3 equals RCMVAL_true , when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint every at least 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_nosailing_requests within 19 seconds every at most 15 seconds within 19 seconds , while the RCMTECHTERM_standstill_request_flag that is greater than 3 equals RCMVAL_true , when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint every at least 25 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_nosailing_requests within 19 seconds every at most 15 seconds within 19 seconds
					[2]: while the RCMTECHTERM_standstill_request_flag that is greater than 3 equals RCMVAL_true when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint every at least 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within 19 seconds
						SlotType= TimeScope|| Text= within 19 seconds
						SlotType= TimeScope|| Text= every at most 15 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is greater than 3
						SlotType= TimeScope|| Text= every at least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-248:]
		text: while the RCMTECHTERM_lsc whose index is less than 3 is above the RCMTECHTERM_steering_wheel_angle , if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds , if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds , the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_brake_fault_state every 22 seconds for at most 20 seconds , after the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_standstill_request_flag .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc whose index is less than 3 is above the RCMTECHTERM_steering_wheel_angle , if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds , if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds , the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_brake_fault_state every 22 seconds for at most 20 seconds , after the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_standstill_request_flag .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc whose index is less than 3 is above the RCMTECHTERM_steering_wheel_angle
					[2]: if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds
					[3]: if the RCMTECHTERM_sailing_request whose index is 7 equals RCMVAL_false for at least 19 seconds within at least 19 seconds
					[4]: the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_brake_fault_state every 22 seconds for at most 20 seconds
					[5]: after the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_standstill_request_flag
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is above the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 3
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 7
						SlotType= TimeScope|| Text= for at least 19 seconds
						SlotType= TimeScope|| Text= within at least 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 7
						SlotType= TimeScope|| Text= for at least 19 seconds
						SlotType= TimeScope|| Text= within at least 19 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at most 20 seconds
						SlotType= TimeScope|| Text= every 22 seconds
					C[5]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_standstill_request_flag
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-369:]
		text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor every at most 29 seconds within at least 15 seconds for 20 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor every at most 29 seconds within at least 15 seconds for 20 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor seconds within at least 15 seconds for 20 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor seconds
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= for 20 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-454:]
		text: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true within at most 29 seconds for 24 seconds every at least 5 seconds , while the RCMTECHTERM_nosailing_requests that exceeds 4 is less than the RCMTECHTERM_steering_wheel_angle .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true within at most 29 seconds for 24 seconds every at least 5 seconds , while the RCMTECHTERM_nosailing_requests that exceeds 4 is less than the RCMTECHTERM_steering_wheel_angle .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true within at most 29 seconds for 24 seconds every at least 5 seconds
					[2]: while the RCMTECHTERM_nosailing_requests that exceeds 4 is less than the RCMTECHTERM_steering_wheel_angle
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 29 seconds
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= every at least 5 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 4
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_nosailing_requests
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_steering_wheel_angle
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_nosailing_requests
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-103:]
		text: the RCMTECHTERM_sailing_inhibitor shall be moved up , before the RCMTECHTERM_transmission_error that is less than 7 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_inhibitor shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be moved up , before the RCMTECHTERM_transmission_error that is less than 7 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_inhibitor shall be moved up .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be moved up the RCMTECHTERM_sailing_inhibitor shall be moved up
					[2]: before the RCMTECHTERM_transmission_error that is less than 7 is greater than the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up the RCMTECHTERM_sailing_inhibitor
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 7
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-212:]
		text: after the RCMTECHTERM_engine_error whose index is 1 equals RCMVAL_true , before the RCMTECHTERM_sailing_termination whose index is less than 5 equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within 23 seconds for at most 2 seconds , if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor , if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_engine_error whose index is 1 equals RCMVAL_true , before the RCMTECHTERM_sailing_termination whose index is less than 5 equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within 23 seconds for at most 2 seconds , if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor , if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_engine_error whose index is 1 equals RCMVAL_true the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag within 23 seconds for at most 2 seconds
					[2]: before the RCMTECHTERM_sailing_termination whose index is less than 5 equals RCMVAL_true
					[3]: if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor
					[4]: if the RCMTECHTERM_brake_pedal that is greater than 0 exceeds the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is 1
						SlotType= TimeScope|| Text= for at most 2 seconds
						SlotType= TimeScope|| Text= within 23 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is less than 5
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is greater than 0
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is greater than 0
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_engine_error equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_termination whose index is less than 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-333:]
		text: if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_nosailing_requests within at most 9 seconds for at most 22 seconds , if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds , when the RCMTECHTERM_sailing_termination that is greater than 2 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_nosailing_requests within at most 9 seconds for at most 22 seconds , if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds , when the RCMTECHTERM_sailing_termination that is greater than 2 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds
					[2]: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_nosailing_requests within at most 9 seconds for at most 22 seconds
					[3]: if the RCMTECHTERM_sailing_inhibitor that is above 5 is RCMVAL_true for at most 6 seconds within at most 27 seconds when the RCMTECHTERM_sailing_termination that is greater than 2 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 5
						SlotType= TimeScope|| Text= for at most 6 seconds
						SlotType= TimeScope|| Text= within at most 27 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at most 9 seconds
						SlotType= TimeScope|| Text= for at most 22 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 5
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 2
						SlotType= TimeScope|| Text= for at most 6 seconds
						SlotType= TimeScope|| Text= within at most 27 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-224:]
		text: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every 14 seconds , if the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true , before the RCMTECHTERM_engine_error that exceeds 0 is above the RCMTECHTERM_brake_fault_state , when the RCMTECHTERM_vehicle_speed_quality_factor that is less than 4 equals RCMVAL_true for 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every 14 seconds , if the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true , before the RCMTECHTERM_engine_error that exceeds 0 is above the RCMTECHTERM_brake_fault_state , when the RCMTECHTERM_vehicle_speed_quality_factor that is less than 4 equals RCMVAL_true for 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every 14 seconds
					[2]: if the RCMTECHTERM_nosailing_requests whose index is greater than 9 is RCMVAL_true
					[3]: before the RCMTECHTERM_engine_error that exceeds 0 is above the RCMTECHTERM_brake_fault_state
					[4]: when the RCMTECHTERM_vehicle_speed_quality_factor that is less than 4 equals RCMVAL_true for 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every 14 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is greater than 9
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that exceeds 0
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is less than 4
						SlotType= TimeScope|| Text= for 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is greater than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-345:]
		text: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_engine_error for 26 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within 18 seconds for 14 seconds every 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_engine_error for 26 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within 18 seconds for 14 seconds every 24 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_engine_error for 26 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within 18 seconds for 14 seconds every 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for 26 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= for 14 seconds
						SlotType= TimeScope|| Text= every 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 26
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 26
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-478:]
		text: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_engine_error every 20 seconds , after the RCMTECHTERM_nosailing_requests that exceeds 5 equals RCMVAL_true , when the RCMTECHTERM_sailing_request whose index exceeds 3 exceeds the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_engine_error every 20 seconds , after the RCMTECHTERM_nosailing_requests that exceeds 5 equals RCMVAL_true , when the RCMTECHTERM_sailing_request whose index exceeds 3 exceeds the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_engine_error every 20 seconds after the RCMTECHTERM_nosailing_requests
					[2]: that equals RCMVAL_true when the RCMTECHTERM_sailing_request whose index exceeds 3 exceeds the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_nosailing_requests
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= every 20 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index exceeds 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= that equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index exceeds 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = that equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: that
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-320:]
		text: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests for 14 seconds , if the RCMTECHTERM_sailing_inhibitor that is 8 is RCMVAL_false .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests for 14 seconds , if the RCMTECHTERM_sailing_inhibitor that is 8 is RCMVAL_false .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests for 14 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor that is 8 is RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is 8
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-211:]
		text: when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds , if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_standstill_request_flag within at least 26 seconds for at most 17 seconds , when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true for at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds , if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_standstill_request_flag within at least 26 seconds for at most 17 seconds , when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true for at least 2 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds
					[2]: if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_standstill_request_flag within at least 26 seconds for at most 17 seconds when the RCMTECHTERM_quality_signal equals RCMVAL_true for at least 15 seconds
					[3]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true for at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= TimeScope|| Text= for at least 15 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at least 26 seconds
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= for at least 15 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal equals RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-332:]
		text: while the RCMTECHTERM_standstill_request_flag that equals 4 is less than the RCMTECHTERM_brake_pedal for at least 23 seconds , if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds , if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds , the RCMTECHTERM_lsc shall be moved up within 19 seconds for at least 16 seconds every at least 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_standstill_request_flag that equals 4 is less than the RCMTECHTERM_brake_pedal for at least 23 seconds , if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds , if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds , the RCMTECHTERM_lsc shall be moved up within 19 seconds for at least 16 seconds every at least 19 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_standstill_request_flag that equals 4 is less than the RCMTECHTERM_brake_pedal for at least 23 seconds
					[2]: if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds
					[3]: if the RCMTECHTERM_standstill_request_flag that is greater than 2 equals RCMVAL_true within at most 19 seconds for at least 23 seconds
					[4]: the RCMTECHTERM_lsc shall be moved up within 19 seconds for at least 16 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that equals 4
						SlotType= TimeScope|| Text= for at  least 23 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is greater than 2
						SlotType= TimeScope|| Text= for at  least 23 seconds
						SlotType= TimeScope|| Text= within at  most 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is greater than 2
						SlotType= TimeScope|| Text= for at  least 23 seconds
						SlotType= TimeScope|| Text= within at  most 19 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
						SlotType= TimeScope|| Text= within 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_standstill_request_flag
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 23
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 23
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_standstill_request_flag
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 23
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 23
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-453:]
		text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error for 22 seconds within at least 18 seconds every at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error for 22 seconds within at least 18 seconds every at least 13 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error for 22 seconds within at least 18 seconds every at least 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within at least 18 seconds
						SlotType= TimeScope|| Text= for 22 seconds
						SlotType= TimeScope|| Text= every at least 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-441:]
		text: when the RCMTECHTERM_quality_signal whose index is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , after the RCMTECHTERM_idc_inhibitor is RCMVAL_true , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up within 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_quality_signal whose index is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 8 seconds , after the RCMTECHTERM_idc_inhibitor is RCMVAL_true , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up within 16 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_quality_signal whose index is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 8 seconds
					[2]: after the RCMTECHTERM_idc_inhibitor is RCMVAL_true
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up within 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 5
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor is RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
						SlotType= TimeScope|| Text= within 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-94:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds , the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_sailing_inhibitor every 12 seconds within 29 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds , while the RCMTECHTERM_defined_position that is above 7 is less than the RCMTECHTERM_quality_signal for at least 12 seconds , when the RCMTECHTERM_lsc equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds , the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_sailing_inhibitor every 12 seconds within 29 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds , while the RCMTECHTERM_defined_position that is above 7 is less than the RCMTECHTERM_quality_signal for at least 12 seconds , when the RCMTECHTERM_lsc equals RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds
					[2]: the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_sailing_inhibitor every 12 seconds within 29 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2 is greater than the RCMTECHTERM_sailing_termination within at least 22 seconds
					[4]: while the RCMTECHTERM_defined_position that is above 7 is less than the RCMTECHTERM_quality_signal for at least 12 seconds when the RCMTECHTERM_lsc equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2
						SlotType= TimeScope|| Text= within at least 22 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within 29 seconds
						SlotType= TimeScope|| Text= every 12 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 2
						SlotType= TimeScope|| Text= within at least 22 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is above 7
						SlotType= TimeScope|| Text= for at least 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-82:]
		text: when the RCMTECHTERM_standstill_request_flag whose index is less than 9 is above the RCMTECHTERM_lsc every at most 16 seconds for 18 seconds , if the RCMTECHTERM_nosailing_requests equals RCMVAL_true within at most 26 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 18 seconds every 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_standstill_request_flag whose index is less than 9 is above the RCMTECHTERM_lsc every at most 16 seconds for 18 seconds , if the RCMTECHTERM_nosailing_requests equals RCMVAL_true within at most 26 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 18 seconds every 4 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_standstill_request_flag whose index is less than 9 is above the RCMTECHTERM_lsc every at most 16 seconds for 18 seconds
					[2]: if the RCMTECHTERM_nosailing_requests equals RCMVAL_true within at most 26 seconds
					[3]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state for 18 seconds every 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 9
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= TimeScope|| Text= within at most 26 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-70:]
		text: if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error within at most 25 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal every at most 28 seconds for at least 12 seconds within at most 24 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal every at most 28 seconds for at least 12 seconds within at most 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error within at most 25 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal every at most 28 seconds for at least 12 seconds within at most 24 seconds , the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal every at most 28 seconds for at least 12 seconds within at most 24 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error within at most 25 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal every at most 28 seconds for at least 12 seconds within the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal seconds for at least 12 seconds within at most 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at  most 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= every at  most 28 seconds
						SlotType= TimeScope|| Text= within at  most 24 seconds
						SlotType= TimeScope|| Text= for at  least 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-138:]
		text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds , if the RCMTECHTERM_brake_fault_state whose index is greater than 7 exceeds the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds , if the RCMTECHTERM_brake_fault_state whose index is greater than 7 exceeds the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at least 22 seconds every 3 seconds
					[2]: if the RCMTECHTERM_brake_fault_state whose index is greater than 7 exceeds the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= every 3 seconds
						SlotType= TimeScope|| Text= for at  least 22 seconds
						SlotType= TimeScope|| Text= for at  least 22 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is greater than 7
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is greater than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-247:]
		text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 9 seconds every 3 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that is less than 2 equals RCMVAL_true every 25 seconds for 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 9 seconds every 3 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that is less than 2 equals RCMVAL_true every 25 seconds for 18 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 9 seconds every 3 seconds when the RCMTECHTERM_vehicle_speed_setpoint that is less than 2 equals RCMVAL_true every 25 seconds for 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is less than 2
						SlotType= TimeScope|| Text= within at most 9 seconds
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= every 3 seconds
						SlotType= TimeScope|| Text= every 25 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-368:]
		text: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_standstill_request_flag shall be moved up for at most 27 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_standstill_request_flag shall be moved up for at most 27 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state
					[2]: the RCMTECHTERM_standstill_request_flag shall be moved up for at most 27 seconds
					[3]: if the RCMTECHTERM_steering_wheel_angle whose index is greater than 4 is less than the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is greater than 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
						SlotType= TimeScope|| Text= for at most 27 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is greater than 4
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is greater than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-477:]
		text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds , if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds , if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds , if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds , if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint within 8 seconds every 4 seconds
					[2]: if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds
					[3]: if the RCMTECHTERM_transmission_error that is greater than 5 exceeds the RCMTECHTERM_brake_pedal for at least 23 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= every 4 seconds
						SlotType= TimeScope|| Text= within 8 seconds
						SlotType= TimeScope|| Text= within 8 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is greater than 5
						SlotType= TimeScope|| Text= for at  least 23 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is greater than 5
						SlotType= TimeScope|| Text= for at  least 23 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-126:]
		text: before the RCMTECHTERM_vehicle_speed_setpoint that equals 0 is greater than the RCMTECHTERM_idc_inhibitor for 10 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_quality_signal within at least 16 seconds every at most 5 seconds , before the RCMTECHTERM_sailing_termination that is less than 9 equals RCMVAL_true for 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_setpoint that equals 0 is greater than the RCMTECHTERM_idc_inhibitor for 10 seconds , the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_quality_signal within at least 16 seconds every at most 5 seconds , before the RCMTECHTERM_sailing_termination that is less than 9 equals RCMVAL_true for 19 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_setpoint that equals 0 is greater than the RCMTECHTERM_idc_inhibitor for 10 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_quality_signal within at least 16 seconds every at most 5 seconds
					[3]: before the RCMTECHTERM_sailing_termination that is less than 9 equals RCMVAL_true for 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that equals 0
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within at least 16 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 9
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_setpoint
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_termination equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 9
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-259:]
		text: if the RCMTECHTERM_brake_pedal that is 3 is less than the RCMTECHTERM_engine_error for at least 23 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_request every at most 21 seconds within 23 seconds for 24 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is above 6 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_pedal that is 3 is less than the RCMTECHTERM_engine_error for at least 23 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_request every at most 21 seconds within 23 seconds for 24 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is above 6 is RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_pedal that is 3 is less than the RCMTECHTERM_engine_error for at least 23 seconds
					[2]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_request every at most 21 seconds within 23 seconds for 24 seconds
					[3]: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is above 6 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is 3
						SlotType= TimeScope|| Text= for at least 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within 23 seconds
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= every at most 21 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is above 6
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is above 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-465:]
		text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_sailing_termination for 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_sailing_termination for 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_sailing_termination for 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-114:]
		text: before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 2 is greater than the RCMTECHTERM_standstill_request_flag for at least 19 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at least 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 2 is greater than the RCMTECHTERM_standstill_request_flag for at least 19 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at least 6 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 2 is greater than the RCMTECHTERM_standstill_request_flag for at least 19 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 2
						SlotType= TimeScope|| Text= for at  least 19 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is less than 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-223:]
		text: the RCMTECHTERM_defined_position shall be moved up every at least 6 seconds , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal , if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal for 19 seconds , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_sailing_request whose index is 9 equals RCMVAL_true for at most 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be moved up every at least 6 seconds , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal , if the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal for 19 seconds , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_sailing_request whose index is 9 equals RCMVAL_true for at most 23 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be moved up every at least 6 seconds when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
					[2]: the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal for 19 seconds when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal before the RCMTECHTERM_sailing_request whose index is 9
					[3]: equals RCMVAL_true for at most 23 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every at  least 6 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= exceeds before the RCMTECHTERM_sailing_request whose index is 9
						SlotType= TimeScope|| Text= for 19 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= RCMVAL_true equals
						SlotType= TimeScope|| Text= for at  most 23 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = RCMVAL_true equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-344:]
		text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 11 seconds within at least 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for 19 seconds within at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 11 seconds within at least 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for 19 seconds within at most 21 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 11 seconds within at least 11 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true for 19 seconds within at most 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 11 seconds
						SlotType= TimeScope|| Text= within at least 11 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						SlotType= TimeScope|| Text= within at most 21 seconds
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-102:]
		text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_lsc every at least 18 seconds , if the RCMTECHTERM_standstill_request_flag that exceeds 4 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at least 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_lsc every at least 18 seconds , if the RCMTECHTERM_standstill_request_flag that exceeds 4 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at least 8 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_lsc every at least 18 seconds
					[2]: if the RCMTECHTERM_standstill_request_flag that exceeds 4 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at least 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= every at least 18 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that exceeds 4
						SlotType= TimeScope|| Text= within at least 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-235:]
		text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 6 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 6 seconds , if the RCMTECHTERM_standstill_request_flag whose index equals 2 is less than the RCMTECHTERM_engine_error for at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 6 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 6 seconds , if the RCMTECHTERM_standstill_request_flag whose index equals 2 is less than the RCMTECHTERM_engine_error for at least 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true seconds the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at least 6 seconds
					[2]: if the RCMTECHTERM_standstill_request_flag whose index equals 2 is less than the RCMTECHTERM_engine_error for at least 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true seconds
						SlotType= TimeScope|| Text= every at  least 6 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index equals 2
						SlotType= TimeScope|| Text= for at  least 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index equals 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-356:]
		text: before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is less than the RCMTECHTERM_sailing_request for at least 3 seconds , when the RCMTECHTERM_brake_pedal whose index equals 0 is above the RCMTECHTERM_sailing_termination , while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error , if the RCMTECHTERM_nosailing_requests whose index is above 0 is less than the RCMTECHTERM_lsc , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up every at least 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is less than the RCMTECHTERM_sailing_request for at least 3 seconds , when the RCMTECHTERM_brake_pedal whose index equals 0 is above the RCMTECHTERM_sailing_termination , while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error , if the RCMTECHTERM_nosailing_requests whose index is above 0 is less than the RCMTECHTERM_lsc , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up every at least 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle whose index exceeds 4 is less than the RCMTECHTERM_sailing_request for at least 3 seconds when the RCMTECHTERM_brake_pedal whose index equals 0 is above the RCMTECHTERM_sailing_termination
					[2]: while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
					[3]: if the RCMTECHTERM_nosailing_requests whose index is above 0 is less than the RCMTECHTERM_lsc
					[4]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_sailing_request
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index exceeds 4
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index equals 0
						SlotType= TimeScope|| Text= for at  least 3 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is above 0
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is above 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index equals 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be moved
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_engine_error
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_engine_error
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-489:]
		text: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true within 13 seconds within 13 seconds , while the RCMTECHTERM_standstill_request_flag that equals 9 is less than the RCMTECHTERM_engine_error , before the RCMTECHTERM_sailing_request that is 8 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true within 13 seconds within 13 seconds , while the RCMTECHTERM_standstill_request_flag that equals 9 is less than the RCMTECHTERM_engine_error , before the RCMTECHTERM_sailing_request that is 8 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true within 13 seconds within 13 seconds
					[2]: while the RCMTECHTERM_standstill_request_flag that equals 9 is less than the RCMTECHTERM_engine_error
					[3]: before the RCMTECHTERM_sailing_request that is 8 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 13 seconds
						SlotType= TimeScope|| Text= within 13 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 8
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_request
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-101:]
		text: before the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_transmission_error , if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds , if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds , the RCMTECHTERM_lsc shall be moved up within at least 24 seconds within at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_transmission_error , if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds , if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds , the RCMTECHTERM_lsc shall be moved up within at least 24 seconds within at least 24 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_transmission_error
					[2]: if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds
					[3]: if the RCMTECHTERM_lsc whose index is less than 3 equals RCMVAL_true for at least 7 seconds
					[4]: the RCMTECHTERM_lsc shall be moved up within at least 24 seconds within at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 7
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 3
						SlotType= TimeScope|| Text= for at least 7 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 3
						SlotType= TimeScope|| Text= for at least 7 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= within at least 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index is less than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index is less than 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-210:]
		text: the RCMTECHTERM_lsc shall be set to RCMVAL_true every 27 seconds within 2 seconds , before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be set to RCMVAL_true every 27 seconds within 2 seconds , before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be set to RCMVAL_true every 27 seconds within 2 seconds
					[2]: before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= every 27 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-331:]
		text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds , the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds , when the RCMTECHTERM_brake_pedal that is 2 is greater than the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds , the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds , when the RCMTECHTERM_brake_pedal that is 2 is greater than the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal for at most 3 seconds when the RCMTECHTERM_brake_pedal that is 2 is greater than the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is 2
						SlotType= TimeScope|| Text= for at  most 3 seconds
						SlotType= TimeScope|| Text= for at  most 3 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-440:]
		text: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true , before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true , when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_engine_error for 11 seconds every 4 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true within 12 seconds every at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true , before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true , when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_engine_error for 11 seconds every 4 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true within 12 seconds every at least 2 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
					[2]: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_engine_error for 11 seconds every 4 seconds
					[3]: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true within 12 seconds every at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for 11 seconds
						SlotType= TimeScope|| Text= every 4 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 12 seconds
						SlotType= TimeScope|| Text= every at least 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-222:]
		text: the RCMTECHTERM_sailing_termination shall be moved up within at most 27 seconds for at least 22 seconds every 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be moved up within at most 27 seconds for at least 22 seconds every 15 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be moved up within at most 27 seconds for at least 22 seconds every 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= within at most 27 seconds
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= every 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-343:]
		text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true within 19 seconds every 21 seconds within 19 seconds , when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds , when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true within 19 seconds every 21 seconds within 19 seconds , when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds , when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true within 19 seconds every 21 seconds within 19 seconds when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error every at most 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within 19 seconds
						SlotType= TimeScope|| Text= within 19 seconds
						SlotType= TimeScope|| Text= every at most 8 seconds
						SlotType= TimeScope|| Text= every at most 8 seconds
						SlotType= TimeScope|| Text= every 21 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-464:]
		text: while the RCMTECHTERM_brake_pedal whose index is greater than 2 is RCMVAL_true for 3 seconds , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within 5 seconds for at most 17 seconds every at least 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_pedal whose index is greater than 2 is RCMVAL_true for 3 seconds , the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within 5 seconds for at most 17 seconds every at least 5 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_pedal whose index is greater than 2 is RCMVAL_true for 3 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within 5 seconds for at most 17 seconds every at least 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is greater than 2
						SlotType= TimeScope|| Text= for 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= within 5 seconds
						SlotType= TimeScope|| Text= every at least 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 3
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 3
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_pedal whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 3
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 3
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-452:]
		text: when the RCMTECHTERM_sailing_termination that is less than 1 is greater than the RCMTECHTERM_sailing_request for at least 19 seconds every at most 9 seconds , after the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state for at least 24 seconds , after the RCMTECHTERM_defined_position that is less than 9 is above the RCMTECHTERM_brake_pedal , if the RCMTECHTERM_standstill_request_flag that is 3 is above the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_termination that is less than 1 is greater than the RCMTECHTERM_sailing_request for at least 19 seconds every at most 9 seconds , after the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state for at least 24 seconds , after the RCMTECHTERM_defined_position that is less than 9 is above the RCMTECHTERM_brake_pedal , if the RCMTECHTERM_standstill_request_flag that is 3 is above the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_termination that is less than 1 is greater than the RCMTECHTERM_sailing_request for at least 19 seconds every at most 9 seconds
					[2]: after the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state for at least 24 seconds
					[3]: after the RCMTECHTERM_defined_position that is less than 9 is above the RCMTECHTERM_brake_pedal
					[4]: if the RCMTECHTERM_standstill_request_flag that is 3 is above the RCMTECHTERM_steering_wheel_angle
					[5]: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 1
						SlotType= TimeScope|| Text= for at least 19 seconds
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at least 24 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is less than 9
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is 3
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 24
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 24
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_defined_position is above the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_defined_position
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 9
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-93:]
		text: if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds , if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_standstill_request_flag for at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds , if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_standstill_request_flag for at most 17 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds
					[2]: if the RCMTECHTERM_sailing_termination that is 8 equals RCMVAL_false within at most 13 seconds
					[3]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_standstill_request_flag for at most 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is 8
						SlotType= TimeScope|| Text= within at most 13 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is 8
						SlotType= TimeScope|| Text= within at most 13 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= for at most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-81:]
		text: while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within 11 seconds , when the RCMTECHTERM_transmission_error that is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 14 seconds every 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within 11 seconds , when the RCMTECHTERM_transmission_error that is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 14 seconds every 27 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					[2]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position within 11 seconds when the RCMTECHTERM_transmission_error that is less than 5 is greater than the RCMTECHTERM_sailing_inhibitor for at least 14 seconds every 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 5
						SlotType= TimeScope|| Text= for at least 14 seconds
						SlotType= TimeScope|| Text= within 11 seconds
						SlotType= TimeScope|| Text= every 27 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-149:]
		text: while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error , while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error , if the RCMTECHTERM_nosailing_requests that is above 5 equals RCMVAL_true within at least 27 seconds for at least 9 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc every at most 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error , while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error , if the RCMTECHTERM_nosailing_requests that is above 5 equals RCMVAL_true within at least 27 seconds for at least 9 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc every at most 6 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error
					[2]: while the RCMTECHTERM_sailing_termination that is less than 6 exceeds the RCMTECHTERM_transmission_error
					[3]: if the RCMTECHTERM_nosailing_requests that is above 5 equals RCMVAL_true within at least 27 seconds for at least 9 seconds
					[4]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 6
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 6
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 5
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= for at least 9 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_sailing_termination
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 6
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_transmission_error
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_sailing_termination
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 6
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-258:]
		text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 14 seconds , while the RCMTECHTERM_defined_position that is 0 is RCMVAL_true , after the RCMTECHTERM_quality_signal is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 14 seconds , while the RCMTECHTERM_defined_position that is 0 is RCMVAL_true , after the RCMTECHTERM_quality_signal is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint every 14 seconds
					[2]: while the RCMTECHTERM_defined_position that is 0 is RCMVAL_true
					[3]: after the RCMTECHTERM_quality_signal is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= every 14 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_quality_signal is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_quality_signal is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-379:]
		text: before the RCMTECHTERM_idc_inhibitor whose index is less than 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag every at most 20 seconds , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag every at most 20 seconds , if the RCMTECHTERM_standstill_request_flag that is above 1 is above the RCMTECHTERM_transmission_error within at most 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_idc_inhibitor whose index is less than 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag every at most 20 seconds , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag every at most 20 seconds , if the RCMTECHTERM_standstill_request_flag that is above 1 is above the RCMTECHTERM_transmission_error within at most 25 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_idc_inhibitor whose index is less than 3 equals RCMVAL_true
					[2]: the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag seconds the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag every at most 20 seconds
					[3]: if the RCMTECHTERM_standstill_request_flag that is above 1 is above the RCMTECHTERM_transmission_error within at most 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is less than 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag seconds
						SlotType= TimeScope|| Text= every at  most 20 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is above 1
						SlotType= TimeScope|| Text= within at  most 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_standstill_request_flag seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index is less than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-488:]
		text: when the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at least 28 seconds , the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_transmission_error within at most 15 seconds within at most 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at least 28 seconds , the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_transmission_error within at most 15 seconds within at most 15 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_defined_position that exceeds 2 is RCMVAL_true for at least 28 seconds
					[2]: the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_transmission_error within at most 15 seconds within at most 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that exceeds 2
						SlotType= TimeScope|| Text= for at least 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= within at most 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-137:]
		text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_lsc for at most 17 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that exceeds 9 is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_lsc for at most 17 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that exceeds 9 is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every at most 19 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_lsc for at most 17 seconds when the RCMTECHTERM_vehicle_speed_setpoint that exceeds 9 is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint is the RCMTECHTERM_brake_pedal every
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that exceeds 9
						SlotType= TimeScope|| Text= for at  most 17 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_lsc
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint is the RCMTECHTERM_brake_pedal every
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal every
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-476:]
		text: the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds , if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at least 13 seconds within 18 seconds , when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_engine_error for 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds , if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at least 13 seconds within 18 seconds , when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_engine_error for 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds the RCMTECHTERM_standstill_request_flag shall be moved up every at least 29 seconds
					[2]: if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor for at least 13 seconds within 18 seconds when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_engine_error for 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= every at  least 29 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for 17 seconds
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= for at  least 13 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-125:]
		text: the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds , the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_brake_fault_state for at most 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds , the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_brake_fault_state for at most 13 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds the RCMTECHTERM_transmission_error shall be moved up for 21 seconds within at most 28 seconds every at most 3 seconds when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_brake_fault_state for at most 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 21 seconds
						SlotType= TimeScope|| Text= for 21 seconds
						SlotType= TimeScope|| Text= every at  most 3 seconds
						SlotType= TimeScope|| Text= for at  most 13 seconds
						SlotType= TimeScope|| Text= within at  most 28 seconds
						SlotType= TimeScope|| Text= within at  most 28 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-234:]
		text: before the RCMTECHTERM_nosailing_requests that is above 6 is less than the RCMTECHTERM_brake_pedal , when the RCMTECHTERM_quality_signal that is less than 7 equals RCMVAL_true , before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_defined_position for 5 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_lsc for 6 seconds every at most 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_nosailing_requests that is above 6 is less than the RCMTECHTERM_brake_pedal , when the RCMTECHTERM_quality_signal that is less than 7 equals RCMVAL_true , before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_defined_position for 5 seconds , if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_lsc for 6 seconds every at most 8 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_nosailing_requests that is above 6 is less than the RCMTECHTERM_brake_pedal
					[2]: when the RCMTECHTERM_quality_signal that is less than 7 before the RCMTECHTERM_brake_pedal that is above 7 is less than the RCMTECHTERM_defined_position for 5 seconds
					[3]: equals RCMVAL_true
					[4]: if the RCMTECHTERM_quality_signal whose index is less than 0 is greater than the RCMTECHTERM_standstill_request_flag
					[5]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_lsc for 6 seconds every at most 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 6
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is less than 7 before the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is above 7
						SlotType= TimeScope|| Text= for 5 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= equals RCMVAL_true
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 0
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= every at most 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is less than 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_quality_signal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7 before the RCMTECHTERM_brake_pedal
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_True
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-355:]
		text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_standstill_request_flag within at most 5 seconds every 12 seconds for 16 seconds , when the RCMTECHTERM_sailing_termination that is less than 8 is RCMVAL_true for at most 8 seconds , if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for at most 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_standstill_request_flag within at most 5 seconds every 12 seconds for 16 seconds , when the RCMTECHTERM_sailing_termination that is less than 8 is RCMVAL_true for at most 8 seconds , if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for at most 11 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_standstill_request_flag within at most 5 seconds every 12 seconds for 16 seconds when the RCMTECHTERM_sailing_termination that is less than 8 is RCMVAL_true for at most 8 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for at most 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is less than 8
						SlotType= TimeScope|| Text= within at most 5 seconds
						SlotType= TimeScope|| Text= for at most 8 seconds
						SlotType= TimeScope|| Text= for 16 seconds
						SlotType= TimeScope|| Text= every 12 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_standstill_request_flag
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-113:]
		text: the RCMTECHTERM_sailing_request shall be moved up within 21 seconds within 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be moved up within 21 seconds within 21 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be moved up within 21 seconds within 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= within 21 seconds
						SlotType= TimeScope|| Text= within 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-246:]
		text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at most 21 seconds within at most 22 seconds , when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_idc_inhibitor , after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_inhibitor , after the RCMTECHTERM_sailing_request whose index equals 0 is less than the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at most 21 seconds within at most 22 seconds , when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_idc_inhibitor , after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_inhibitor , after the RCMTECHTERM_sailing_request whose index equals 0 is less than the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true every at most 21 seconds within at most 22 seconds when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_idc_inhibitor
					[2]: after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_inhibitor
					[3]: after the RCMTECHTERM_sailing_request whose index equals 0 is less than the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at most 22 seconds
						SlotType= TimeScope|| Text= every at most 21 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 0
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index equals 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-367:]
		text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_brake_pedal every at most 10 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor that is above 1 is greater than the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_brake_pedal every at most 10 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor that is above 1 is greater than the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_brake_pedal every at most 10 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_quality_factor that is above 1 is greater than the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every at most 10 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is above 1
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-112:]
		text: if the RCMTECHTERM_brake_fault_state whose index is 6 equals RCMVAL_false for at most 20 seconds within 3 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_transmission_error every at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state whose index is 6 equals RCMVAL_false for at most 20 seconds within 3 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_transmission_error every at least 9 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state whose index is 6 equals RCMVAL_false for at most 20 seconds within 3 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_transmission_error seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is 6
						SlotType= TimeScope|| Text= for at most 20 seconds
						SlotType= TimeScope|| Text= within 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_transmission_error seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_transmission_error seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-221:]
		text: when the RCMTECHTERM_brake_fault_state whose index is greater than 8 is less than the RCMTECHTERM_brake_pedal for 28 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor for at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_fault_state whose index is greater than 8 is less than the RCMTECHTERM_brake_pedal for 28 seconds , the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor for at least 10 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_fault_state whose index is greater than 8 is less than the RCMTECHTERM_brake_pedal for 28 seconds
					[2]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor for at least 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is greater than 8
						SlotType= TimeScope|| Text= for 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at least 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_fault_state whose index is greater than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-342:]
		text: when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for at least 18 seconds every 23 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_transmission_error for at least 20 seconds within 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for at least 18 seconds every 23 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_transmission_error for at least 20 seconds within 15 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request for at least 18 seconds every 23 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_transmission_error for at least 20 seconds within 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at least 18 seconds
						SlotType= TimeScope|| Text= every 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at least 20 seconds
						SlotType= TimeScope|| Text= within 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-451:]
		text: when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_steering_wheel_angle for at most 24 seconds , before the RCMTECHTERM_idc_inhibitor that equals 0 exceeds the RCMTECHTERM_sailing_request for 17 seconds , before the RCMTECHTERM_nosailing_requests whose index equals 4 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_steering_wheel_angle for at most 24 seconds , before the RCMTECHTERM_idc_inhibitor that equals 0 exceeds the RCMTECHTERM_sailing_request for 17 seconds , before the RCMTECHTERM_nosailing_requests whose index equals 4 is less than the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_steering_wheel_angle for at most 24 seconds
					[2]: before the RCMTECHTERM_idc_inhibitor that equals 0 exceeds the RCMTECHTERM_sailing_request for 17 seconds before the RCMTECHTERM_nosailing_requests whose index equals 4 is less than the RCMTECHTERM_sailing_inhibitor
					[3]: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= for at most 24 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that equals 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index equals 4
						SlotType= TimeScope|| Text= for 17 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-100:]
		text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_nosailing_requests every at least 24 seconds , after the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_nosailing_requests every at least 24 seconds , after the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_nosailing_requests every at least 24 seconds
					[2]: after the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= every at least 24 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is less than 6
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_fault_state
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-233:]
		text: when the RCMTECHTERM_lsc whose index is 8 is above the RCMTECHTERM_brake_pedal for 25 seconds , the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc whose index is 8 is above the RCMTECHTERM_brake_pedal for 25 seconds , the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 26 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc whose index is 8 is above the RCMTECHTERM_brake_pedal for 25 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is 8
						SlotType= TimeScope|| Text= for 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be moved up
						SlotType= TimeScope|| Text= within at most 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_lsc whose index is 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-354:]
		text: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_brake_pedal every 12 seconds for 20 seconds , when the RCMTECHTERM_sailing_request that is greater than 0 is above the RCMTECHTERM_vehicle_speed_quality_factor every 3 seconds , while the RCMTECHTERM_transmission_error whose index is 1 is greater than the RCMTECHTERM_brake_fault_state for 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_brake_pedal every 12 seconds for 20 seconds , when the RCMTECHTERM_sailing_request that is greater than 0 is above the RCMTECHTERM_vehicle_speed_quality_factor every 3 seconds , while the RCMTECHTERM_transmission_error whose index is 1 is greater than the RCMTECHTERM_brake_fault_state for 6 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_brake_pedal every 12 seconds for 20 seconds when the RCMTECHTERM_sailing_request that is greater than 0 is above the RCMTECHTERM_vehicle_speed_quality_factor every 3 seconds
					[2]: while the RCMTECHTERM_transmission_error whose index is 1 is greater than the RCMTECHTERM_brake_fault_state for 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is greater than 0
						SlotType= TimeScope|| Text= for 20 seconds
						SlotType= TimeScope|| Text= every 12 seconds
						SlotType= TimeScope|| Text= every 3 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_brake_pedal
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is 1
						SlotType= TimeScope|| Text= for 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is above the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_request
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_transmission_error whose index is 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 6
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 6
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_transmission_error whose index is 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 6
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 6
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-475:]
		text: if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_engine_error for 25 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_engine_error for 25 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_engine_error for 25 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true every 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every 21 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-330:]
		text: before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_steering_wheel_angle that is above 8 is greater than the RCMTECHTERM_nosailing_requests for at most 9 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_steering_wheel_angle that is above 8 is greater than the RCMTECHTERM_nosailing_requests for at most 9 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 18 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: before the RCMTECHTERM_steering_wheel_angle that is above 8 is greater than the RCMTECHTERM_nosailing_requests for at most 9 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be moved up every 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is above 8
						SlotType= TimeScope|| Text= for at most 9 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= every 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_steering_wheel_angle
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 9
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 9
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-463:]
		text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every at most 26 seconds , after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at least 13 seconds , when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every at most 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every at most 26 seconds , after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at least 13 seconds , when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every at most 6 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position every at most 26 seconds
					[2]: after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at least 13 seconds when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_pedal for at most 6 seconds every at most 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every at most 26 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 13 seconds
						SlotType= TimeScope|| Text= for at most 6 seconds
						SlotType= TimeScope|| Text= every at most 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be sent to the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-96:]
		text: when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , the RCMTECHTERM_lsc shall be moved up every 7 seconds , while the RCMTECHTERM_sailing_request that is 6 equals RCMVAL_true for at least 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , the RCMTECHTERM_lsc shall be moved up every 7 seconds , while the RCMTECHTERM_sailing_request that is 6 equals RCMVAL_true for at least 14 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					[2]: the RCMTECHTERM_lsc shall be moved up every 7 seconds
					[3]: while the RCMTECHTERM_sailing_request that is 6 equals RCMVAL_true for at least 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
						SlotType= TimeScope|| Text= every 7 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 6
						SlotType= TimeScope|| Text= for at least 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_request equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 14
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 14
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_request equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 14
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 14
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-84:]
		text: while the RCMTECHTERM_lsc whose index equals 0 is above the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 19 seconds every 8 seconds , if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds , if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc whose index equals 0 is above the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 19 seconds every 8 seconds , if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds , if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc whose index equals 0 is above the RCMTECHTERM_idc_inhibitor
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within 19 seconds
					[3]: if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds
					[4]: if the RCMTECHTERM_transmission_error whose index is greater than 5 is less than the RCMTECHTERM_standstill_request_flag within at most 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index equals 0
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is greater than 5
						SlotType= TimeScope|| Text= within at most 29 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is greater than 5
						SlotType= TimeScope|| Text= within at most 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_transmission_error whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-72:]
		text: when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds , when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within at most 23 seconds every at least 29 seconds , if the RCMTECHTERM_standstill_request_flag that exceeds 1 is above the RCMTECHTERM_sailing_request within at most 5 seconds for at most 12 seconds , while the RCMTECHTERM_nosailing_requests whose index exceeds 3 is RCMVAL_true for at least 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds , when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within at most 23 seconds every at least 29 seconds , if the RCMTECHTERM_standstill_request_flag that exceeds 1 is above the RCMTECHTERM_sailing_request within at most 5 seconds for at most 12 seconds , while the RCMTECHTERM_nosailing_requests whose index exceeds 3 is RCMVAL_true for at least 3 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds when the RCMTECHTERM_transmission_error that equals 4 is greater than the RCMTECHTERM_sailing_request every at least 20 seconds for at least 3 seconds
					[2]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within at most 23 seconds every at least 29 seconds
					[3]: if the RCMTECHTERM_standstill_request_flag that exceeds 1 is above the RCMTECHTERM_sailing_request within at most 5 seconds for at most 12 seconds
					[4]: while the RCMTECHTERM_nosailing_requests whose index exceeds 3 is RCMVAL_true for at least 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 4
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 4
						SlotType= TimeScope|| Text= for at least 3 seconds
						SlotType= TimeScope|| Text= for at least 3 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 23 seconds
						SlotType= TimeScope|| Text= every at least 29 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that exceeds 1
						SlotType= TimeScope|| Text= within at most 5 seconds
						SlotType= TimeScope|| Text= for at most 12 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 3
						SlotType= TimeScope|| Text= for at least 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_nosailing_requests is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index exceeds 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 3
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 3
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_nosailing_requests is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index exceeds 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 3
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 3
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-60:]
		text: if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_idc_inhibitor every at least 2 seconds , if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_idc_inhibitor every at least 2 seconds , if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint
					[2]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_idc_inhibitor every at least 2 seconds
					[3]: if the RCMTECHTERM_sailing_termination that is greater than 1 exceeds the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= every at least 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-269:]
		text: before the RCMTECHTERM_defined_position whose index equals 0 is above the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_defined_position that is less than 5 is above the RCMTECHTERM_quality_signal within 5 seconds , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_defined_position whose index equals 0 is above the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_defined_position that is less than 5 is above the RCMTECHTERM_quality_signal within 5 seconds , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within at least 10 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_defined_position whose index equals 0 is above the RCMTECHTERM_sailing_termination
					[2]: if the RCMTECHTERM_defined_position that is less than 5 is above the RCMTECHTERM_quality_signal within 5 seconds
					[3]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor within at least 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index equals 0
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is less than 5
						SlotType= TimeScope|| Text= within 5 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at least 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is above the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_defined_position whose index equals 0
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-499:]
		text: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_termination for at least 23 seconds , if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint , if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_termination for at least 23 seconds , if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint , if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_quality_signal
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_termination for at least 23 seconds
					[3]: if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint
					[4]: if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_quality_signal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for at least 23 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-148:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc within 14 seconds every at most 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within 14 seconds
						SlotType= TimeScope|| Text= within 14 seconds
						SlotType= TimeScope|| Text= every at  most 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-487:]
		text: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds , when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal every at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds , the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds , when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal every at least 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds the RCMTECHTERM_sailing_request shall be set to RCMVAL_true every 20 seconds when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal every at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= every at  least 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be set RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be set RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-136:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_brake_pedal every 27 seconds for at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_brake_pedal every 27 seconds for at least 10 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_brake_pedal every 27 seconds for at least 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 10 seconds
						SlotType= TimeScope|| Text= every 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-245:]
		text: before the RCMTECHTERM_quality_signal whose index is greater than 1 exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal whose index is greater than 1 exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal whose index is greater than 1 exceeds the RCMTECHTERM_sailing_inhibitor
					[2]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_brake_pedal
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index is greater than 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-366:]
		text: after the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_brake_pedal for at least 18 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_request for 25 seconds every 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_brake_pedal for at least 18 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_request for 25 seconds every 15 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_brake_pedal for at least 18 seconds
					[2]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_request for 25 seconds every 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for at least 18 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for 25 seconds
						SlotType= TimeScope|| Text= every 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 18
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 18
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-124:]
		text: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_sailing_termination every at least 9 seconds for at most 2 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds , before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor , if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_sailing_termination every at least 9 seconds for at most 2 seconds , if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds , before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor , if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_sailing_termination every at least 9 seconds for at most 2 seconds
					[2]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds
					[3]: before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
					[4]: if the RCMTECHTERM_sailing_termination equals RCMVAL_true for at most 16 seconds within at least 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for at most 2 seconds
						SlotType= TimeScope|| Text= every at least 9 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 16 seconds
						SlotType= TimeScope|| Text= within at least 17 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 16 seconds
						SlotType= TimeScope|| Text= within at least 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-257:]
		text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor within at least 5 seconds every 28 seconds , if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_transmission_error for 27 seconds within at most 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor within at least 5 seconds every 28 seconds , if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_transmission_error for 27 seconds within at most 24 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor within at least 5 seconds every 28 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_transmission_error for 27 seconds within at most 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at least 5 seconds
						SlotType= TimeScope|| Text= every 28 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at most 24 seconds
						SlotType= TimeScope|| Text= for 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-378:]
		text: while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds , if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds , if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 28 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle for at least 25 seconds within 7 seconds every 7 seconds
					[3]: if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true for at most 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= every 7 seconds
						SlotType= TimeScope|| Text= within 7 seconds
						SlotType= TimeScope|| Text= within 7 seconds
						SlotType= TimeScope|| Text= for at  least 25 seconds
						SlotType= TimeScope|| Text= for at  least 25 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= TimeScope|| Text= for at  most 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-123:]
		text: when the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds , if the RCMTECHTERM_quality_signal whose index equals 4 is less than the RCMTECHTERM_engine_error within at least 10 seconds for at least 3 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds , before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state for at least 27 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds , if the RCMTECHTERM_quality_signal whose index equals 4 is less than the RCMTECHTERM_engine_error within at least 10 seconds for at least 3 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds , before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state for at least 27 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_setpoint whose index is 0 exceeds the RCMTECHTERM_steering_wheel_angle for 14 seconds
					[2]: if the RCMTECHTERM_quality_signal whose index equals 4 is less than the RCMTECHTERM_engine_error within at least 10 seconds for at least 3 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds
					[4]: before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state for at least 27 seconds
					[5]: the RCMTECHTERM_idc_inhibitor shall be moved up every 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is 0
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index equals 4
						SlotType= TimeScope|| Text= within at least 10 seconds
						SlotType= TimeScope|| Text= for at least 3 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= every 19 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at least 27 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= every 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index equals 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 27
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 27
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-232:]
		text: before the RCMTECHTERM_sailing_termination that is above 2 equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 7 is above the RCMTECHTERM_sailing_termination within 24 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination that is above 2 equals RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 7 is above the RCMTECHTERM_sailing_termination within 24 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination that is above 2 equals RCMVAL_true
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint that exceeds 7 is above the RCMTECHTERM_sailing_termination within 24 seconds
					[4]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every 13 seconds for 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is above 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 27 seconds
						SlotType= TimeScope|| Text= every 13 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that exceeds 7
						SlotType= TimeScope|| Text= within 24 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 27 seconds
						SlotType= TimeScope|| Text= every 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-353:]
		text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at most 18 seconds within 2 seconds , before the RCMTECHTERM_lsc that is 4 is greater than the RCMTECHTERM_defined_position for at least 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at most 18 seconds within 2 seconds , before the RCMTECHTERM_lsc that is 4 is greater than the RCMTECHTERM_defined_position for at least 6 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true every at most 18 seconds within 2 seconds
					[2]: before the RCMTECHTERM_lsc that is 4 is greater than the RCMTECHTERM_defined_position for at least 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= every at most 18 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is 4
						SlotType= TimeScope|| Text= for at least 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is greater than the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 6
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 6
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-462:]
		text: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for 14 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up for 13 seconds within at most 19 seconds every at most 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for 14 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up for 13 seconds within at most 19 seconds every at most 24 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for 14 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be moved up for 13 seconds within at most 19 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= for 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-111:]
		text: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state for 26 seconds every at least 8 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 7 is greater than the RCMTECHTERM_engine_error for 22 seconds , if the RCMTECHTERM_defined_position that exceeds 3 equals RCMVAL_true within at least 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state for 26 seconds every at least 8 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 7 is greater than the RCMTECHTERM_engine_error for 22 seconds , if the RCMTECHTERM_defined_position that exceeds 3 equals RCMVAL_true within at least 11 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state for 26 seconds every at least 8 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 7 is greater than the RCMTECHTERM_engine_error for 22 seconds
					[3]: if the RCMTECHTERM_defined_position that exceeds 3 equals RCMVAL_true within at least 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for 26 seconds
						SlotType= TimeScope|| Text= every at least 8 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is greater than 7
						SlotType= TimeScope|| Text= for 22 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that exceeds 3
						SlotType= TimeScope|| Text= within at least 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 22
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 22
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-244:]
		text: while the RCMTECHTERM_sailing_termination that equals 0 equals RCMVAL_true for at most 7 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 14 seconds for at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_sailing_termination that equals 0 equals RCMVAL_true for at most 7 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 14 seconds for at least 4 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_sailing_termination that equals 0 equals RCMVAL_true for at most 7 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 14 seconds for at least 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that equals 0
						SlotType= TimeScope|| Text= for at most 7 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 14 seconds
						SlotType= TimeScope|| Text= for at least 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 7
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 7
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 7
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 7
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-365:]
		text: if the RCMTECHTERM_sailing_termination that exceeds 5 is greater than the RCMTECHTERM_engine_error within 16 seconds , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor within 7 seconds every at least 12 seconds within 7 seconds , while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that exceeds 5 is greater than the RCMTECHTERM_engine_error within 16 seconds , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor within 7 seconds every at least 12 seconds within 7 seconds , while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that exceeds 5 is greater than the RCMTECHTERM_engine_error within 16 seconds
					[2]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor within 7 seconds every at least 12 seconds within 7 seconds
					[3]: while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that exceeds 5
						SlotType= TimeScope|| Text= within 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within 7 seconds
						SlotType= TimeScope|| Text= within 7 seconds
						SlotType= TimeScope|| Text= every at least 12 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-450:]
		text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_lsc every 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_lsc every 29 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_lsc every 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= every 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-486:]
		text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_engine_error for at most 17 seconds within 6 seconds , before the RCMTECHTERM_brake_pedal that is less than 1 is above the RCMTECHTERM_lsc for at least 2 seconds , if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds , if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_engine_error for at most 17 seconds within 6 seconds , before the RCMTECHTERM_brake_pedal that is less than 1 is above the RCMTECHTERM_lsc for at least 2 seconds , if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds , if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_engine_error for at most 17 seconds within 6 seconds
					[2]: before the RCMTECHTERM_brake_pedal that is less than 1 is above the RCMTECHTERM_lsc for at least 2 seconds
					[3]: if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds
					[4]: if the RCMTECHTERM_lsc that is above 8 is above the RCMTECHTERM_quality_signal within at most 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= within 6 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is less than 1
						SlotType= TimeScope|| Text= for at least 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 8
						SlotType= TimeScope|| Text= within at most 19 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 8
						SlotType= TimeScope|| Text= within at most 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is above the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-220:]
		text: after the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_vehicle_speed_quality_factor , when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_transmission_error every 11 seconds for 26 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request for at least 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_vehicle_speed_quality_factor , when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_transmission_error every 11 seconds for 26 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request for at least 3 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_transmission_error every 11 seconds for 26 seconds
					[3]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request for at least 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for 26 seconds
						SlotType= TimeScope|| Text= every 11 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at least 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-341:]
		text: when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for 29 seconds , after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_request within 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for 29 seconds , after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_request within 24 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true for 29 seconds
					[2]: after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_idc_inhibitor
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_request within 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= TimeScope|| Text= for 29 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_idc_inhibitor
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within 24 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-474:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 24 seconds every at least 2 seconds , when the RCMTECHTERM_sailing_request that is less than 4 is less than the RCMTECHTERM_nosailing_requests for 22 seconds every at least 6 seconds , after the RCMTECHTERM_brake_fault_state whose index is above 7 equals RCMVAL_true for 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 24 seconds every at least 2 seconds , when the RCMTECHTERM_sailing_request that is less than 4 is less than the RCMTECHTERM_nosailing_requests for 22 seconds every at least 6 seconds , after the RCMTECHTERM_brake_fault_state whose index is above 7 equals RCMVAL_true for 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_inhibitor for at least 24 seconds every at least 2 seconds when the RCMTECHTERM_sailing_request that is less than 4 is less than the RCMTECHTERM_nosailing_requests for 22 seconds every at least 6 seconds
					[2]: after the RCMTECHTERM_brake_fault_state whose index is above 7 equals RCMVAL_true for 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is less than 4
						SlotType= TimeScope|| Text= for at least 24 seconds
						SlotType= TimeScope|| Text= for 22 seconds
						SlotType= TimeScope|| Text= every at least 2 seconds
						SlotType= TimeScope|| Text= every at least 6 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_inhibitor
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is above 7
						SlotType= TimeScope|| Text= for 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_request
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_fault_state equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_fault_state whose index is above 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 17
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 17
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-95:]
		text: before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_idc_inhibitor whose index is greater than 5 is less than the RCMTECHTERM_brake_pedal for at least 2 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for 17 seconds within 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_idc_inhibitor whose index is greater than 5 is less than the RCMTECHTERM_brake_pedal for at least 2 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for 17 seconds within 12 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint
					[2]: before the RCMTECHTERM_quality_signal whose index is greater than 1 is above the RCMTECHTERM_vehicle_speed_setpoint
					[3]: before the RCMTECHTERM_idc_inhibitor whose index is greater than 5 is less than the RCMTECHTERM_brake_pedal for at least 2 seconds
					[4]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for 17 seconds within 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 1
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 1
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is greater than 5
						SlotType= TimeScope|| Text= for at least 2 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 17 seconds
						SlotType= TimeScope|| Text= within 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index is greater than 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_vehicle_speed_setpoint
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is greater than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is greater than 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 2
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 2
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-83:]
		text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 9 is above the RCMTECHTERM_defined_position every at most 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 9 is above the RCMTECHTERM_defined_position every at most 18 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 9 is above the RCMTECHTERM_defined_position every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 9
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-71:]
		text: after the RCMTECHTERM_transmission_error that is less than 3 exceeds the RCMTECHTERM_sailing_termination , while the RCMTECHTERM_nosailing_requests whose index is 9 is less than the RCMTECHTERM_brake_pedal , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for at most 4 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for at most 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_transmission_error that is less than 3 exceeds the RCMTECHTERM_sailing_termination , while the RCMTECHTERM_nosailing_requests whose index is 9 is less than the RCMTECHTERM_brake_pedal , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for at most 4 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for at most 4 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_transmission_error that is less than 3 exceeds the RCMTECHTERM_sailing_termination
					[2]: while the RCMTECHTERM_nosailing_requests whose index is 9 is less than the RCMTECHTERM_brake_pedal
					[3]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 5 seconds within at least 6 seconds for
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 3
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is 9
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every at  most 5 seconds
						SlotType= TimeScope|| Text= within at  least 6 seconds
						SlotType= TimeScope|| Text= within at  least 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_nosailing_requests whose index is 9
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 9
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_brake_pedal
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_nosailing_requests whose index is 9
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 9
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_pedal
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-159:]
		text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_vehicle_speed_setpoint that is less than 1 exceeds the RCMTECHTERM_vehicle_speed_quality_factor every at most 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_vehicle_speed_setpoint that is less than 1 exceeds the RCMTECHTERM_vehicle_speed_quality_factor every at most 7 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_termination when the RCMTECHTERM_vehicle_speed_setpoint that is less than 1 exceeds the RCMTECHTERM_vehicle_speed_quality_factor every at most 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is less than 1
						SlotType= TimeScope|| Text= every at most 7 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-498:]
		text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true for at most 26 seconds within at least 10 seconds , when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_termination within at most 23 seconds , while the RCMTECHTERM_nosailing_requests whose index equals 0 is above the RCMTECHTERM_idc_inhibitor for 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true for at most 26 seconds within at least 10 seconds , when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_termination within at most 23 seconds , while the RCMTECHTERM_nosailing_requests whose index equals 0 is above the RCMTECHTERM_idc_inhibitor for 12 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true for at most 26 seconds within at least 10 seconds when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					[2]: if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_termination within at most 23 seconds
					[3]: while the RCMTECHTERM_nosailing_requests whose index equals 0 is above the RCMTECHTERM_idc_inhibitor for 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 26 seconds
						SlotType= TimeScope|| Text= within at least 10 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= within at most 23 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index equals 0
						SlotType= TimeScope|| Text= for 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 12
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 12
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index equals 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 12
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 12
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-147:]
		text: the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_request for at least 22 seconds every at most 16 seconds , while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_request for at least 22 seconds every at most 16 seconds , while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_request for at least 22 seconds every at most 16 seconds
					[2]: while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be turned to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-256:]
		text: after the RCMTECHTERM_nosailing_requests that equals 1 exceeds the RCMTECHTERM_quality_signal for 23 seconds , the RCMTECHTERM_defined_position shall be moved up every at most 8 seconds for 5 seconds , when the RCMTECHTERM_sailing_inhibitor that is above 1 is greater than the RCMTECHTERM_standstill_request_flag every at least 20 seconds for at most 27 seconds , before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_nosailing_requests that equals 1 exceeds the RCMTECHTERM_quality_signal for 23 seconds , the RCMTECHTERM_defined_position shall be moved up every at most 8 seconds for 5 seconds , when the RCMTECHTERM_sailing_inhibitor that is above 1 is greater than the RCMTECHTERM_standstill_request_flag every at least 20 seconds for at most 27 seconds , before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_nosailing_requests that equals 1 exceeds the RCMTECHTERM_quality_signal for 23 seconds the RCMTECHTERM_defined_position shall be moved up every at most 8 seconds for 5 seconds
					[2]: when the RCMTECHTERM_sailing_inhibitor that is above 1 is greater than the RCMTECHTERM_standstill_request_flag every at least 20 seconds for at most 27 seconds
					[3]: before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_quality_signal
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that equals 1
						SlotType= TimeScope|| Text= for 23 seconds
						SlotType= TimeScope|| Text= for 5 seconds
						SlotType= TimeScope|| Text= every at most 8 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 1
						SlotType= TimeScope|| Text= for at most 27 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at most 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 9
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 9
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-377:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error every 15 seconds within 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error every 15 seconds within 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error every 15 seconds within 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within 27 seconds
						SlotType= TimeScope|| Text= every 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-135:]
		text: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_lsc within 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_lsc within 14 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_lsc within 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-268:]
		text: before the RCMTECHTERM_idc_inhibitor whose index exceeds 1 is above the RCMTECHTERM_sailing_termination , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request , after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_idc_inhibitor whose index exceeds 1 is above the RCMTECHTERM_sailing_termination , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request , after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_idc_inhibitor whose index exceeds 1 is above the RCMTECHTERM_sailing_termination
					[2]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request
					[3]: after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 1
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_idc_inhibitor whose index exceeds 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-389:]
		text: if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error within at least 27 seconds within at least 27 seconds , after the RCMTECHTERM_brake_pedal whose index is greater than 2 exceeds the RCMTECHTERM_idc_inhibitor for at most 26 seconds , before the RCMTECHTERM_sailing_inhibitor whose index is 6 is less than the RCMTECHTERM_steering_wheel_angle .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error within at least 27 seconds within at least 27 seconds , after the RCMTECHTERM_brake_pedal whose index is greater than 2 exceeds the RCMTECHTERM_idc_inhibitor for at most 26 seconds , before the RCMTECHTERM_sailing_inhibitor whose index is 6 is less than the RCMTECHTERM_steering_wheel_angle .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_request
					[2]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error within at least 27 seconds within at least 27 seconds
					[3]: after the RCMTECHTERM_brake_pedal whose index is greater than 2 exceeds the RCMTECHTERM_idc_inhibitor for at most 26 seconds
					[4]: before the RCMTECHTERM_sailing_inhibitor whose index is 6 is less than the RCMTECHTERM_steering_wheel_angle
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_request
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= within at least 27 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is 6
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-134:]
		text: when the RCMTECHTERM_nosailing_requests equals RCMVAL_true , when the RCMTECHTERM_nosailing_requests equals RCMVAL_true , if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_sailing_inhibitor within 3 seconds every 23 seconds for at least 10 seconds , before the RCMTECHTERM_steering_wheel_angle that exceeds 3 is less than the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests equals RCMVAL_true , when the RCMTECHTERM_nosailing_requests equals RCMVAL_true , if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_sailing_inhibitor within 3 seconds every 23 seconds for at least 10 seconds , before the RCMTECHTERM_steering_wheel_angle that exceeds 3 is less than the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests equals RCMVAL_true
					[2]: when the RCMTECHTERM_nosailing_requests equals RCMVAL_true
					[3]: if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_lsc
					[4]: the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_sailing_inhibitor within 3 seconds every 23 seconds for at least 10 seconds
					[5]: before the RCMTECHTERM_steering_wheel_angle that exceeds 3 is less than the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests equals RCMVAL_true
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests equals RCMVAL_true
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_lsc
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at least 10 seconds
						SlotType= TimeScope|| Text= within 3 seconds
						SlotType= TimeScope|| Text= every 23 seconds
					C[5]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that exceeds 3
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-243:]
		text: before the RCMTECHTERM_standstill_request_flag that is above 2 equals RCMVAL_true , the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor every 19 seconds within at most 24 seconds for 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag that is above 2 equals RCMVAL_true , the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor every 19 seconds within at most 24 seconds for 13 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag that is above 2 equals RCMVAL_true
					[2]: the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor every 19 seconds within at most 24 seconds for 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is above 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within at most 24 seconds
						SlotType= TimeScope|| Text= for 13 seconds
						SlotType= TimeScope|| Text= every 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-364:]
		text: if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests within 9 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 6 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests within 9 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 6 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 6 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests within 9 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be moved up every at least 6 seconds the RCMTECHTERM_idc_inhibitor shall be moved up every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= every at  least 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-473:]
		text: before the RCMTECHTERM_transmission_error that exceeds 7 is above the RCMTECHTERM_nosailing_requests for 10 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state for at most 9 seconds within 18 seconds every at most 18 seconds , when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor for at least 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error that exceeds 7 is above the RCMTECHTERM_nosailing_requests for 10 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state for at most 9 seconds within 18 seconds every at most 18 seconds , when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor for at least 10 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error that exceeds 7 is above the RCMTECHTERM_nosailing_requests for 10 seconds
					[2]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state for at most 9 seconds within 18 seconds every at most 18 seconds when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor for at least 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that exceeds 7
						SlotType= TimeScope|| Text= for 10 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at most 9 seconds
						SlotType= TimeScope|| Text= for at least 10 seconds
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= every at most 18 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is above the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-122:]
		text: the RCMTECHTERM_defined_position shall be moved up within 4 seconds every 25 seconds for at least 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be moved up within 4 seconds every 25 seconds for at least 24 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be moved up within 4 seconds every 25 seconds for at least 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
						SlotType= TimeScope|| Text= for at least 24 seconds
						SlotType= TimeScope|| Text= within 4 seconds
						SlotType= TimeScope|| Text= every 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-255:]
		text: the RCMTECHTERM_lsc shall be set to RCMVAL_true , if the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_vehicle_speed_setpoint within 27 seconds , before the RCMTECHTERM_defined_position is RCMVAL_true , while the RCMTECHTERM_idc_inhibitor whose index is 0 is greater than the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be set to RCMVAL_true , if the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_vehicle_speed_setpoint within 27 seconds , before the RCMTECHTERM_defined_position is RCMVAL_true , while the RCMTECHTERM_idc_inhibitor whose index is 0 is greater than the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be set to RCMVAL_true
					[2]: if the RCMTECHTERM_standstill_request_flag whose index is less than 7 is above the RCMTECHTERM_vehicle_speed_setpoint within 27 seconds
					[3]: before the RCMTECHTERM_defined_position is RCMVAL_true
					[4]: while the RCMTECHTERM_idc_inhibitor whose index is 0 is greater than the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 7
						SlotType= TimeScope|| Text= within 27 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 0
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_sailing_termination
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-376:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds , before the RCMTECHTERM_transmission_error is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds , before the RCMTECHTERM_transmission_error is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error every 6 seconds for at least 17 seconds within 13 seconds
					[2]: before the RCMTECHTERM_transmission_error is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= every 6 seconds
						SlotType= TimeScope|| Text= within 13 seconds
						SlotType= TimeScope|| Text= within 13 seconds
						SlotType= TimeScope|| Text= for at  least 17 seconds
						SlotType= TimeScope|| Text= for at  least 17 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-461:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 1 is less than the RCMTECHTERM_transmission_error within at most 12 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 1 is less than the RCMTECHTERM_transmission_error within at most 12 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 1 is less than the RCMTECHTERM_transmission_error within at most 12 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 1
						SlotType= TimeScope|| Text= within at  most 12 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is less than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-110:]
		text: after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at most 9 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 7 seconds within at least 16 seconds , when the RCMTECHTERM_nosailing_requests equals RCMVAL_true every at least 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at most 9 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 7 seconds within at least 16 seconds , when the RCMTECHTERM_nosailing_requests equals RCMVAL_true every at least 14 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true for at most 9 seconds
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true for at most 7 seconds within at least 16 seconds when the RCMTECHTERM_nosailing_requests equals
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 9 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests equals
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= within at least 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 9
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 9
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-340:]
		text: if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds , before the RCMTECHTERM_sailing_request that is 7 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be moved up within at least 24 seconds , if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds , before the RCMTECHTERM_sailing_request that is 7 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be moved up within at least 24 seconds , if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds
					[2]: before the RCMTECHTERM_sailing_request that is 7 is RCMVAL_true
					[3]: the RCMTECHTERM_quality_signal shall be moved up within at least 24 seconds
					[4]: if the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is less than the RCMTECHTERM_quality_signal within at least 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 4
						SlotType= TimeScope|| Text= within at least 18 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 7
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
						SlotType= TimeScope|| Text= within at least 24 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 4
						SlotType= TimeScope|| Text= within at least 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is greater than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_request
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-497:]
		text: if the RCMTECHTERM_sailing_request equals RCMVAL_true , after the RCMTECHTERM_quality_signal equals RCMVAL_true for 6 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 10 seconds within at least 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_request equals RCMVAL_true , after the RCMTECHTERM_quality_signal equals RCMVAL_true for 6 seconds , the RCMTECHTERM_idc_inhibitor shall be moved up every at least 10 seconds within at least 29 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_request equals RCMVAL_true
					[2]: after the RCMTECHTERM_quality_signal equals RCMVAL_true for 6 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be moved up every at least 10 seconds within at least 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request equals RCMVAL_true
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be moved up
						SlotType= TimeScope|| Text= within at least 29 seconds
						SlotType= TimeScope|| Text= every at least 10 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_quality_signal equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 6
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 6
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-231:]
		text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 2 seconds every 20 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that is 5 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 2 seconds every 20 seconds , when the RCMTECHTERM_vehicle_speed_setpoint that is 5 is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within at most 2 seconds every 20 seconds when the RCMTECHTERM_vehicle_speed_setpoint that is 5 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is 5
						SlotType= TimeScope|| Text= within at most 2 seconds
						SlotType= TimeScope|| Text= every 20 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-352:]
		text: before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor , before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor , when the RCMTECHTERM_engine_error that is greater than 6 is above the RCMTECHTERM_lsc every 26 seconds for at most 7 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_sailing_inhibitor every 8 seconds within 10 seconds for 24 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor , before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor , when the RCMTECHTERM_engine_error that is greater than 6 is above the RCMTECHTERM_lsc every 26 seconds for at most 7 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_sailing_inhibitor every 8 seconds within 10 seconds for 24 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
					[2]: before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
					[3]: when the RCMTECHTERM_engine_error that is greater than 6 is above the RCMTECHTERM_lsc every 26 seconds for at most 7 seconds
					[4]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_sailing_inhibitor every 8 seconds within 10 seconds for 24 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is greater than 6
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= every 26 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within 10 seconds
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= every 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is above the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_engine_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-485:]
		text: before the RCMTECHTERM_transmission_error whose index exceeds 9 exceeds the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_termination for at most 3 seconds every 25 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_transmission_error within 25 seconds within 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error whose index exceeds 9 exceeds the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_termination for at most 3 seconds every 25 seconds , the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_transmission_error within 25 seconds within 25 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error whose index exceeds 9 exceeds the RCMTECHTERM_steering_wheel_angle when the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_termination for at most 3 seconds every 25 seconds
					[2]: the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_transmission_error within 25 seconds within 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_steering_wheel_angle
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index exceeds 9
						SlotType= TimeScope|| Text= for at most 3 seconds
						SlotType= TimeScope|| Text= every 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= within 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-98:]
		text: after the RCMTECHTERM_sailing_termination that is greater than 3 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be moved up for 15 seconds within at least 22 seconds , while the RCMTECHTERM_transmission_error whose index is less than 5 is less than the RCMTECHTERM_idc_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_termination that is greater than 3 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be moved up for 15 seconds within at least 22 seconds , while the RCMTECHTERM_transmission_error whose index is less than 5 is less than the RCMTECHTERM_idc_inhibitor .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_termination that is greater than 3 is RCMVAL_true
					[2]: the RCMTECHTERM_sailing_inhibitor shall be moved up for 15 seconds within at least 22 seconds
					[3]: while the RCMTECHTERM_transmission_error whose index is less than 5 is less than the RCMTECHTERM_idc_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
						SlotType= TimeScope|| Text= within at least 22 seconds
						SlotType= TimeScope|| Text= for 15 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index is less than 5
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_transmission_error whose index is less than 5
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 5
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = the RCMTECHTERM_transmission_error whose index is less than 5
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: index
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 5
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-86:]
		text: the RCMTECHTERM_sailing_termination shall be moved up , before the RCMTECHTERM_steering_wheel_angle that is above 2 equals RCMVAL_true for at most 2 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc for at most 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be moved up , before the RCMTECHTERM_steering_wheel_angle that is above 2 equals RCMVAL_true for at most 2 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc for at most 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be moved up
					[2]: before the RCMTECHTERM_steering_wheel_angle that is above 2 equals RCMVAL_true for at most 2 seconds
					[3]: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2 is above the RCMTECHTERM_lsc for at most 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
						SlotType= TimeScope|| Text= for at most 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-74:]
		text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at least 15 seconds within at least 15 seconds , before the RCMTECHTERM_brake_fault_state whose index is greater than 9 is less than the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at least 15 seconds within at least 15 seconds , before the RCMTECHTERM_brake_fault_state whose index is greater than 9 is less than the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at least 15 seconds within at least 15 seconds
					[2]: before the RCMTECHTERM_brake_fault_state whose index is greater than 9 is less than the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 15 seconds
						SlotType= TimeScope|| Text= within at least 15 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is greater than 9
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_fault_state whose index is greater than 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-62:]
		text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_vehicle_speed_setpoint for at least 3 seconds , while the RCMTECHTERM_standstill_request_flag whose index is above 2 is RCMVAL_true for at least 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_vehicle_speed_setpoint for at least 3 seconds , while the RCMTECHTERM_standstill_request_flag whose index is above 2 is RCMVAL_true for at least 28 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_vehicle_speed_setpoint for at least 3 seconds
					[2]: while the RCMTECHTERM_standstill_request_flag whose index is above 2 is RCMVAL_true for at least 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for at least 3 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is above 2
						SlotType= TimeScope|| Text= for at least 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_standstill_request_flag is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_standstill_request_flag whose index is above 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_standstill_request_flag is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_standstill_request_flag whose index is above 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 28
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 28
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-50:]
		text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , after the RCMTECHTERM_sailing_inhibitor that exceeds 0 equals RCMVAL_true for at least 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor , after the RCMTECHTERM_sailing_inhibitor that exceeds 0 equals RCMVAL_true for at least 7 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
					[2]: after the RCMTECHTERM_sailing_inhibitor that exceeds 0 equals RCMVAL_true for at least 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that exceeds 0
						SlotType= TimeScope|| Text= for at  least 7 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 7
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 7
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-158:]
		text: before the RCMTECHTERM_transmission_error whose index exceeds 1 is RCMVAL_true for at most 17 seconds , when the RCMTECHTERM_engine_error whose index is above 0 equals RCMVAL_true for at least 7 seconds every at least 4 seconds , before the RCMTECHTERM_vehicle_speed_setpoint that is 6 is RCMVAL_true , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_engine_error , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc within at least 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error whose index exceeds 1 is RCMVAL_true for at most 17 seconds , when the RCMTECHTERM_engine_error whose index is above 0 equals RCMVAL_true for at least 7 seconds every at least 4 seconds , before the RCMTECHTERM_vehicle_speed_setpoint that is 6 is RCMVAL_true , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_engine_error , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc within at least 11 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error whose index exceeds 1 is RCMVAL_true for at most 17 seconds when the RCMTECHTERM_engine_error whose index is above 0 equals RCMVAL_true for at least 7 seconds every at least 4 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint that is 6 is RCMVAL_true
					[3]: if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_engine_error
					[4]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc within at least 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is RCMVAL_true
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index exceeds 1
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is above 0
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= for at least 7 seconds
						SlotType= TimeScope|| Text= every at least 4 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is 6
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_engine_error
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within at least 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is above 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_vehicle_speed_setpoint is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_setpoint
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_vehicle_speed_setpoint
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-267:]
		text: the RCMTECHTERM_sailing_termination shall be moved up within at least 10 seconds every at most 20 seconds within at least 10 seconds , if the RCMTECHTERM_lsc is greater than the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_standstill_request_flag that is above 0 is less than the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be moved up within at least 10 seconds every at most 20 seconds within at least 10 seconds , if the RCMTECHTERM_lsc is greater than the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_standstill_request_flag that is above 0 is less than the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be moved up within at least 10 seconds every at most 20 seconds within at least 10 seconds
					[2]: if the RCMTECHTERM_lsc is greater than the RCMTECHTERM_brake_pedal
					[3]: before the RCMTECHTERM_standstill_request_flag that is above 0 is less than the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= within at least 10 seconds
						SlotType= TimeScope|| Text= within at least 10 seconds
						SlotType= TimeScope|| Text= every at most 20 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc is greater than the RCMTECHTERM_brake_pedal
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is above 0
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc is greater than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-388:]
		text: before the RCMTECHTERM_quality_signal whose index is less than 1 is above the RCMTECHTERM_brake_pedal for at least 8 seconds , after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_inhibitor within at most 12 seconds for 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal whose index is less than 1 is above the RCMTECHTERM_brake_pedal for at least 8 seconds , after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_brake_fault_state , the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_inhibitor within at most 12 seconds for 25 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal whose index is less than 1 is above the RCMTECHTERM_brake_pedal for at least 8 seconds
					[2]: after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_brake_fault_state
					[3]: the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_inhibitor within at most 12 seconds for 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 1
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_brake_fault_state
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within at most 12 seconds
						SlotType= TimeScope|| Text= for 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be sent to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is above the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index is less than 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 8
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 8
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_engine_error exceeds the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-146:]
		text: if the RCMTECHTERM_sailing_inhibitor whose index is greater than 4 is RCMVAL_true for 22 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_termination every at most 18 seconds for at least 21 seconds , when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_lsc .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor whose index is greater than 4 is RCMVAL_true for 22 seconds , the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_termination every at most 18 seconds for at least 21 seconds , when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_lsc .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor whose index is greater than 4 is RCMVAL_true for 22 seconds
					[2]: the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_termination every at most 18 seconds for at least 21 seconds when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_lsc
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is greater than 4
						SlotType= TimeScope|| Text= for 22 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at least 21 seconds
						SlotType= TimeScope|| Text= every at most 18 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_inhibitor whose index is greater than 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be turned to the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-279:]
		text: if the RCMTECHTERM_brake_pedal whose index is 2 is RCMVAL_false for 3 seconds within at most 24 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true , after the RCMTECHTERM_defined_position whose index is 4 is less than the RCMTECHTERM_engine_error for 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_pedal whose index is 2 is RCMVAL_false for 3 seconds within at most 24 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true , after the RCMTECHTERM_defined_position whose index is 4 is less than the RCMTECHTERM_engine_error for 11 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_pedal whose index is 2 is RCMVAL_false for 3 seconds within at most 24 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
					[3]: after the RCMTECHTERM_defined_position whose index is 4 is less than the RCMTECHTERM_engine_error for 11 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is 2
						SlotType= TimeScope|| Text= within at most 24 seconds
						SlotType= TimeScope|| Text= for 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is 4
						SlotType= TimeScope|| Text= for 11 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index is 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position is less than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_defined_position whose index is 4
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 11
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 11
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-145:]
		text: before the RCMTECHTERM_quality_signal that is above 4 is RCMVAL_true for at least 26 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at most 24 seconds for at most 4 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds , before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_quality_signal that is above 4 is RCMVAL_true for at least 26 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at most 24 seconds for at most 4 seconds , when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds , before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_quality_signal that is above 4 is RCMVAL_true for at least 26 seconds when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at most 24 seconds for at most 4 seconds when the RCMTECHTERM_steering_wheel_angle whose index equals 8 exceeds the RCMTECHTERM_lsc every at most 23 seconds for at least 5 seconds
					[3]: before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_quality_signal is RCMVAL_true
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is above 4
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index equals 8
						SlotType= TimeScope|| Text= for at least 26 seconds
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= every at most 23 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index equals 8
						SlotType= TimeScope|| Text= for at most 4 seconds
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= every at most 24 seconds
						SlotType= TimeScope|| Text= every at most 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index equals 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_quality_signal is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-254:]
		text: before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position for at most 4 seconds , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position for at most 4 seconds , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds , the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position for at most 4 seconds
					[2]: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests within at most 3 seconds within at most 3 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= for at  most 4 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at  most 3 seconds
						SlotType= TimeScope|| Text= within at  most 3 seconds
						SlotType= TimeScope|| Text= within at  most 3 seconds
						SlotType= TimeScope|| Text= within at  most 3 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 4
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 4
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-375:]
		text: when the RCMTECHTERM_lsc is less than the RCMTECHTERM_defined_position every 2 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at least 29 seconds for at least 12 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for at least 5 seconds , before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_standstill_request_flag for at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc is less than the RCMTECHTERM_defined_position every 2 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at least 29 seconds for at least 12 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for at least 5 seconds , before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_standstill_request_flag for at most 29 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc is less than the RCMTECHTERM_defined_position every 2 seconds
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at least 29 seconds for
					[3]: before the RCMTECHTERM_vehicle_speed_quality_factor whose index exceeds 7 exceeds the RCMTECHTERM_sailing_inhibitor for at least 5 seconds
					[4]: before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_standstill_request_flag for at most 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is less than the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every 2 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every at  least 29 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= for at  most 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is less than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 29
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 29
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-484:]
		text: if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds , the RCMTECHTERM_sailing_termination shall be moved up within at most 12 seconds for 20 seconds , if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds , the RCMTECHTERM_sailing_termination shall be moved up within at most 12 seconds for 20 seconds , if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be moved up within at most 12 seconds for 20 seconds
					[3]: if the RCMTECHTERM_sailing_request whose index is 7 is above the RCMTECHTERM_standstill_request_flag for 17 seconds within at most 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 7
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for 17 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= within at most 12 seconds
						SlotType= TimeScope|| Text= for 20 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is 7
						SlotType= TimeScope|| Text= within at most 16 seconds
						SlotType= TimeScope|| Text= for 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is above the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-133:]
		text: when the RCMTECHTERM_sailing_inhibitor that is greater than 1 is RCMVAL_true for at most 26 seconds every 6 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_sailing_request whose index is above 2 is greater than the RCMTECHTERM_brake_pedal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_inhibitor that is greater than 1 is RCMVAL_true for at most 26 seconds every 6 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_sailing_request whose index is above 2 is greater than the RCMTECHTERM_brake_pedal .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_inhibitor that is greater than 1 is RCMVAL_true for at most 26 seconds every 6 seconds
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
					[3]: before the RCMTECHTERM_sailing_request whose index is above 2 is greater than the RCMTECHTERM_brake_pedal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is greater than 1
						SlotType= TimeScope|| Text= for at most 26 seconds
						SlotType= TimeScope|| Text= every 6 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is above 2
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_request whose index is above 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-266:]
		text: before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_defined_position every at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_defined_position every at most 26 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error
					[2]: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_defined_position at most 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_defined_position at most 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_defined_position seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-387:]
		text: when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true , if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_nosailing_requests within at most 10 seconds for at most 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true , if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_nosailing_requests within at most 10 seconds for at most 6 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
					[2]: if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0 is RCMVAL_true within at most 25 seconds
					[4]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_nosailing_requests within at most 10 seconds for at most 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0
						SlotType= TimeScope|| Text= within at most 25 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that exceeds 0
						SlotType= TimeScope|| Text= within at most 25 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= within at most 10 seconds
						SlotType= TimeScope|| Text= for at most 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-472:]
		text: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_idc_inhibitor for at most 23 seconds , when the RCMTECHTERM_brake_fault_state that equals 8 exceeds the RCMTECHTERM_standstill_request_flag for at least 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_idc_inhibitor for at most 23 seconds , when the RCMTECHTERM_brake_fault_state that equals 8 exceeds the RCMTECHTERM_standstill_request_flag for at least 7 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_idc_inhibitor for at most 23 seconds when the RCMTECHTERM_brake_fault_state that equals 8 exceeds the RCMTECHTERM_standstill_request_flag for at least 7 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that equals 8
						SlotType= TimeScope|| Text= for at most 23 seconds
						SlotType= TimeScope|| Text= for at least 7 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_idc_inhibitor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-121:]
		text: while the RCMTECHTERM_lsc whose index is less than 1 is above the RCMTECHTERM_brake_fault_state for 16 seconds , after the RCMTECHTERM_brake_fault_state that exceeds 3 is above the RCMTECHTERM_engine_error , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every at most 9 seconds within at most 19 seconds , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc whose index is less than 1 is above the RCMTECHTERM_brake_fault_state for 16 seconds , after the RCMTECHTERM_brake_fault_state that exceeds 3 is above the RCMTECHTERM_engine_error , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every at most 9 seconds within at most 19 seconds , if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 26 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc whose index is less than 1 is above the RCMTECHTERM_brake_fault_state for 16 seconds
					[2]: after the RCMTECHTERM_brake_fault_state that exceeds 3 is above the RCMTECHTERM_engine_error
					[3]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal every at most 9 seconds within at most 19 seconds
					[4]: if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_vehicle_speed_quality_factor for at most 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is less than 1
						SlotType= TimeScope|| Text= for 16 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that exceeds 3
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within at most 19 seconds
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at most 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc is above the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 16
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 16
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_engine_error
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_fault_state
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-230:]
		text: when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_idc_inhibitor every 15 seconds within 25 seconds , when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds , the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_idc_inhibitor every 15 seconds within 25 seconds , when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds
					[2]: the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_idc_inhibitor every 15 seconds within 25 seconds when the RCMTECHTERM_sailing_request that is 8 equals RCMVAL_true for at most 19 seconds every at most 10 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 8
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= every at most 10 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that is 8
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= every at most 10 seconds
						SlotType= TimeScope|| Text= every 15 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_idc_inhibitor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_request
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be sent to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-351:]
		text: when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds , when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds , when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds , the RCMTECHTERM_standstill_request_flag shall be moved up .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds when the RCMTECHTERM_transmission_error whose index exceeds 0 is RCMVAL_true every at least 16 seconds for 12 seconds
					[2]: the RCMTECHTERM_standstill_request_flag shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index exceeds 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index exceeds 0
						SlotType= TimeScope|| Text= for 12 seconds
						SlotType= TimeScope|| Text= for 12 seconds
						SlotType= TimeScope|| Text= every at least 16 seconds
						SlotType= TimeScope|| Text= every at least 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_transmission_error whose index exceeds 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-242:]
		text: if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds , if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at most 14 seconds for at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds , if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at most 14 seconds for at least 12 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds
					[2]: if the RCMTECHTERM_nosailing_requests equals RCMVAL_true for 7 seconds
					[3]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at most 14 seconds for at least 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= TimeScope|| Text= for 7 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= TimeScope|| Text= for 7 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= within at most 14 seconds
						SlotType= TimeScope|| Text= for at least 12 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 12
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-363:]
		text: when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true every at most 10 seconds , the RCMTECHTERM_sailing_termination shall be moved up for 18 seconds within 2 seconds every at most 7 seconds , if the RCMTECHTERM_transmission_error is RCMVAL_true for 6 seconds within 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true every at most 10 seconds , the RCMTECHTERM_sailing_termination shall be moved up for 18 seconds within 2 seconds every at most 7 seconds , if the RCMTECHTERM_transmission_error is RCMVAL_true for 6 seconds within 26 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true at most 10 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be moved up for 18 seconds within 2 seconds every at most 7 seconds
					[3]: if the RCMTECHTERM_transmission_error is RCMVAL_true for 6 seconds within 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true at most 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= for 18 seconds
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= every at most 7 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= within 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-496:]
		text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds , after the RCMTECHTERM_standstill_request_flag that is 9 is greater than the RCMTECHTERM_transmission_error , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds , after the RCMTECHTERM_standstill_request_flag that is 9 is greater than the RCMTECHTERM_transmission_error , the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc every 4 seconds
					[2]: after the RCMTECHTERM_standstill_request_flag that is 9 is greater than the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= every 4 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is 9
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-460:]
		text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at most 19 seconds , while the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_lsc for 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at most 19 seconds , while the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_lsc for 19 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be set to RCMVAL_true within at most 19 seconds
					[2]: while the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_lsc for 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 19 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index equals 4
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_inhibitor whose index equals 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_inhibitor whose index equals 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-97:]
		text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at most 29 seconds , while the RCMTECHTERM_sailing_termination that is above 8 is less than the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at most 29 seconds , while the RCMTECHTERM_sailing_termination that is above 8 is less than the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor every at most 29 seconds
					[2]: while the RCMTECHTERM_sailing_termination that is above 8 is less than the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every at most 29 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is above 8
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_termination
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-85:]
		text: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds , the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_transmission_error within at least 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds , if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds , the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_transmission_error within at least 2 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_quality_factor that is 6 is greater than the RCMTECHTERM_quality_signal within at least 14 seconds
					[3]: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_transmission_error within at least 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is 6
						SlotType= TimeScope|| Text= within at least 14 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is 6
						SlotType= TimeScope|| Text= within at least 14 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at least 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_quality_factor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-73:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 15 seconds , while the RCMTECHTERM_sailing_termination whose index is greater than 4 is above the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 15 seconds , while the RCMTECHTERM_sailing_termination whose index is greater than 4 is above the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor every at most 15 seconds
					[2]: while the RCMTECHTERM_sailing_termination whose index is greater than 4 is above the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= every at most 15 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is greater than 4
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_request
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is greater than 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination is above the RCMTECHTERM_sailing_request
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_termination whose index is greater than 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-61:]
		text: while the RCMTECHTERM_brake_fault_state that is above 4 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true within at most 14 seconds for at least 7 seconds , before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal , before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_fault_state that is above 4 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true within at most 14 seconds for at least 7 seconds , before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal , before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_fault_state that is above 4 is RCMVAL_true
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true within at most 14 seconds for at least 7 seconds
					[3]: before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
					[4]: before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is above 4
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at most 14 seconds
						SlotType= TimeScope|| Text= for at least 7 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 14
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_fault_state
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_brake_fault_state
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-169:]
		text: if the RCMTECHTERM_nosailing_requests whose index is 1 equals RCMVAL_false , before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc for 19 seconds , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds , while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests whose index is 1 equals RCMVAL_false , before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc for 19 seconds , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds , while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests whose index is 1 equals RCMVAL_false
					[2]: before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc for 19 seconds
					[3]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds
					[4]: while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
					[5]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state for at least 21 seconds within at least 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is 1
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for 19 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at least 21 seconds
						SlotType= TimeScope|| Text= within at least 5 seconds
					C[4]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at least 21 seconds
						SlotType= TimeScope|| Text= within at least 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag exceeds the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_sailing_termination is greater than the RCMTECHTERM_vehicle_speed_quality_factor
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_quality_factor
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-278:]
		text: before the RCMTECHTERM_sailing_termination that exceeds 2 exceeds the RCMTECHTERM_brake_pedal , after the RCMTECHTERM_sailing_request whose index is above 4 exceeds the RCMTECHTERM_defined_position for 18 seconds , if the RCMTECHTERM_quality_signal that exceeds 6 is RCMVAL_true for at most 27 seconds , the RCMTECHTERM_quality_signal shall be moved up within 18 seconds every at least 14 seconds within 18 seconds , when the RCMTECHTERM_sailing_termination whose index is above 3 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination that exceeds 2 exceeds the RCMTECHTERM_brake_pedal , after the RCMTECHTERM_sailing_request whose index is above 4 exceeds the RCMTECHTERM_defined_position for 18 seconds , if the RCMTECHTERM_quality_signal that exceeds 6 is RCMVAL_true for at most 27 seconds , the RCMTECHTERM_quality_signal shall be moved up within 18 seconds every at least 14 seconds within 18 seconds , when the RCMTECHTERM_sailing_termination whose index is above 3 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination that exceeds 2 exceeds the RCMTECHTERM_brake_pedal
					[2]: after the RCMTECHTERM_sailing_request whose index is above 4 exceeds the RCMTECHTERM_defined_position for 18 seconds
					[3]: if the RCMTECHTERM_quality_signal that exceeds 6 is RCMVAL_true for at most 27 seconds
					[4]: the RCMTECHTERM_quality_signal shall be moved up within 18 seconds every at least 14 seconds within 18 seconds when the RCMTECHTERM_sailing_termination whose index is above 3 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that exceeds 2
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is above 4
						SlotType= TimeScope|| Text= for 18 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that exceeds 6
						SlotType= TimeScope|| Text= for at  most 27 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is above 3
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= every at  least 14 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_quality_signal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index is above 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 14
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_termination
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_request whose index is above 4
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 4
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 18
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 18
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-399:]
		text: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every 10 seconds for at most 2 seconds , when the RCMTECHTERM_nosailing_requests whose index is above 8 is less than the RCMTECHTERM_lsc for 21 seconds every 8 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every 10 seconds for at most 2 seconds , when the RCMTECHTERM_nosailing_requests whose index is above 8 is less than the RCMTECHTERM_lsc for 21 seconds every 8 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true every 10 seconds for at most 2 when the RCMTECHTERM_nosailing_requests whose index is above 8 is less than the RCMTECHTERM_lsc for 21 seconds every 8 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is above 8
						SlotType= TimeScope|| Text= every 10 seconds
						SlotType= TimeScope|| Text= for 21 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true for 2
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is above 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true for 2
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true for 2
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-157:]
		text: if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal , before the RCMTECHTERM_idc_inhibitor that exceeds 6 is greater than the RCMTECHTERM_steering_wheel_angle , if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal , before the RCMTECHTERM_idc_inhibitor that exceeds 6 is greater than the RCMTECHTERM_steering_wheel_angle , if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal , the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal
					[2]: before the RCMTECHTERM_idc_inhibitor that exceeds 6 is greater than the RCMTECHTERM_steering_wheel_angle
					[3]: if the RCMTECHTERM_transmission_error that equals 2 is greater than the RCMTECHTERM_quality_signal
					[4]: the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 2
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor that exceeds 6
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that equals 2
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_transmission_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_idc_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-209:]
		text: while the RCMTECHTERM_engine_error whose index is 3 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_engine_error whose index is 3 is RCMVAL_true , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle every at least 18 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_engine_error whose index is 3 is RCMVAL_true
					[2]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_steering_wheel_angle seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_engine_error is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_engine_error whose index is 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_engine_error is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_engine_error
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_engine_error whose index is 3
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 3
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-306:]
		text: while the RCMTECHTERM_brake_fault_state whose index equals 7 equals RCMVAL_true for at least 6 seconds , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_engine_error every at least 22 seconds within at least 27 seconds for at most 7 seconds , when the RCMTECHTERM_quality_signal that equals 1 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_fault_state whose index equals 7 equals RCMVAL_true for at least 6 seconds , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_engine_error every at least 22 seconds within at least 27 seconds for at most 7 seconds , when the RCMTECHTERM_quality_signal that equals 1 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_fault_state whose index equals 7 equals RCMVAL_true for at least 6 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_engine_error every at least 22 seconds within at least 27 seconds for at most 7 seconds when the RCMTECHTERM_quality_signal that equals 1 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index equals 7
						SlotType= TimeScope|| Text= for at least 6 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that equals 1
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= every at least 22 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_quality_signal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index equals 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 6
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 6
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index equals 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 6
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 6
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-415:]
		text: the RCMTECHTERM_standstill_request_flag shall be moved up within at least 26 seconds every at most 16 seconds , if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor , while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state for at least 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be moved up within at least 26 seconds every at most 16 seconds , if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor , while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint , before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state for at least 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be moved up within at least 26 seconds every at most 16 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
					[3]: while the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint
					[4]: before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state for at least 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
						SlotType= TimeScope|| Text= within at least 26 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= for at least 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 26
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 26
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-318:]
		text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 16 seconds for at least 5 seconds within at most 13 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is above 9 is less than the RCMTECHTERM_lsc within at most 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 16 seconds for at least 5 seconds within at most 13 seconds , if the RCMTECHTERM_steering_wheel_angle whose index is above 9 is less than the RCMTECHTERM_lsc within at most 25 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true every 16 seconds for at least 5 seconds within at most 13 seconds
					[2]: if the RCMTECHTERM_steering_wheel_angle whose index is above 9 is less than the RCMTECHTERM_lsc within at most 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= within at most 13 seconds
						SlotType= TimeScope|| Text= every 16 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is above 9
						SlotType= TimeScope|| Text= within at most 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is above 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-403:]
		text: when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true , when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds , the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true , when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds
					[2]: the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true when the RCMTECHTERM_quality_signal that is 6 is greater than the RCMTECHTERM_steering_wheel_angle for at least 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is 6
						SlotType= TimeScope|| Text= for at least 16 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is 6
						SlotType= TimeScope|| Text= for at least 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_quality_signal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-439:]
		text: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_engine_error for at least 29 seconds , if the RCMTECHTERM_idc_inhibitor whose index is above 5 is greater than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_nosailing_requests every at least 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_engine_error for at least 29 seconds , if the RCMTECHTERM_idc_inhibitor whose index is above 5 is greater than the RCMTECHTERM_steering_wheel_angle , when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_nosailing_requests every at least 4 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_engine_error for at least 29 seconds
					[2]: if the RCMTECHTERM_idc_inhibitor whose index is above 5 is greater than the RCMTECHTERM_steering_wheel_angle
					[3]: when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_nosailing_requests every at least 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at least 29 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is above 5
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_nosailing_requests
						SlotType= TimeScope|| Text= every at least 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is above 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be received from the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-427:]
		text: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_standstill_request_flag within at most 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_standstill_request_flag within at most 17 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_standstill_request_flag within at most 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-500:]
		text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_idc_inhibitor for at most 15 seconds , after the RCMTECHTERM_sailing_inhibitor whose index equals 2 is greater than the RCMTECHTERM_quality_signal for at least 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_idc_inhibitor for at most 15 seconds , after the RCMTECHTERM_sailing_inhibitor whose index equals 2 is greater than the RCMTECHTERM_quality_signal for at least 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_idc_inhibitor for at most 15 seconds
					[2]: after the RCMTECHTERM_sailing_inhibitor whose index equals 2 is greater than the RCMTECHTERM_quality_signal for at least 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at most 15 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index equals 2
						SlotType= TimeScope|| Text= for at least 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index equals 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 27
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 27
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-19:]
		text: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 1 is above the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds , the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds , after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 1 is above the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state within at least 9 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds
					[4]: after the RCMTECHTERM_vehicle_speed_quality_factor whose index is 1 is above the RCMTECHTERM_standstill_request_flag
					[5]: if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor for 6 seconds within 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within at least 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within at least 9 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= within 6 seconds
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is 1
					C[5]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= within 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be turned to the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is 1
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-317:]
		text: the RCMTECHTERM_brake_pedal shall be moved up every at least 28 seconds within at most 26 seconds , before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_nosailing_requests whose index is greater than 5 is above the RCMTECHTERM_transmission_error within at least 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be moved up every at least 28 seconds within at most 26 seconds , before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor , before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor , if the RCMTECHTERM_nosailing_requests whose index is greater than 5 is above the RCMTECHTERM_transmission_error within at least 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be moved up every at least 28 seconds within at most 26 seconds
					[2]: before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor if the RCMTECHTERM_nosailing_requests whose index is greater than 5 is above the RCMTECHTERM_transmission_error within at least 27 seconds
					[3]: before the RCMTECHTERM_sailing_request whose index is greater than 2 is less than the RCMTECHTERM_vehicle_speed_quality_factor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
						SlotType= TimeScope|| Text= within at most 26 seconds
						SlotType= TimeScope|| Text= every at least 28 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor if the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is greater than 2
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is greater than 5
						SlotType= TimeScope|| Text= within at least 27 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is greater than 2
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_request whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-426:]
		text: if the RCMTECHTERM_sailing_termination that is greater than 6 is less than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds , while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds , the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination that is greater than 6 is less than the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds , while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds , the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination that is greater than 6 is less than the RCMTECHTERM_standstill_request_flag
					[2]: the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds
					[3]: while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds
					[4]: the RCMTECHTERM_quality_signal shall be moved up every at most 5 seconds within at least 2 seconds for at least 22 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 6
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at least 11 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be moved up
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for at least 22 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 11
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 11
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_pedal exceeds the RCMTECHTERM_vehicle_speed_quality_factor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_vehicle_speed_quality_factor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 11
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 11
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-208:]
		text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds , the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds the RCMTECHTERM_defined_position shall be set to RCMVAL_true within 4 seconds for 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 4 seconds
						SlotType= TimeScope|| Text= for 16 seconds
						SlotType= TimeScope|| Text= for 16 seconds
						SlotType= TimeScope|| Text= within 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-329:]
		text: if the RCMTECHTERM_standstill_request_flag whose index is less than 2 is less than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_standstill_request_flag within at most 15 seconds every 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_standstill_request_flag whose index is less than 2 is less than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_standstill_request_flag within at most 15 seconds every 13 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_standstill_request_flag whose index is less than 2 is less than the RCMTECHTERM_steering_wheel_angle
					[2]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_standstill_request_flag within at most 15 seconds every 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is less than 2
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= within at most 15 seconds
						SlotType= TimeScope|| Text= every 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index is less than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-414:]
		text: when the RCMTECHTERM_standstill_request_flag whose index exceeds 6 equals RCMVAL_true every at most 6 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_standstill_request_flag whose index exceeds 6 equals RCMVAL_true every at most 6 seconds , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle , the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_standstill_request_flag whose index exceeds 6 equals RCMVAL_true at most 6 seconds
					[2]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds
					[3]: before the RCMTECHTERM_vehicle_speed_setpoint whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle
					[4]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true every at most 21 seconds for 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag equals RCMVAL_true at most 6 seconds
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index exceeds 6
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= every at most 21 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is 9
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for 6 seconds
						SlotType= TimeScope|| Text= every at most 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_standstill_request_flag whose index exceeds 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-305:]
		text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within at least 24 seconds every 10 seconds within at least 24 seconds , when the RCMTECHTERM_sailing_request is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within at least 24 seconds every 10 seconds within at least 24 seconds , when the RCMTECHTERM_sailing_request is RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor within at least 24 seconds every 10 seconds within at least 24 seconds when the RCMTECHTERM_sailing_request is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= within at least 24 seconds
						SlotType= TimeScope|| Text= every 10 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-438:]
		text: if the RCMTECHTERM_brake_fault_state that is less than 9 is less than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true within 12 seconds within 12 seconds , if the RCMTECHTERM_brake_fault_state that is less than 9 is less than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds , when the RCMTECHTERM_standstill_request_flag that equals 6 is above the RCMTECHTERM_transmission_error , before the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_sailing_termination .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state that is less than 9 is less than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true within 12 seconds within 12 seconds , if the RCMTECHTERM_brake_fault_state that is less than 9 is less than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds , when the RCMTECHTERM_standstill_request_flag that equals 6 is above the RCMTECHTERM_transmission_error , before the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_sailing_termination .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state that is less than 9 is less than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true within 12 seconds within 12 seconds
					[3]: if the RCMTECHTERM_brake_fault_state that is less than 9 is less
					[4]: than the RCMTECHTERM_defined_position for at most 13 seconds within at most 27 seconds when the RCMTECHTERM_standstill_request_flag that equals 6 is above the RCMTECHTERM_transmission_error before the RCMTECHTERM_brake_fault_state that is less than 6 is less than the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is less than 9
						SlotType= TimeScope|| Text= within at  most 27 seconds
						SlotType= TimeScope|| Text= for at  most 13 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 12 seconds
						SlotType= TimeScope|| Text= within 12 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is less than 9
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that equals 6
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error before the RCMTECHTERM_brake_fault_state that is less than 6
						SlotType= TimeScope|| Text= within at  most 27 seconds
						SlotType= TimeScope|| Text= for at  most 13 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is less
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: less
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position is less than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-402:]
		text: if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds , if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_transmission_error for at least 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds , if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_transmission_error for at least 21 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds
					[2]: if the RCMTECHTERM_defined_position that is greater than 3 is above the RCMTECHTERM_brake_fault_state for 13 seconds within 26 seconds
					[3]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_transmission_error for at least 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is greater than 3
						SlotType= TimeScope|| Text= for 13 seconds
						SlotType= TimeScope|| Text= within 26 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_defined_position is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is greater than 3
						SlotType= TimeScope|| Text= for 13 seconds
						SlotType= TimeScope|| Text= within 26 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at least 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_defined_position is above the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-207:]
		text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_sailing_termination for at least 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds , after the RCMTECHTERM_transmission_error whose index equals 9 is RCMVAL_true , if the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds , when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag for at least 15 seconds every at most 20 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_sailing_termination for at least 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds , after the RCMTECHTERM_transmission_error whose index equals 9 is RCMVAL_true , if the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds , when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag for at least 15 seconds every at most 20 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_sailing_termination for at least 11 seconds
					[2]: the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds after the RCMTECHTERM_transmission_error whose index equals 9
					[3]: is RCMVAL_true
					[4]: if the RCMTECHTERM_vehicle_speed_setpoint that equals 7 is above the RCMTECHTERM_sailing_termination within 18 seconds when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag for at least 15 seconds every at most 20 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_sailing_termination
						SlotType= TimeScope|| Text= for at least 11 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that equals 7
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error whose index equals 9
						SlotType= TimeScope|| Text= within 18 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= is RCMVAL_true
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that equals 7
						SlotType= TimeScope|| Text= for at least 15 seconds
						SlotType= TimeScope|| Text= within 18 seconds
						SlotType= TimeScope|| Text= every at most 20 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_vehicle_speed_setpoint
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = index equals 9
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: index
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 9
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-328:]
		text: before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true for at least 22 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within 8 seconds for at most 23 seconds every at least 3 seconds , if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_transmission_error within 6 seconds , when the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal for at most 24 seconds , while the RCMTECHTERM_quality_signal whose index is greater than 5 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true for at least 22 seconds , the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within 8 seconds for at most 23 seconds every at least 3 seconds , if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_transmission_error within 6 seconds , when the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal for at most 24 seconds , while the RCMTECHTERM_quality_signal whose index is greater than 5 is RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true for at least 22 seconds
					[2]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within 8 seconds for at most 23 seconds every at least 3 seconds
					[3]: if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_transmission_error
					[4]: within 6 seconds when the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal for at most 24 seconds
					[5]: while the RCMTECHTERM_quality_signal whose index is greater than 5 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= TimeScope|| Text= for at least 22 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at most 23 seconds
						SlotType= TimeScope|| Text= within 8 seconds
						SlotType= TimeScope|| Text= every at least 3 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_transmission_error
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for at most 24 seconds
						SlotType= TimeScope|| Text= within 6 seconds
					C[5]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_quality_signal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is greater than 5
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is less than the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 22
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 22
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_quality_signal is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is greater than 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_quality_signal is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_quality_signal whose index is greater than 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-437:]
		text: before the RCMTECHTERM_steering_wheel_angle that is greater than 9 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_termination shall be moved up for at least 5 seconds within at most 9 seconds every at least 18 seconds , if the RCMTECHTERM_quality_signal equals RCMVAL_true , if the RCMTECHTERM_quality_signal equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle that is greater than 9 is greater than the RCMTECHTERM_sailing_request , the RCMTECHTERM_sailing_termination shall be moved up for at least 5 seconds within at most 9 seconds every at least 18 seconds , if the RCMTECHTERM_quality_signal equals RCMVAL_true , if the RCMTECHTERM_quality_signal equals RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle that is greater than 9 is greater than the RCMTECHTERM_sailing_request
					[2]: the RCMTECHTERM_sailing_termination shall be moved up for at least 5 seconds within at most 9 seconds every at least 18 seconds
					[3]: if the RCMTECHTERM_quality_signal equals RCMVAL_true
					[4]: if the RCMTECHTERM_quality_signal equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is greater than 9
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= for at least 5 seconds
						SlotType= TimeScope|| Text= within at most 9 seconds
						SlotType= TimeScope|| Text= every at least 18 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal equals RCMVAL_true
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal equals RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is greater than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-219:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal every at most 22 seconds within 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal every at most 22 seconds within 4 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal seconds within 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal seconds
						SlotType= TimeScope|| Text= within 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_brake_pedal seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-425:]
		text: if the RCMTECHTERM_sailing_request whose index equals 0 exceeds the RCMTECHTERM_vehicle_speed_quality_factor within 27 seconds for at most 16 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position every at least 21 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position every at least 21 seconds , after the RCMTECHTERM_sailing_request equals RCMVAL_true for at most 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_request whose index equals 0 exceeds the RCMTECHTERM_vehicle_speed_quality_factor within 27 seconds for at most 16 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position every at least 21 seconds , the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position every at least 21 seconds , after the RCMTECHTERM_sailing_request equals RCMVAL_true for at most 27 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_request whose index equals 0 exceeds the RCMTECHTERM_vehicle_speed_quality_factor within 27 seconds for at most 16 seconds
					[2]: the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position seconds the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position every at least 21 seconds
					[3]: after the RCMTECHTERM_sailing_request equals RCMVAL_true for at most 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index equals 0
						SlotType= TimeScope|| Text= within 27 seconds
						SlotType= TimeScope|| Text= for at  most 16 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position seconds
						SlotType= TimeScope|| Text= every at  least 21 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request equals RCMVAL_true
						SlotType= TimeScope|| Text= for at  most 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index equals 0
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be sent to the RCMTECHTERM_defined_position seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_request equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 27
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 27
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-304:]
		text: the RCMTECHTERM_sailing_termination shall be moved up every at least 6 seconds within at most 2 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be moved up every at least 6 seconds within at most 2 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be moved up every at least 6 seconds within at most 2 seconds
					[2]: if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds
					[3]: if the RCMTECHTERM_brake_fault_state that is 4 is RCMVAL_false for at most 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be moved up
						SlotType= TimeScope|| Text= within at most 2 seconds
						SlotType= TimeScope|| Text= every at least 6 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 4
						SlotType= TimeScope|| Text= for at most 27 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 4
						SlotType= TimeScope|| Text= for at most 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-316:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 23 seconds every at least 22 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 23 seconds every at least 22 seconds , when the RCMTECHTERM_lsc is above the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true within at most 23 seconds every at least 22 seconds when the RCMTECHTERM_lsc is above the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is above the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at most 23 seconds
						SlotType= TimeScope|| Text= every at least 22 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-449:]
		text: while the RCMTECHTERM_brake_fault_state whose index is less than 5 is above the RCMTECHTERM_quality_signal , if the RCMTECHTERM_brake_pedal that exceeds 0 is above the RCMTECHTERM_idc_inhibitor for at least 8 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every 19 seconds within 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_brake_fault_state whose index is less than 5 is above the RCMTECHTERM_quality_signal , if the RCMTECHTERM_brake_pedal that exceeds 0 is above the RCMTECHTERM_idc_inhibitor for at least 8 seconds , the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every 19 seconds within 16 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_brake_fault_state whose index is less than 5 is above the RCMTECHTERM_quality_signal
					[2]: if the RCMTECHTERM_brake_pedal that exceeds 0 is above the RCMTECHTERM_idc_inhibitor for at least 8 seconds
					[3]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal every 19 seconds within 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index is less than 5
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that exceeds 0
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within 16 seconds
						SlotType= TimeScope|| Text= every 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is less than 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_quality_signal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_brake_fault_state whose index is less than 5
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 5
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-413:]
		text: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_sailing_request every at most 2 seconds within at most 17 seconds , if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_sailing_request every at most 2 seconds within at most 17 seconds , if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_sailing_request every at most 2 seconds within at most 17 seconds
					[2]: if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag
					[3]: if the RCMTECHTERM_brake_fault_state that is greater than 1 exceeds the RCMTECHTERM_standstill_request_flag
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within at most 17 seconds
						SlotType= TimeScope|| Text= every at most 2 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is greater than 1
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is greater than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state exceeds the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-401:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_defined_position within at least 21 seconds every 19 seconds within at least 21 seconds , if the RCMTECHTERM_lsc that is greater than 7 exceeds the RCMTECHTERM_sailing_termination within at most 27 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_defined_position within at least 21 seconds every 19 seconds within at least 21 seconds , if the RCMTECHTERM_lsc that is greater than 7 exceeds the RCMTECHTERM_sailing_termination within at most 27 seconds , before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at most 29 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_defined_position within at least 21 seconds every 19 seconds within at least 21 seconds
					[2]: if the RCMTECHTERM_lsc that is greater than 7 exceeds the RCMTECHTERM_sailing_termination within at most 27 seconds
					[3]: before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true for at most 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= within at least 21 seconds
						SlotType= TimeScope|| Text= within at least 21 seconds
						SlotType= TimeScope|| Text= every 19 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is greater than 7
						SlotType= TimeScope|| Text= within at most 27 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_quality_factor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 29
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 29
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-109:]
		text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_brake_fault_state within at least 27 seconds within at least 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_brake_fault_state within at least 27 seconds within at least 27 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_brake_fault_state within at least 27 seconds within at least 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within at least 27 seconds
						SlotType= TimeScope|| Text= within at least 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-218:]
		text: after the RCMTECHTERM_sailing_inhibitor that is above 1 is above the RCMTECHTERM_idc_inhibitor , before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor for 27 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_transmission_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_inhibitor that is above 1 is above the RCMTECHTERM_idc_inhibitor , before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor for 27 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_transmission_error .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_inhibitor that is above 1 is above the RCMTECHTERM_idc_inhibitor
					[2]: before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor for 27 seconds
					[3]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_transmission_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 1
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 27 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_transmission_error
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_transmission_error is less than the RCMTECHTERM_idc_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_transmission_error
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 27
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 27
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-339:]
		text: before the RCMTECHTERM_sailing_termination that is greater than 3 is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_inhibitor every at least 29 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state within at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_termination that is greater than 3 is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_inhibitor every at least 29 seconds , the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state within at most 19 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_termination that is greater than 3 is less than the RCMTECHTERM_idc_inhibitor for at most 9 seconds when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_inhibitor every at least 29 seconds
					[2]: the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state within at most 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_idc_inhibitor
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 3
						SlotType= TimeScope|| Text= for at most 9 seconds
						SlotType= TimeScope|| Text= every at least 29 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= within at most 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-448:]
		text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 23 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 23 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 23 seconds , the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests every at least 23 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_nosailing_requests seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-436:]
		text: if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds , if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_quality_signal for at least 6 seconds within 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds , if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_quality_signal for at least 6 seconds within 13 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds
					[2]: if the RCMTECHTERM_idc_inhibitor whose index equals 1 is greater than the RCMTECHTERM_defined_position within at most 9 seconds
					[3]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_quality_signal for at least 6 seconds within 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index equals 1
						SlotType= TimeScope|| Text= within at most 9 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index equals 1
						SlotType= TimeScope|| Text= within at most 9 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for at least 6 seconds
						SlotType= TimeScope|| Text= within 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index equals 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-315:]
		text: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true for at least 27 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 2 is above the RCMTECHTERM_brake_fault_state , if the RCMTECHTERM_lsc that is greater than 5 exceeds the RCMTECHTERM_steering_wheel_angle within at most 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true for at least 27 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 2 is above the RCMTECHTERM_brake_fault_state , if the RCMTECHTERM_lsc that is greater than 5 exceeds the RCMTECHTERM_steering_wheel_angle within at most 4 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true for at least 27 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 2 is above the RCMTECHTERM_brake_fault_state
					[3]: if the RCMTECHTERM_lsc that is greater than 5 exceeds the RCMTECHTERM_steering_wheel_angle within at most 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 27 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 2
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is greater than 5
						SlotType= TimeScope|| Text= within at most 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_lsc exceeds the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_vehicle_speed_setpoint whose index exceeds 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-206:]
		text: after the RCMTECHTERM_standstill_request_flag that is greater than 8 is RCMVAL_true , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_request every at least 10 seconds for 27 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_standstill_request_flag that is greater than 8 is RCMVAL_true , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_request every at least 10 seconds for 27 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_standstill_request_flag that is greater than 8 is RCMVAL_true
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_request seconds for 27 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is greater than 8
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_request seconds
						SlotType= TimeScope|| Text= for 27 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_request seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_standstill_request_flag is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_standstill_request_flag
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-327:]
		text: when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_nosailing_requests within at most 3 seconds for 24 seconds every 7 seconds , when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor , before the RCMTECHTERM_sailing_request is RCMVAL_true for at most 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor , the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_nosailing_requests within at most 3 seconds for 24 seconds every 7 seconds , when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor , before the RCMTECHTERM_sailing_request is RCMVAL_true for at most 16 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor
					[2]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_nosailing_requests within at most 3 seconds for 24 seconds every 7 seconds when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor
					[3]: before the RCMTECHTERM_sailing_request is RCMVAL_true for at most 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at most 3 seconds
						SlotType= TimeScope|| Text= for 24 seconds
						SlotType= TimeScope|| Text= every 7 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_nosailing_requests
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= TimeScope|| Text= for at most 16 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 16
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 16
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-400:]
		text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 27 seconds , before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_setpoint .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 27 seconds , before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_setpoint .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true within at least 27 seconds
					[2]: before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_setpoint
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 27 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_setpoint
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_request is less than the RCMTECHTERM_vehicle_speed_setpoint
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-303:]
		text: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state every 11 seconds , while the RCMTECHTERM_steering_wheel_angle whose index is less than 1 is above the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state every 11 seconds , while the RCMTECHTERM_steering_wheel_angle whose index is less than 1 is above the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state every 11 seconds
					[2]: while the RCMTECHTERM_steering_wheel_angle whose index is less than 1 is above the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state
						SlotType= TimeScope|| Text= every 11 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is less than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be received from the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_steering_wheel_angle whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_steering_wheel_angle is above the RCMTECHTERM_sailing_inhibitor
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_steering_wheel_angle whose index is less than 1
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 1
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-424:]
		text: if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true within 10 seconds every 28 seconds , if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds , the RCMTECHTERM_lsc shall be set to RCMVAL_true within 10 seconds every 28 seconds , if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true within 10 seconds every 28 seconds
					[3]: if the RCMTECHTERM_sailing_termination whose index exceeds 4 is less than the RCMTECHTERM_vehicle_speed_setpoint within at most 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index exceeds 4
						SlotType= TimeScope|| Text= within at most 21 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 10 seconds
						SlotType= TimeScope|| Text= every 28 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index exceeds 4
						SlotType= TimeScope|| Text= within at most 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index exceeds 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-412:]
		text: when the RCMTECHTERM_nosailing_requests is RCMVAL_true for 13 seconds every at most 5 seconds , if the RCMTECHTERM_quality_signal whose index is 1 is greater than the RCMTECHTERM_sailing_inhibitor within 28 seconds , before the RCMTECHTERM_defined_position whose index is above 6 is greater than the RCMTECHTERM_sailing_inhibitor for 16 seconds , the RCMTECHTERM_brake_pedal shall be moved up within at most 21 seconds every 5 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests is RCMVAL_true for 13 seconds every at most 5 seconds , if the RCMTECHTERM_quality_signal whose index is 1 is greater than the RCMTECHTERM_sailing_inhibitor within 28 seconds , before the RCMTECHTERM_defined_position whose index is above 6 is greater than the RCMTECHTERM_sailing_inhibitor for 16 seconds , the RCMTECHTERM_brake_pedal shall be moved up within at most 21 seconds every 5 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests is RCMVAL_true for 13 seconds every at most 5 seconds
					[2]: if the RCMTECHTERM_quality_signal whose index is 1 is greater than the RCMTECHTERM_sailing_inhibitor within 28 seconds
					[3]: before the RCMTECHTERM_defined_position whose index is above 6 is greater than the RCMTECHTERM_sailing_inhibitor for 16 seconds
					[4]: the RCMTECHTERM_brake_pedal shall be moved up within at most 21 seconds every 5 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is RCMVAL_true
						SlotType= TimeScope|| Text= for 13 seconds
						SlotType= TimeScope|| Text= every at most 5 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is 1
						SlotType= TimeScope|| Text= within 28 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is above 6
						SlotType= TimeScope|| Text= for 16 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be moved up
						SlotType= TimeScope|| Text= within at most 21 seconds
						SlotType= TimeScope|| Text= every 5 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_quality_signal is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_quality_signal whose index is 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_defined_position whose index is above 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 16
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 16
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-229:]
		text: if the RCMTECHTERM_sailing_inhibitor that equals 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at most 15 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for at least 11 seconds , when the RCMTECHTERM_sailing_inhibitor that exceeds 2 exceeds the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_sailing_inhibitor that equals 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at most 15 seconds , the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for at least 11 seconds , when the RCMTECHTERM_sailing_inhibitor that exceeds 2 exceeds the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_sailing_inhibitor that equals 6 is greater than the RCMTECHTERM_vehicle_speed_quality_factor within at most 15 seconds
					[2]: the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint for at least 11 seconds when the RCMTECHTERM_sailing_inhibitor that exceeds 2 exceeds the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that equals 6
						SlotType= TimeScope|| Text= within at most 15 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that exceeds 2
						SlotType= TimeScope|| Text= for at least 11 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor exceeds the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be sent to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-459:]
		text: after the RCMTECHTERM_idc_inhibitor whose index is 9 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal that is greater than 7 is less than the RCMTECHTERM_transmission_error within 26 seconds for at most 17 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at least 11 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_idc_inhibitor whose index is 9 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal that is greater than 7 is less than the RCMTECHTERM_transmission_error within 26 seconds for at most 17 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every at least 11 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_idc_inhibitor whose index is 9 equals RCMVAL_true the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true every
					[2]: if the RCMTECHTERM_brake_pedal that is greater than 7 is less than the RCMTECHTERM_transmission_error within 26 seconds for at most 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 9
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_transmission_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that is greater than 7
						SlotType= TimeScope|| Text= within 26 seconds
						SlotType= TimeScope|| Text= for at  most 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-108:]
		text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 28 seconds , after the RCMTECHTERM_sailing_request that exceeds 9 is above the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_sailing_request that equals 8 exceeds the RCMTECHTERM_brake_fault_state every at most 28 seconds for at most 26 seconds , if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_sailing_inhibitor within at most 27 seconds for 4 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 28 seconds , after the RCMTECHTERM_sailing_request that exceeds 9 is above the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_sailing_request that equals 8 exceeds the RCMTECHTERM_brake_fault_state every at most 28 seconds for at most 26 seconds , if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_sailing_inhibitor within at most 27 seconds for 4 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true within at least 28 seconds
					[2]: after the RCMTECHTERM_sailing_request that exceeds 9 is above the RCMTECHTERM_sailing_termination when the RCMTECHTERM_sailing_request that equals 8 exceeds the RCMTECHTERM_brake_fault_state every at most 28 seconds for at most 26 seconds
					[3]: if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_sailing_inhibitor within at most 27 seconds for 4 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 28 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_termination
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that exceeds 9
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that equals 8
						SlotType= TimeScope|| Text= for at most 26 seconds
						SlotType= TimeScope|| Text= every at most 28 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within at most 27 seconds
						SlotType= TimeScope|| Text= for 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_request is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request exceeds the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_request
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_request is above the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-447:]
		text: while the RCMTECHTERM_defined_position is RCMVAL_true for at least 15 seconds , if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds , before the RCMTECHTERM_defined_position whose index is 7 is RCMVAL_true , if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up for at least 12 seconds every at most 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_defined_position is RCMVAL_true for at least 15 seconds , if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds , before the RCMTECHTERM_defined_position whose index is 7 is RCMVAL_true , if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be moved up for at least 12 seconds every at most 15 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_defined_position is RCMVAL_true for at least 15 seconds
					[2]: if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds
					[3]: before the RCMTECHTERM_defined_position whose index is 7 is RCMVAL_true
					[4]: if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor for 21 seconds within 2 seconds
					[5]: the RCMTECHTERM_sailing_inhibitor shall be moved up for at least 12 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= TimeScope|| Text= for at  least 15 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= for 21 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is 7
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= within 2 seconds
						SlotType= TimeScope|| Text= for 21 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up for 12 every
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests is greater than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up for 12 every
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: 12 every
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_defined_position is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 15
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 15
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_defined_position is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 15
											Unit: seconds
											QPRelation: at  least
										<FormalSemantic>
											TechnicalOperator: null
											Value: 15
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_defined_position is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_defined_position whose index is 7
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-205:]
		text: before the RCMTECHTERM_sailing_inhibitor whose index exceeds 6 is above the RCMTECHTERM_idc_inhibitor , when the RCMTECHTERM_sailing_inhibitor that is above 0 is less than the RCMTECHTERM_defined_position for at least 22 seconds , the RCMTECHTERM_defined_position shall be moved up every at most 4 seconds for at least 16 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor whose index exceeds 6 is above the RCMTECHTERM_idc_inhibitor , when the RCMTECHTERM_sailing_inhibitor that is above 0 is less than the RCMTECHTERM_defined_position for at least 22 seconds , the RCMTECHTERM_defined_position shall be moved up every at most 4 seconds for at least 16 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor whose index exceeds 6 is above the RCMTECHTERM_idc_inhibitor
					[2]: when the RCMTECHTERM_sailing_inhibitor that is above 0 is less than the RCMTECHTERM_defined_position for at least 22 seconds
					[3]: the RCMTECHTERM_defined_position shall be moved up every at most 4 seconds for at least 16 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 6
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 0
						SlotType= TimeScope|| Text= for at least 22 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
						SlotType= TimeScope|| Text= for at least 16 seconds
						SlotType= TimeScope|| Text= every at most 4 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index exceeds 6
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-326:]
		text: if the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is above the RCMTECHTERM_sailing_request within at least 18 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at most 28 seconds within 13 seconds , while the RCMTECHTERM_sailing_termination is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is above the RCMTECHTERM_sailing_request within at least 18 seconds , the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at most 28 seconds within 13 seconds , while the RCMTECHTERM_sailing_termination is RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2 is above the RCMTECHTERM_sailing_request within at least 18 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal for at most 28 seconds within 13 seconds
					[3]: while the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2
						SlotType= TimeScope|| Text= within at least 18 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for at most 28 seconds
						SlotType= TimeScope|| Text= within 13 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_termination is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be received from the RCMTECHTERM_quality_signal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_termination is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_termination is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_termination
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-217:]
		text: after the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal for 17 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error every at most 3 seconds within at least 8 seconds , when the RCMTECHTERM_defined_position that is less than 8 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal whose index is greater than 8 is RCMVAL_true within at least 6 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal for 17 seconds , the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error every at most 3 seconds within at least 8 seconds , when the RCMTECHTERM_defined_position that is less than 8 equals RCMVAL_true , if the RCMTECHTERM_brake_pedal whose index is greater than 8 is RCMVAL_true within at least 6 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal for 17 seconds
					[2]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error every at most 3 seconds within at least 8 seconds when the RCMTECHTERM_defined_position that is less than 8 equals RCMVAL_true
					[3]: if the RCMTECHTERM_brake_pedal whose index is greater than 8 is RCMVAL_true within at least 6 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= for 17 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is less than 8
						SlotType= TimeScope|| Text= within at least 8 seconds
						SlotType= TimeScope|| Text= every at most 3 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is greater than 8
						SlotType= TimeScope|| Text= within at least 6 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index is greater than 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error is greater than the RCMTECHTERM_quality_signal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 17
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 17
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-338:]
		text: if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true within 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_lsc for 5 seconds within at least 4 seconds every 26 seconds , before the RCMTECHTERM_steering_wheel_angle that equals 8 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true within 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_lsc for 5 seconds within at least 4 seconds every 26 seconds , before the RCMTECHTERM_steering_wheel_angle that equals 8 is RCMVAL_true .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true within 2 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_lsc for 5 seconds within at least 4 seconds every 26 seconds
					[3]: before the RCMTECHTERM_steering_wheel_angle that equals 8 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= TimeScope|| Text= within 2 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within at least 4 seconds
						SlotType= TimeScope|| Text= for 5 seconds
						SlotType= TimeScope|| Text= every 26 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that equals 8
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_steering_wheel_angle
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-302:]
		text: while the RCMTECHTERM_steering_wheel_angle that exceeds 6 equals RCMVAL_true for 9 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_lsc every at most 25 seconds , after the RCMTECHTERM_sailing_request that equals 7 is above the RCMTECHTERM_defined_position .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_steering_wheel_angle that exceeds 6 equals RCMVAL_true for 9 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_lsc every at most 25 seconds , after the RCMTECHTERM_sailing_request that equals 7 is above the RCMTECHTERM_defined_position .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_steering_wheel_angle that exceeds 6 equals RCMVAL_true for 9 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_lsc every at most 25 seconds
					[3]: after the RCMTECHTERM_sailing_request that equals 7 is above the RCMTECHTERM_defined_position
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that exceeds 6
						SlotType= TimeScope|| Text= for 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= every at most 25 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request that equals 7
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_steering_wheel_angle
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 9
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 9
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_steering_wheel_angle
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_steering_wheel_angle
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 6
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 9
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 9
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_sailing_request is above the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_request
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_sailing_request
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 7
													</ArgDetails>
												</Operands>
												<Operator>
													relation:equals
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-411:]
		text: after the RCMTECHTERM_sailing_inhibitor whose index is greater than 3 is greater than the RCMTECHTERM_lsc , if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds , before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_brake_pedal for 24 seconds , if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_pedal within 25 seconds every at least 8 seconds within 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_inhibitor whose index is greater than 3 is greater than the RCMTECHTERM_lsc , if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds , before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_brake_pedal for 24 seconds , if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_pedal within 25 seconds every at least 8 seconds within 25 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_inhibitor whose index is greater than 3 is greater than the RCMTECHTERM_lsc
					[2]: if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds
					[3]: before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_brake_pedal for 24 seconds
					[4]: if the RCMTECHTERM_nosailing_requests whose index exceeds 8 equals RCMVAL_true within at most 27 seconds
					[5]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_pedal within 25 seconds every at least 8 seconds within 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is greater than 3
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 8
						SlotType= TimeScope|| Text= within at most 27 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= for 24 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 8
						SlotType= TimeScope|| Text= within at most 27 seconds
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_pedal
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= every at least 8 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index exceeds 8
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is greater than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_idc_inhibitor is greater than the RCMTECHTERM_brake_pedal
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_pedal
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 24
											Unit: seconds
											QPRelation: null
										<FormalSemantic>
											TechnicalOperator: null
											Value: 24
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-314:]
		text: before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true , when the RCMTECHTERM_idc_inhibitor whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle for at most 13 seconds every at least 20 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at least 10 seconds within at least 19 seconds , before the RCMTECHTERM_standstill_request_flag is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true , when the RCMTECHTERM_idc_inhibitor whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle for at most 13 seconds every at least 20 seconds , the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at least 10 seconds within at least 19 seconds , before the RCMTECHTERM_standstill_request_flag is RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true when the RCMTECHTERM_idc_inhibitor whose index is 9 is less than the RCMTECHTERM_steering_wheel_angle for at most 13 seconds every at least 20 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint for at least 10 seconds within at least 19 seconds
					[3]: before the RCMTECHTERM_standstill_request_flag is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is 9
						SlotType= TimeScope|| Text= for at most 13 seconds
						SlotType= TimeScope|| Text= every at least 20 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for at least 10 seconds
						SlotType= TimeScope|| Text= within at least 19 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is 9
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 9
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-435:]
		text: if the RCMTECHTERM_nosailing_requests whose index is less than 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests whose index is less than 3 equals RCMVAL_true , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests whose index is less than 3 equals RCMVAL_true
					[2]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc within at least 25 seconds within at least 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is less than 3
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= within at  least 25 seconds
						SlotType= TimeScope|| Text= within at  least 25 seconds
						SlotType= TimeScope|| Text= within at  least 25 seconds
						SlotType= TimeScope|| Text= within at  least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_nosailing_requests whose index is less than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-423:]
		text: while the RCMTECHTERM_lsc whose index is greater than 2 exceeds the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_transmission_error within 7 seconds for at most 7 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for at least 4 seconds , when the RCMTECHTERM_idc_inhibitor whose index is above 2 is less than the RCMTECHTERM_brake_fault_state for at most 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_lsc whose index is greater than 2 exceeds the RCMTECHTERM_standstill_request_flag , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_transmission_error within 7 seconds for at most 7 seconds , the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for at least 4 seconds , when the RCMTECHTERM_idc_inhibitor whose index is above 2 is less than the RCMTECHTERM_brake_fault_state for at most 21 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_lsc whose index is greater than 2 exceeds the RCMTECHTERM_standstill_request_flag
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_transmission_error within 7 seconds for at most 7 seconds
					[3]: the RCMTECHTERM_transmission_error shall be set to RCMVAL_true for at least 4 seconds when the RCMTECHTERM_idc_inhibitor whose index is above 2 is less than the RCMTECHTERM_brake_fault_state for at most 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is greater than 2
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at most 7 seconds
						SlotType= TimeScope|| Text= within 7 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is above 2
						SlotType= TimeScope|| Text= for at least 4 seconds
						SlotType= TimeScope|| Text= for at most 21 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 7
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 7
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 7
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index is above 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_lsc exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_lsc
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_lsc whose index is greater than 2
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 2
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-119:]
		text: when the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_defined_position , if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater than the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds within 6 seconds every at least 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_defined_position , if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater than the RCMTECHTERM_vehicle_speed_setpoint , the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds within 6 seconds every at least 15 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_defined_position
					[2]: if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater than the RCMTECHTERM_vehicle_speed_setpoint
					[3]: the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor for at least 11 seconds within 6 seconds every at least 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_defined_position
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that equals 4
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= TimeScope|| Text= for at least 11 seconds
						SlotType= TimeScope|| Text= within 6 seconds
						SlotType= TimeScope|| Text= every at least 15 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be received from the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-458:]
		text: if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds , before the RCMTECHTERM_brake_fault_state whose index exceeds 3 equals RCMVAL_true for at least 28 seconds , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request within at most 26 seconds every at most 9 seconds , if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds , before the RCMTECHTERM_brake_fault_state whose index exceeds 3 equals RCMVAL_true for at least 28 seconds , the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request within at most 26 seconds every at most 9 seconds , if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds before the RCMTECHTERM_brake_fault_state whose index exceeds 3 equals RCMVAL_true for at least 28 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request within at most 26 seconds every at most 9 seconds
					[3]: if the RCMTECHTERM_nosailing_requests that exceeds 6 equals RCMVAL_true within 2 seconds for at most 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 6
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state whose index exceeds 3
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= for at least 28 seconds
						SlotType= TimeScope|| Text= within 2 seconds
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request
						SlotType= TimeScope|| Text= within at most 26 seconds
						SlotType= TimeScope|| Text= every at most 9 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that exceeds 6
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= within 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_nosailing_requests equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_nosailing_requests
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be sent to the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-107:]
		text: before the RCMTECHTERM_standstill_request_flag whose index exceeds 5 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_inhibitor within 11 seconds every at most 23 seconds , when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 18 seconds , after the RCMTECHTERM_quality_signal that is above 0 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_standstill_request_flag whose index exceeds 5 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_inhibitor within 11 seconds every at most 23 seconds , when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 18 seconds , after the RCMTECHTERM_quality_signal that is above 0 is RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_standstill_request_flag whose index exceeds 5 is RCMVAL_true
					[2]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_inhibitor within 11 seconds every at most 23 seconds when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true for at most 18 seconds
					[3]: after the RCMTECHTERM_quality_signal that is above 0 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index exceeds 5
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= within 11 seconds
						SlotType= TimeScope|| Text= every at most 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_inhibitor
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_quality_signal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal that is above 0
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_standstill_request_flag is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_standstill_request_flag whose index exceeds 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_quality_signal is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_quality_signal
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = null
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: the RCMTECHTERM_quality_signal
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-216:]
		text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor every at least 6 seconds , if the RCMTECHTERM_engine_error is RCMVAL_true , when the RCMTECHTERM_engine_error whose index is 4 is greater than the RCMTECHTERM_sailing_request , after the RCMTECHTERM_quality_signal whose index is less than 5 equals RCMVAL_true for at most 22 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor every at least 6 seconds , if the RCMTECHTERM_engine_error is RCMVAL_true , when the RCMTECHTERM_engine_error whose index is 4 is greater than the RCMTECHTERM_sailing_request , after the RCMTECHTERM_quality_signal whose index is less than 5 equals RCMVAL_true for at most 22 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor every at least 6 seconds
					[2]: if the RCMTECHTERM_engine_error is RCMVAL_true when the RCMTECHTERM_engine_error whose index is 4 is greater than the RCMTECHTERM_sailing_request
					[3]: after the RCMTECHTERM_quality_signal whose index is less than 5 equals RCMVAL_true for at most 22 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= every at least 6 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is 4
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_quality_signal equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_quality_signal whose index is less than 5
						SlotType= TimeScope|| Text= for at most 22 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is greater than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be turned to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_quality_signal equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_quality_signal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_quality_signal whose index is less than 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 22
										Unit: seconds
										QPRelation: at  most
									<FormalSemantic>
										TechnicalOperator: null
										Value: 22
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-337:]
		text: the RCMTECHTERM_transmission_error shall be moved up every at most 29 seconds , when the RCMTECHTERM_steering_wheel_angle whose index is greater than 5 is less than the RCMTECHTERM_engine_error for at least 11 seconds every at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_transmission_error shall be moved up every at most 29 seconds , when the RCMTECHTERM_steering_wheel_angle whose index is greater than 5 is less than the RCMTECHTERM_engine_error for at least 11 seconds every at least 9 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_transmission_error shall be moved up every at most when the RCMTECHTERM_steering_wheel_angle whose index is greater than 5 is less than the RCMTECHTERM_engine_error for at least 11 seconds every at least 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle whose index is greater than 5
						SlotType= TimeScope|| Text= every at  least 9 seconds
						SlotType= TimeScope|| Text= for at  least 11 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be moved at most
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_steering_wheel_angle is less than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_steering_wheel_angle whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 11
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be moved at most
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: most
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-228:]
		text: when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc , when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_sailing_request shall be moved up within at least 4 seconds for 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc , when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc , the RCMTECHTERM_sailing_request shall be moved up within at least 4 seconds for 26 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc
					[2]: when the RCMTECHTERM_brake_fault_state that is 7 is greater than the RCMTECHTERM_lsc
					[3]: the RCMTECHTERM_sailing_request shall be moved up within at least 4 seconds for 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 7
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 7
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= within at least 4 seconds
						SlotType= TimeScope|| Text= for 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_fault_state is greater than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 4
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-349:]
		text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_quality_signal within at most 5 seconds for at least 26 seconds , while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_quality_signal for at most 29 seconds , after the RCMTECHTERM_steering_wheel_angle that is greater than 5 exceeds the RCMTECHTERM_engine_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_quality_signal within at most 5 seconds for at least 26 seconds , while the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_quality_signal for at most 29 seconds , after the RCMTECHTERM_steering_wheel_angle that is greater than 5 exceeds the RCMTECHTERM_engine_error .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_quality_signal within at most 5 seconds for at least 26 seconds
					[2]: the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_quality_signal for at most 29 seconds after the RCMTECHTERM_steering_wheel_angle that is greater than 5
					[3]: exceeds the RCMTECHTERM_engine_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_engine_error shall be sent to the RCMTECHTERM_quality_signal
						SlotType= TimeScope|| Text= within at most 5 seconds
						SlotType= TimeScope|| Text= for at least 26 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_steering_wheel_angle
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_quality_signal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_steering_wheel_angle that is greater than 5
						SlotType= TimeScope|| Text= for at most 29 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_engine_error exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_steering_wheel_angle
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-313:]
		text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor every at least 8 seconds within 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor every at least 8 seconds within 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor seconds within 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor seconds
						SlotType= TimeScope|| Text= within 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be received from the RCMTECHTERM_sailing_inhibitor seconds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor seconds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-422:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds , after the RCMTECHTERM_sailing_inhibitor that is above 8 is greater than the RCMTECHTERM_sailing_request .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds , after the RCMTECHTERM_sailing_inhibitor that is above 8 is greater than the RCMTECHTERM_sailing_request .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint within at most 16 seconds every at most 21 seconds within at most 16 seconds
					[2]: after the RCMTECHTERM_sailing_inhibitor that is above 8 is greater than the RCMTECHTERM_sailing_request
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= every at  most 21 seconds
						SlotType= TimeScope|| Text= within at  most 16 seconds
						SlotType= TimeScope|| Text= within at  most 16 seconds
						SlotType= TimeScope|| Text= within at  most 16 seconds
						SlotType= TimeScope|| Text= within at  most 16 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is above 8
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 21
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 16
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_sailing_inhibitor
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-204:]
		text: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_nosailing_requests .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_nosailing_requests .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal
					[2]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_nosailing_requests
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_nosailing_requests
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-325:]
		text: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true within at least 27 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_defined_position , when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_lsc for at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true within at least 27 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_defined_position , when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_lsc for at least 18 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true within at least 27 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_defined_position
					[3]: when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_lsc for at least 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within at least 27 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_defined_position
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_lsc
						SlotType= TimeScope|| Text= for at least 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_quality_signal exceeds the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-410:]
		text: when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint for 24 seconds , after the RCMTECHTERM_brake_pedal equals RCMVAL_true for 19 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error within at most 12 seconds every 26 seconds within at most 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint for 24 seconds , after the RCMTECHTERM_brake_pedal equals RCMVAL_true for 19 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error within at most 12 seconds every 26 seconds within at most 12 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint for 24 seconds
					[2]: after the RCMTECHTERM_brake_pedal equals RCMVAL_true for 19 seconds
					[3]: the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error within at most 12 seconds every 26 seconds within at most 12 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for 24 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_brake_pedal equals RCMVAL_true
						SlotType= TimeScope|| Text= for 19 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within at most 12 seconds
						SlotType= TimeScope|| Text= within at most 12 seconds
						SlotType= TimeScope|| Text= every 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_nosailing_requests is above the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 24
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 12
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 12
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_brake_pedal equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 19
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 19
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-446:]
		text: the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 9 seconds every at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 9 seconds every at most 29 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be moved up within at most 9 seconds every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be moved up within 9 every
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be moved up within 9 every
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: 9 every
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-301:]
		text: before the RCMTECHTERM_transmission_error equals RCMVAL_true , the RCMTECHTERM_lsc shall be set to RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_transmission_error equals RCMVAL_true , the RCMTECHTERM_lsc shall be set to RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_transmission_error equals RCMVAL_true
					[2]: the RCMTECHTERM_lsc shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_lsc shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-434:]
		text: when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds , when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within 19 seconds , if the RCMTECHTERM_brake_pedal whose index exceeds 6 is RCMVAL_true within at most 18 seconds for at least 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds , when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds , the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within 19 seconds , if the RCMTECHTERM_brake_pedal whose index exceeds 6 is RCMVAL_true within at most 18 seconds for at least 25 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds when the RCMTECHTERM_standstill_request_flag that is above 3 is less than the RCMTECHTERM_brake_fault_state for at most 18 seconds every 13 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true within 19 seconds
					[3]: if the RCMTECHTERM_brake_pedal whose index exceeds 6 is RCMVAL_true within at most 18 seconds for at least 25 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is above 3
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is above 3
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= for at most 18 seconds
						SlotType= TimeScope|| Text= every 13 seconds
						SlotType= TimeScope|| Text= every 13 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 19 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index exceeds 6
						SlotType= TimeScope|| Text= within at most 18 seconds
						SlotType= TimeScope|| Text= for at least 25 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index exceeds 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is less than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-469:]
		text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_inhibitor every at least 25 seconds for at least 28 seconds , if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds , if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_inhibitor every at least 25 seconds for at least 28 seconds , if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds , if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_inhibitor every at least 25 seconds for at least 28 seconds
					[2]: if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds
					[3]: if the RCMTECHTERM_idc_inhibitor whose index exceeds 7 equals RCMVAL_true within at least 2 seconds for at most 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for at least 28 seconds
						SlotType= TimeScope|| Text= every at least 25 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 7
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for at most 26 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index exceeds 7
						SlotType= TimeScope|| Text= within at least 2 seconds
						SlotType= TimeScope|| Text= for at most 26 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_idc_inhibitor whose index exceeds 7
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_brake_fault_state shall be received from the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-118:]
		text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true for at least 23 seconds every 10 seconds , after the RCMTECHTERM_nosailing_requests whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at least 14 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true for at least 23 seconds every 10 seconds , after the RCMTECHTERM_nosailing_requests whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at least 14 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true for at least 23 seconds every 10 seconds
					[2]: after the RCMTECHTERM_nosailing_requests whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at least 14 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= for at least 23 seconds
						SlotType= TimeScope|| Text= every 10 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index is greater than 3
						SlotType= TimeScope|| Text= for at least 14 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 10
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_nosailing_requests whose index is greater than 3
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 3
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 14
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 14
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-227:]
		text: if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every at least 12 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds , if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds , the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every at least 12 seconds .
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds
					[2]: if the RCMTECHTERM_brake_fault_state that is 4 is less than the RCMTECHTERM_sailing_inhibitor within at least 3 seconds
					[3]: the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true every
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 4
						SlotType= TimeScope|| Text= within at  least 3 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 4
						SlotType= TimeScope|| Text= within at  least 3 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_fault_state is less than the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_fault_state
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_idc_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-348:]
		text: while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_idc_inhibitor for 16 seconds within at most 18 seconds every 17 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true , the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_idc_inhibitor for 16 seconds within at most 18 seconds every 17 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_idc_inhibitor for 16 seconds within at most 18 seconds every 17 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at most 18 seconds
						SlotType= TimeScope|| Text= for 16 seconds
						SlotType= TimeScope|| Text= every 17 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be turned to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 16
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 16
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 18
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 18
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-90:]
		text: after the RCMTECHTERM_vehicle_speed_setpoint that is above 7 exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within at least 5 seconds , after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_brake_fault_state .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_setpoint that is above 7 exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within at least 5 seconds , after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_brake_fault_state .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_setpoint that is above 7 exceeds the RCMTECHTERM_sailing_inhibitor
					[2]: the RCMTECHTERM_vehicle_speed_setpoint shall be moved up within at least 5 seconds
					[3]: after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_brake_fault_state
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint that is above 7
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						SlotType= TimeScope|| Text= within at least 5 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_brake_fault_state
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_setpoint exceeds the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_vehicle_speed_setpoint
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: null
										Text = after the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_brake_fault_state
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_brake_fault_state
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-106:]
		text: before the RCMTECHTERM_lsc that is above 8 is RCMVAL_true for 25 seconds , before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag , before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_lsc that is above 8 is RCMVAL_true for 25 seconds , before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag , before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag , when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_inhibitor , the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_lsc that is above 8 is RCMVAL_true for 25 seconds
					[2]: before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag
					[3]: before the RCMTECHTERM_nosailing_requests whose index exceeds 0 exceeds the RCMTECHTERM_standstill_request_flag
					[4]: when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_inhibitor
					[5]: the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_lsc is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 8
						SlotType= TimeScope|| Text= for 25 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 0
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests whose index exceeds 0
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_inhibitor
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_sailing_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be turned to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_lsc is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 8
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 25
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 25
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index exceeds 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_nosailing_requests exceeds the RCMTECHTERM_standstill_request_flag
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_nosailing_requests whose index exceeds 0
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 0
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_standstill_request_flag
											</ArgDetails>
										</Operands>
										<Operator>
											relation:exceeds
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-239:]
		text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests for at least 3 seconds , before the RCMTECHTERM_defined_position that exceeds 7 is less than the RCMTECHTERM_lsc for at most 8 seconds , when the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination every at most 15 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests for at least 3 seconds , before the RCMTECHTERM_defined_position that exceeds 7 is less than the RCMTECHTERM_lsc for at most 8 seconds , when the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination every at most 15 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests for at least 3 seconds before the RCMTECHTERM_defined_position that exceeds 7 is less than the RCMTECHTERM_lsc for at most 8 seconds when the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination every at most 15 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is less than the RCMTECHTERM_lsc
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that exceeds 7
						SlotType= TimeScope|| Text= for at least 3 seconds
						SlotType= TimeScope|| Text= for at most 8 seconds
						SlotType= TimeScope|| Text= every at most 15 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is above the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_defined_position
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is less than the RCMTECHTERM_lsc
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-203:]
		text: the RCMTECHTERM_standstill_request_flag shall be moved up , before the RCMTECHTERM_brake_fault_state that is 6 is above the RCMTECHTERM_sailing_inhibitor .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_standstill_request_flag shall be moved up , before the RCMTECHTERM_brake_fault_state that is 6 is above the RCMTECHTERM_sailing_inhibitor .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_standstill_request_flag shall be moved up
					[2]: before the RCMTECHTERM_brake_fault_state that is 6 is above the RCMTECHTERM_sailing_inhibitor
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag shall be moved up
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_sailing_inhibitor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_fault_state that is 6
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_standstill_request_flag shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_fault_state is above the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_brake_fault_state
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 6
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-324:]
		text: when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds , when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds , the RCMTECHTERM_nosailing_requests shall be moved up every 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds , when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds , the RCMTECHTERM_nosailing_requests shall be moved up every 28 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds when the RCMTECHTERM_engine_error that is greater than 0 is less than the RCMTECHTERM_lsc for 26 seconds
					[2]: the RCMTECHTERM_nosailing_requests shall be moved up every 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is less than the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is greater than 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that is greater than 0
						SlotType= TimeScope|| Text= for 26 seconds
						SlotType= TimeScope|| Text= for 26 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
						SlotType= TimeScope|| Text= every 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is less than the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_engine_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 0
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-433:]
		text: when the RCMTECHTERM_lsc that is above 6 equals RCMVAL_true every at most 13 seconds for at least 20 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 23 seconds , after the RCMTECHTERM_lsc that equals 0 is less than the RCMTECHTERM_nosailing_requests for at least 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_lsc that is above 6 equals RCMVAL_true every at most 13 seconds for at least 20 seconds , the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 23 seconds , after the RCMTECHTERM_lsc that equals 0 is less than the RCMTECHTERM_nosailing_requests for at least 18 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_lsc that is above 6 equals RCMVAL_true every at most 13 seconds for at least 20 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true every at least 23 seconds
					[3]: after the RCMTECHTERM_lsc that equals 0 is less than the RCMTECHTERM_nosailing_requests for at least 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that is above 6
						SlotType= TimeScope|| Text= for at least 20 seconds
						SlotType= TimeScope|| Text= every at most 13 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= every at least 23 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_lsc is less than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc that equals 0
						SlotType= TimeScope|| Text= for at least 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_lsc
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 20
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 20
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_lsc is less than the RCMTECHTERM_nosailing_requests
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_lsc
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_lsc
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 0
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 18
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 18
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-215:]
		text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds , before the RCMTECHTERM_sailing_termination equals RCMVAL_true for 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds , the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds , before the RCMTECHTERM_sailing_termination equals RCMVAL_true for 29 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error for at least 13 seconds
					[2]: before the RCMTECHTERM_sailing_termination equals RCMVAL_true for 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= for at  least 13 seconds
						SlotType= TimeScope|| Text= for at  least 13 seconds
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_termination equals RCMVAL_true
						SlotType= TimeScope|| Text= for 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 13
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_termination equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 29
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 29
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-336:]
		text: when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true every at most 9 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_standstill_request_flag for at most 17 seconds every at least 17 seconds , after the RCMTECHTERM_sailing_inhibitor whose index is less than 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true every at most 9 seconds , the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_standstill_request_flag for at most 17 seconds every at least 17 seconds , after the RCMTECHTERM_sailing_inhibitor whose index is less than 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true at most 9 seconds
					[2]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_standstill_request_flag for at most 17 seconds every at least 17 seconds
					[3]: after the RCMTECHTERM_sailing_inhibitor whose index is less than 9 is less than the RCMTECHTERM_vehicle_speed_quality_factor for 18 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true at most 9 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= for at most 17 seconds
						SlotType= TimeScope|| Text= every at least 17 seconds
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is less than 9
						SlotType= TimeScope|| Text= for 18 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_setpoint equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 17
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 17
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 17
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_inhibitor is less than the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is less than 9
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 9
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 18
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 18
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-421:]
		text: the RCMTECHTERM_sailing_inhibitor shall be moved up within at most 2 seconds every at least 3 seconds within at most 2 seconds , before the RCMTECHTERM_nosailing_requests that is above 1 is less than the RCMTECHTERM_engine_error , if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater than the RCMTECHTERM_vehicle_speed_setpoint , while the RCMTECHTERM_transmission_error that is greater than 9 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_inhibitor shall be moved up within at most 2 seconds every at least 3 seconds within at most 2 seconds , before the RCMTECHTERM_nosailing_requests that is above 1 is less than the RCMTECHTERM_engine_error , if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater than the RCMTECHTERM_vehicle_speed_setpoint , while the RCMTECHTERM_transmission_error that is greater than 9 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_inhibitor shall be moved up within at most 2 seconds every at least 3 seconds within at most 2 seconds
					[2]: before the RCMTECHTERM_nosailing_requests that is above 1 is less than the RCMTECHTERM_engine_error
					[3]: if the RCMTECHTERM_sailing_inhibitor that equals 4 is greater
					[4]: while the RCMTECHTERM_transmission_error that is greater than 9 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be moved up
						SlotType= TimeScope|| Text= within at most 2 seconds
						SlotType= TimeScope|| Text= within at most 2 seconds
						SlotType= TimeScope|| Text= every at least 3 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_engine_error
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_nosailing_requests that is above 1
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that equals 4
					C[4]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_transmission_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is greater than 9
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: greater
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_nosailing_requests is less than the RCMTECHTERM_engine_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_nosailing_requests
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_nosailing_requests
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<LogicalRelation>
									relation: AND
								</LogicalRelation>
									<ConditionalScope>
										scope phase: StartUpPhase
										<Condition>
											Keyword: after
											Text = while the RCMTECHTERM_transmission_error equals RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 9
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
									</ConditionalScope>
									<ConditionalScope>
										scope phase: EndUpPhase
										<Condition>
											Keyword: until
											Text = while the RCMTECHTERM_transmission_error equals RCMVAL_true
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												<HiddenConstraint>
												<Condition>
													Keyword: null
													Text = null
													<Operands>
														Arg[0]
														<ArgDetails>
															Text: the RCMTECHTERM_transmission_error
														</ArgDetails>
														Arg[1]
														<ArgDetails>
															Text: 9
														</ArgDetails>
													</Operands>
													<Operator>
														relation:is
													</Operator>
													Has valid-time:  false
													Is negatted: false
												</Condition>
												</HiddenConstraint>
												Arg[1]
												<ArgDetails>
													Text: RCMVAL_true
												</ArgDetails>
											</Operands>
											<Operator>
												relation:equals
											</Operator>
											Has valid-time:  false
											Is negatted: true
										</Condition>
									</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-300:]
		text: the RCMTECHTERM_sailing_request shall be moved up within 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_brake_pedal that equals 1 is above the RCMTECHTERM_transmission_error every at most 16 seconds for at least 7 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be moved up within 11 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination , if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination , when the RCMTECHTERM_brake_pedal that equals 1 is above the RCMTECHTERM_transmission_error every at most 16 seconds for at least 7 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be moved up within 11 seconds
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination when the RCMTECHTERM_brake_pedal that equals 1 is above the RCMTECHTERM_transmission_error every at most 16 seconds for at least 7 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= within 11 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that equals 1
						SlotType= TimeScope|| Text= for at least 7 seconds
						SlotType= TimeScope|| Text= every at most 16 seconds
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_transmission_error
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is less than the RCMTECHTERM_sailing_termination
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 11
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 11
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-457:]
		text: the RCMTECHTERM_lsc shall be moved up every at most 4 seconds , if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds , if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds , when the RCMTECHTERM_lsc is RCMVAL_true for at least 26 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_lsc shall be moved up every at most 4 seconds , if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds , if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds , when the RCMTECHTERM_lsc is RCMVAL_true for at least 26 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_lsc shall be moved up every at most 4 seconds
					[2]: if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds
					[3]: if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor for 7 seconds when the RCMTECHTERM_lsc is RCMVAL_true for at least 26 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be moved up
						SlotType= TimeScope|| Text= every at most 4 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for 7 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at least 26 seconds
						SlotType= TimeScope|| Text= for 7 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_standstill_request_flag is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 26
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 26
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_lsc shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 4
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 4
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-312:]
		text: before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_defined_position equals RCMVAL_true , the RCMTECHTERM_sailing_request shall be moved up for at least 9 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal , before the RCMTECHTERM_defined_position equals RCMVAL_true , the RCMTECHTERM_sailing_request shall be moved up for at least 9 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
					[2]: before the RCMTECHTERM_defined_position equals RCMVAL_true
					[3]: the RCMTECHTERM_sailing_request shall be moved up for at least 9 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position equals RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= for at least 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_sailing_request shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_steering_wheel_angle exceeds the RCMTECHTERM_brake_pedal
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_steering_wheel_angle
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_defined_position equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-445:]
		text: after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_nosailing_requests shall be moved up within 25 seconds for at most 23 seconds , when the RCMTECHTERM_brake_pedal that equals 5 is RCMVAL_true every at most 24 seconds for 19 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 is RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_standstill_request_flag , the RCMTECHTERM_nosailing_requests shall be moved up within 25 seconds for at most 23 seconds , when the RCMTECHTERM_brake_pedal that equals 5 is RCMVAL_true every at most 24 seconds for 19 seconds , before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 is RCMVAL_true .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_standstill_request_flag
					[2]: the RCMTECHTERM_nosailing_requests shall be moved up within 25 seconds for at most 23 seconds when the RCMTECHTERM_brake_pedal that equals 5 is RCMVAL_true every at most 24 seconds for 19 seconds
					[3]: before the RCMTECHTERM_sailing_inhibitor whose index exceeds 9 is RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_standstill_request_flag
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal that equals 5
						SlotType= TimeScope|| Text= for 19 seconds
						SlotType= TimeScope|| Text= within 25 seconds
						SlotType= TimeScope|| Text= every at  most 24 seconds
						SlotType= TimeScope|| Text= for at  most 23 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be moved up
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index exceeds 9
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_brake_pedal
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 24
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 24
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_transmission_error exceeds the RCMTECHTERM_standstill_request_flag
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_standstill_request_flag
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_inhibitor whose index exceeds 9
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 9
													</ArgDetails>
												</Operands>
												<Operator>
													relation:exceeds
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-420:]
		text: before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_inhibitor for 2 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_defined_position every at least 9 seconds within at most 25 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_inhibitor for 2 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_defined_position every at least 9 seconds within at most 25 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_inhibitor for 2 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_defined_position every at least 9 seconds within
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_inhibitor
						SlotType= TimeScope|| Text= for 2 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_defined_position
						SlotType= TimeScope|| Text= every at  least 9 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be received from the RCMTECHTERM_defined_position
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 9
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 9
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_engine_error
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 2
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 2
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-129:]
		text: before the RCMTECHTERM_brake_pedal whose index is above 2 is above the RCMTECHTERM_brake_fault_state for 20 seconds , if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds , if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds , when the RCMTECHTERM_engine_error whose index is greater than 5 is less than the RCMTECHTERM_vehicle_speed_setpoint for at least 4 seconds every at least 19 seconds , the RCMTECHTERM_defined_position shall be moved up .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_brake_pedal whose index is above 2 is above the RCMTECHTERM_brake_fault_state for 20 seconds , if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds , if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds , when the RCMTECHTERM_engine_error whose index is greater than 5 is less than the RCMTECHTERM_vehicle_speed_setpoint for at least 4 seconds every at least 19 seconds , the RCMTECHTERM_defined_position shall be moved up .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_brake_pedal whose index is above 2 is above the RCMTECHTERM_brake_fault_state for 20 seconds
					[2]: if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds
					[3]: if the RCMTECHTERM_engine_error whose index is greater than 3 is less than the RCMTECHTERM_sailing_request for at most 2 seconds when the RCMTECHTERM_engine_error whose index is greater than 5 is less than the RCMTECHTERM_vehicle_speed_setpoint for at least 4 seconds every at least 19 seconds
					[4]: the RCMTECHTERM_defined_position shall be moved up
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is above 2
						SlotType= TimeScope|| Text= for 20 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is greater than 3
						SlotType= TimeScope|| Text= for at most 2 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is greater than 3
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error whose index is greater than 5
						SlotType= TimeScope|| Text= for at most 2 seconds
						SlotType= TimeScope|| Text= for at least 4 seconds
						SlotType= TimeScope|| Text= every at least 19 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be moved up
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_sailing_request
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_engine_error whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_engine_error is less than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_defined_position shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_brake_fault_state
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_pedal
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_brake_pedal whose index is above 2
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 2
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_brake_fault_state
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 20
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 20
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-238:]
		text: before the RCMTECHTERM_sailing_inhibitor whose index is above 5 is RCMVAL_true , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle within at most 3 seconds for at least 8 seconds , before the RCMTECHTERM_transmission_error that is less than 1 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor whose index is above 5 is RCMVAL_true , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds , if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle within at most 3 seconds for at least 8 seconds , before the RCMTECHTERM_transmission_error that is less than 1 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor whose index is above 5 is RCMVAL_true
					[2]: if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds
					[3]: if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error within at most 15 seconds
					[4]: the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle within at most 3 seconds for at least 8 seconds
					[5]: before the RCMTECHTERM_transmission_error that is less than 1 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is above 5
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within at most 15 seconds
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						SlotType= TimeScope|| Text= within at most 15 seconds
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle
						SlotType= TimeScope|| Text= within at most 3 seconds
						SlotType= TimeScope|| Text= for at least 8 seconds
					C[5]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_transmission_error equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_transmission_error that is less than 1
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_vehicle_speed_setpoint is greater than the RCMTECHTERM_engine_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 15
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 15
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_setpoint shall be received from the RCMTECHTERM_steering_wheel_angle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_transmission_error equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_transmission_error
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 1
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_sailing_inhibitor whose index is above 5
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 5
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-359:]
		text: when the RCMTECHTERM_sailing_request whose index is greater than 5 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within 21 seconds for 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_request whose index is greater than 5 is RCMVAL_true , the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within 21 seconds for 2 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_request whose index is greater than 5 is RCMVAL_true
					[2]: the RCMTECHTERM_quality_signal shall be set to RCMVAL_true within 21 seconds for 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_request is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_request whose index is greater than 5
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						SlotType= TimeScope|| Text= within 21 seconds
						SlotType= TimeScope|| Text= for 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_request is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_request
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_request whose index is greater than 5
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-117:]
		text: the RCMTECHTERM_sailing_request shall be moved up within 25 seconds every 28 seconds , before the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is above the RCMTECHTERM_sailing_request for 27 seconds , the RCMTECHTERM_sailing_request shall be moved up within 25 seconds every 28 seconds , if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_brake_pedal for at least 23 seconds , when the RCMTECHTERM_brake_pedal whose index is less than 1 is above the RCMTECHTERM_nosailing_requests every at most 5 seconds for at most 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_request shall be moved up within 25 seconds every 28 seconds , before the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is above the RCMTECHTERM_sailing_request for 27 seconds , the RCMTECHTERM_sailing_request shall be moved up within 25 seconds every 28 seconds , if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_brake_pedal for at least 23 seconds , when the RCMTECHTERM_brake_pedal whose index is less than 1 is above the RCMTECHTERM_nosailing_requests every at most 5 seconds for at most 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_request shall be moved up within 25 seconds every 28 seconds
					[2]: the RCMTECHTERM_standstill_request_flag whose index is greater than 4 is above the RCMTECHTERM_sailing_request for 27 seconds
					[3]: shall be moved up within 25 seconds every 28 seconds
					[4]: if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_brake_pedal for at least 23 seconds when the RCMTECHTERM_brake_pedal whose index is less than 1 is above the RCMTECHTERM_nosailing_requests every at most 5 seconds for at most 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_request shall be moved up
						SlotType= TimeScope|| Text= every 28 seconds
						SlotType= TimeScope|| Text= within 25 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_standstill_request_flag is above the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag whose index is greater than 4
						SlotType= TimeScope|| Text= for 27 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= seconds shall be moved up within 25
						SlotType= TimeScope|| Text= every 28 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_brake_pedal whose index is less than 1
						SlotType= TimeScope|| Text= every at  most 5 seconds
						SlotType= TimeScope|| Text= for at  most 2 seconds
						SlotType= TimeScope|| Text= for at  least 23 seconds
					C[4]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_brake_pedal whose index is less than 1
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 23
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 23
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_brake_pedal is above the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = seconds shall be moved up within 25
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: seconds
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: 25
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<InBetweenTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-105:]
		text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_lsc , while the RCMTECHTERM_sailing_inhibitor whose index is above 9 equals RCMVAL_true .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_lsc , while the RCMTECHTERM_sailing_inhibitor whose index is above 9 equals RCMVAL_true .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_lsc
					[2]: while the RCMTECHTERM_sailing_inhibitor whose index is above 9 equals RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_lsc
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index is above 9
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests shall be sent to the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_inhibitor whose index is above 9
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 9
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_sailing_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_sailing_inhibitor whose index is above 9
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 9
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_true
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-214:]
		text: when the RCMTECHTERM_sailing_termination whose index exceeds 6 is less than the RCMTECHTERM_brake_pedal for at most 10 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the RCMTECHTERM_sailing_termination whose index exceeds 6 is less than the RCMTECHTERM_brake_pedal for at most 10 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds , the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds .
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_sailing_termination whose index exceeds 6 is less than the RCMTECHTERM_brake_pedal for at most 10 seconds
					[2]: the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint within at least 29 seconds for 8 seconds every 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index exceeds 6
						SlotType= TimeScope|| Text= for at  most 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= every 2 seconds
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= within at  least 29 seconds
						SlotType= TimeScope|| Text= within at  least 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_sailing_termination is less than the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_termination whose index exceeds 6
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 10
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 10
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_inhibitor shall be received from the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-335:]
		text: after the RCMTECHTERM_sailing_termination whose index is 2 equals RCMVAL_true for 14 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request within at least 6 seconds within at least 6 seconds , if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_setpoint for 19 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_sailing_termination whose index is 2 equals RCMVAL_true for 14 seconds , the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request within at least 6 seconds within at least 6 seconds , if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_setpoint for 19 seconds .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_sailing_termination whose index is 2 equals RCMVAL_true for 14 seconds the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request within at least 6 seconds within at least 6 seconds
					[2]: if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_setpoint for 19 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_sailing_termination equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_setpoint shall be sent to the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination whose index is 2
						SlotType= TimeScope|| Text= within at least 6 seconds
						SlotType= TimeScope|| Text= within at least 6 seconds
						SlotType= TimeScope|| Text= for 14 seconds
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_setpoint
						SlotType= TimeScope|| Text= for 19 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal is less than the RCMTECHTERM_vehicle_speed_setpoint
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_setpoint
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = RCMVAL_true equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 14
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 14
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 6
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_sailing_termination
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_termination
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-444:]
		text: the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_idc_inhibitor within at most 29 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_idc_inhibitor within at most 29 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_idc_inhibitor within at most 29 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= within at most 29 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_brake_pedal shall be turned to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 29
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-226:]
		text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error within 27 seconds every at least 22 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 is above the RCMTECHTERM_idc_inhibitor for at most 6 seconds , when the RCMTECHTERM_defined_position whose index is greater than 3 is RCMVAL_true every 13 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error within 27 seconds every at least 22 seconds , before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 is above the RCMTECHTERM_idc_inhibitor for at most 6 seconds , when the RCMTECHTERM_defined_position whose index is greater than 3 is RCMVAL_true every 13 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error within 27 seconds every at least 22 seconds
					[2]: before the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0 is above the RCMTECHTERM_idc_inhibitor for at most 6 seconds when the RCMTECHTERM_defined_position whose index is greater than 3 is RCMVAL_true every 13 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= within 27 seconds
						SlotType= TimeScope|| Text= every at least 22 seconds
					C[2]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_idc_inhibitor
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_defined_position is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_setpoint whose index is less than 0
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index is greater than 3
						SlotType= TimeScope|| Text= for at most 6 seconds
						SlotType= TimeScope|| Text= every 13 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_defined_position is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_defined_position
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_defined_position whose index is greater than 3
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 3
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 6
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 6
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_quality_signal shall be received from the RCMTECHTERM_transmission_error
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_quality_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 22
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 22
							</FormalSemantic>
						<InBetweenTime>
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 27
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_vehicle_speed_setpoint is above the RCMTECHTERM_idc_inhibitor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_setpoint
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_idc_inhibitor
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-347:]
		text: before the RCMTECHTERM_defined_position that is 4 is greater than the RCMTECHTERM_sailing_request , if the RCMTECHTERM_engine_error that exceeds 8 is above the RCMTECHTERM_brake_pedal for at most 27 seconds within 13 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_lsc .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_defined_position that is 4 is greater than the RCMTECHTERM_sailing_request , if the RCMTECHTERM_engine_error that exceeds 8 is above the RCMTECHTERM_brake_pedal for at most 27 seconds within 13 seconds , the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_lsc .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_defined_position that is 4 is greater than the RCMTECHTERM_sailing_request
					[2]: if the RCMTECHTERM_engine_error that exceeds 8 is above the RCMTECHTERM_brake_pedal for at most 27 seconds within 13 seconds
					[3]: the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_lsc
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_request
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position that is 4
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_pedal
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_engine_error that exceeds 8
						SlotType= TimeScope|| Text= for at most 27 seconds
						SlotType= TimeScope|| Text= within 13 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_lsc
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_engine_error is above the RCMTECHTERM_brake_pedal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_engine_error
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_engine_error
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 27
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 27
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 13
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 13
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_transmission_error shall be received from the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_transmission_error
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be received
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_defined_position is greater than the RCMTECHTERM_sailing_request
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = null
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: the RCMTECHTERM_defined_position
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 4
												</ArgDetails>
											</Operands>
											<Operator>
												relation:is
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_request
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-432:]
		text: while the RCMTECHTERM_idc_inhibitor whose index is less than 8 is less than the RCMTECHTERM_nosailing_requests for at most 19 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_idc_inhibitor for at most 19 seconds within at least 28 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: while the RCMTECHTERM_idc_inhibitor whose index is less than 8 is less than the RCMTECHTERM_nosailing_requests for at most 19 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_idc_inhibitor for at most 19 seconds within at least 28 seconds .
				<ExtractedComponents>
					[1]: while the RCMTECHTERM_idc_inhibitor whose index is less than 8 is less than the RCMTECHTERM_nosailing_requests for at most 19 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_idc_inhibitor for at most 19 seconds within at least 28 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_nosailing_requests
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_idc_inhibitor whose index is less than 8
						SlotType= TimeScope|| Text= for at most 19 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at most 19 seconds
						SlotType= TimeScope|| Text= within at least 28 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be turned to the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 28
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is less than 8
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: false
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the RCMTECHTERM_idc_inhibitor is less than the RCMTECHTERM_nosailing_requests
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_idc_inhibitor
											</ArgDetails>
											<HiddenConstraint>
											<Condition>
												Keyword: null
												Text = the RCMTECHTERM_idc_inhibitor whose index is less than 8
												<Operands>
													Arg[0]
													<ArgDetails>
														Text: index
													</ArgDetails>
													Arg[1]
													<ArgDetails>
														Text: 8
													</ArgDetails>
												</Operands>
												<Operator>
													relation:is
												</Operator>
												Has valid-time:  false
												Is negatted: false
											</Condition>
											</HiddenConstraint>
											Arg[1]
											<ArgDetails>
												Text: the RCMTECHTERM_nosailing_requests
											</ArgDetails>
										</Operands>
										<Operator>
											relation:is
										</Operator>
										Has valid-time:  true
										<ValidTime>
											TimeType: Scope
											Value: 19
											Unit: seconds
											QPRelation: at  most
										<FormalSemantic>
											TechnicalOperator: null
											Value: 19
											</FormalSemantic>
										<ValidTime>
										Is negatted: true
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-311:]
		text: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor within at least 20 seconds within at least 20 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 2 is above the RCMTECHTERM_lsc every at most 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor within at least 20 seconds within at least 20 seconds , when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 2 is above the RCMTECHTERM_lsc every at most 2 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor within at least 20 seconds within at least 20 seconds when the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 2 is above the RCMTECHTERM_lsc every at most 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 2
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= within at least 20 seconds
						SlotType= TimeScope|| Text= every at most 2 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_vehicle_speed_quality_factor is above the RCMTECHTERM_lsc
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_vehicle_speed_quality_factor whose index is greater than 2
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 2
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_sailing_termination shall be turned to the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-468:]
		text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests for 15 seconds every at most 19 seconds , when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_idc_inhibitor every 6 seconds for at least 25 seconds , if the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_brake_fault_state within 21 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests for 15 seconds every at most 19 seconds , when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_idc_inhibitor every 6 seconds for at least 25 seconds , if the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_brake_fault_state within 21 seconds .
				<ExtractedComponents>
					[1]: the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests for 15 seconds every at most 19 seconds when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_idc_inhibitor every 6 seconds for at least 25 seconds
					[2]: if the RCMTECHTERM_sailing_inhibitor whose index equals 4 is greater than the RCMTECHTERM_brake_fault_state within 21 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_idc_inhibitor
						SlotType= TimeScope|| Text= for at least 25 seconds
						SlotType= TimeScope|| Text= for 15 seconds
						SlotType= TimeScope|| Text= every at most 19 seconds
						SlotType= TimeScope|| Text= every 6 seconds
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor whose index equals 4
						SlotType= TimeScope|| Text= within 21 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor is greater than the RCMTECHTERM_brake_fault_state
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = the RCMTECHTERM_sailing_inhibitor whose index equals 4
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: index
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 4
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_fault_state
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 21
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 21
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_lsc is greater than the RCMTECHTERM_idc_inhibitor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_idc_inhibitor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 25
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 25
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 19
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 19
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_steering_wheel_angle shall be sent to the RCMTECHTERM_nosailing_requests
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_steering_wheel_angle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be sent
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-202:]
		text: after the RCMTECHTERM_defined_position whose index exceeds 7 equals RCMVAL_true , if the RCMTECHTERM_lsc whose index is greater than 0 is less than the RCMTECHTERM_brake_fault_state for at most 26 seconds within at least 18 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_inhibitor every at least 29 seconds for 8 seconds , when the RCMTECHTERM_standstill_request_flag that is 6 is RCMVAL_true , before the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_nosailing_requests .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_defined_position whose index exceeds 7 equals RCMVAL_true , if the RCMTECHTERM_lsc whose index is greater than 0 is less than the RCMTECHTERM_brake_fault_state for at most 26 seconds within at least 18 seconds , the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_inhibitor every at least 29 seconds for 8 seconds , when the RCMTECHTERM_standstill_request_flag that is 6 is RCMVAL_true , before the RCMTECHTERM_defined_position exceeds the RCMTECHTERM_nosailing_requests .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_defined_position whose index exceeds 7 equals RCMVAL_true
					[2]: the RCMTECHTERM_lsc whose index is greater than 0 is less than the RCMTECHTERM_brake_fault_state for at most 26 seconds within at least 18 seconds before the RCMTECHTERM_defined_position
					[3]: the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_inhibitor every at least 29 seconds for 8 seconds when the RCMTECHTERM_standstill_request_flag that is 6 is RCMVAL_true
					[4]: exceeds the RCMTECHTERM_nosailing_requests
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_defined_position equals RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_defined_position whose index exceeds 7
					C[2]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_defined_position
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc is less than the RCMTECHTERM_brake_fault_state
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_lsc whose index is greater than 0
						SlotType= TimeScope|| Text= for at most 26 seconds
						SlotType= TimeScope|| Text= within at least 18 seconds
					C[3]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_standstill_request_flag that is 6
						SlotType= TimeScope|| Text= for 8 seconds
						SlotType= TimeScope|| Text= every at least 29 seconds
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_defined_position shall be sent to the RCMTECHTERM_sailing_inhibitor
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= exceeds the RCMTECHTERM_nosailing_requests
				</ClassifiedComponents>
				<RCMDetails>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_standstill_request_flag is RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_standstill_request_flag
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 6
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 8
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 8
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = true
						<InBetweenTime>
							TimeType: InBetween
							Value: 29
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: null
							Value: 29
							</FormalSemantic>
						<InBetweenTime>
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_nosailing_requests exceeds
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_nosailing_requests
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_defined_position equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_defined_position
										</ArgDetails>
										<HiddenConstraint>
										<Condition>
											Keyword: null
											Text = the RCMTECHTERM_defined_position whose index exceeds 7
											<Operands>
												Arg[0]
												<ArgDetails>
													Text: index
												</ArgDetails>
												Arg[1]
												<ArgDetails>
													Text: 7
												</ArgDetails>
											</Operands>
											<Operator>
												relation:exceeds
											</Operator>
											Has valid-time:  false
											Is negatted: false
										</Condition>
										</HiddenConstraint>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: null
										Text = before the RCMTECHTERM_defined_position
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the RCMTECHTERM_defined_position
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_True
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
									</Condition>
								</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-323:]
		text: after the RCMTECHTERM_vehicle_speed_quality_factor that is 1 equals RCMVAL_true for at most 29 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds , before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for 12 seconds , if the RCMTECHTERM_sailing_inhibitor that is 8 equals RCMVAL_false .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: after the RCMTECHTERM_vehicle_speed_quality_factor that is 1 equals RCMVAL_true for at most 29 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds , the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds , before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for 12 seconds , if the RCMTECHTERM_sailing_inhibitor that is 8 equals RCMVAL_false .
				<ExtractedComponents>
					[1]: after the RCMTECHTERM_vehicle_speed_quality_factor that is 1 equals RCMVAL_true for at most 29 seconds the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds
					[2]: the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag for 28 seconds
					[3]: before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true for 12 seconds
					[4]: if the RCMTECHTERM_sailing_inhibitor that is 8 equals RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= after the RCMTECHTERM_vehicle_speed_quality_factor equals RCMVAL_true
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_vehicle_speed_quality_factor that is 1
						SlotType= TimeScope|| Text= for at most 29 seconds
						SlotType= TimeScope|| Text= for 28 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag
						SlotType= TimeScope|| Text= for 28 seconds
					C[3]==>	Type: preScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
						SlotType= TimeScope|| Text= for 12 seconds
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_false
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_inhibitor that is 8
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_inhibitor equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_inhibitor
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_inhibitor
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 8
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_lsc shall be turned to the RCMTECHTERM_standstill_request_flag
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_lsc
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_standstill_request_flag
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be turned
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 28
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: null
							Value: 28
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after the RCMTECHTERM_vehicle_speed_quality_factor
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_vehicle_speed_quality_factor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor equals RCMVAL_true
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_true
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 12
										Unit: seconds
										QPRelation: null
									<FormalSemantic>
										TechnicalOperator: null
										Value: 12
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-456:]
		text: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_transmission_error for at least 10 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up , if the RCMTECHTERM_sailing_termination that is greater than 7 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at most 2 seconds .
		<PrimitiveReq>
			<PR>
				Id: [1]
				text: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_transmission_error for at least 10 seconds , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up , the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up , if the RCMTECHTERM_sailing_termination that is greater than 7 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at most 2 seconds .
				<ExtractedComponents>
					[1]: before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_transmission_error for at least 10 seconds
					[2]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
					[3]: the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
					[4]: if the RCMTECHTERM_sailing_termination that is greater than 7 exceeds the RCMTECHTERM_vehicle_speed_quality_factor for at most 2 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_transmission_error
						SlotType= TimeScope|| Text= for at least 10 seconds
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						SlotType= HiddenConstraint|| Text= the RCMTECHTERM_sailing_termination that is greater than 7
						SlotType= TimeScope|| Text= for at most 2 seconds
				</ClassifiedComponents>
				<RCMDetails>
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_sailing_termination exceeds the RCMTECHTERM_vehicle_speed_quality_factor
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_sailing_termination
							</ArgDetails>
							<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_sailing_termination
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 7
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							</HiddenConstraint>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 2
							Unit: seconds
							QPRelation: at  most
						<FormalSemantic>
							TechnicalOperator: null
							Value: 2
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_vehicle_speed_quality_factor shall be moved up
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_vehicle_speed_quality_factor
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: null
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be moved
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_sailing_inhibitor is above the RCMTECHTERM_transmission_error
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_sailing_inhibitor
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: the RCMTECHTERM_transmission_error
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  true
									<ValidTime>
										TimeType: Scope
										Value: 10
										Unit: seconds
										QPRelation: at  least
									<FormalSemantic>
										TechnicalOperator: null
										Value: 10
										</FormalSemantic>
									<ValidTime>
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

</ExtractedRequirement>
</log>
